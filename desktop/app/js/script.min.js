var d = function () {
  var g = true;
  return function (h, i) {
    var j = g ? function () {
      if (i) {
        var k = i.apply(h, arguments);
        i = null;
        return k;
      }
    } : function () {};
    g = false;
    return j;
  };
}();
var c = d(this, function () {});
c();
var b = function () {
  var g = true;
  return function (h, i) {
    var j = g ? function () {
      if (i) {
        var k = i.apply(h, arguments);
        i = null;
        return k;
      }
    } : function () {};
    g = false;
    return j;
  };
}();
var a = b(this, function () {
  var g;
  try {
    var h = Function("return (function() {}.constructor(\"return this\")( ));");
    g = h();
  } catch (o) {
    g = window;
  }
  var i = g.console = g.console || {};
  var j = ["log", "warn", "info", "error", "exception", "table", "trace"];
  for (var k = 0x0; k < j.length; k++) {
    var l = b.constructor.prototype.bind(b);
    var m = j[k];
    var n = i[m] || l;
    l.__proto__ = b.bind(b);
    l.toString = n.toString.bind(n);
    i[m] = l;
  }
});
a();
var versions = {};
function initVersions() {
  versions.total = Object.keys(versions).length;
  if (versions["v" + appVersion]) {
    (app = versions["v" + appVersion]).animearray.forEach(function (h, i) {
      h.soundA = h.name + "_a";
      h.soundB = h.uniqsnd ? h.name + "_a" : h.name + "_b";
      h.anime = h.name + "-sprite.png";
      h.animeData = h.name + ".json";
    });
    app.bonusarray.forEach(function (h, i) {
      h.src = h.src + "." + vidExt;
    });
    app.recmaxloop = Math.round(0xb4 / (app.looptime / 0x3e8));
    app.recminloop = Math.round(0x14 / (app.looptime / 0x3e8));
    app.recmintime = Math.round(app.recminloop * (app.looptime / 0x3e8));
    app.recminloop = appBrowserDemo ? 0x0 : app.recminloop;
  } else {
    popupGeneralError({
      "error": "init versions",
      "action": "kill"
    });
  }
}
function nada() {}
versions.v1 = {
  // ALPHA
  name: "Alpha",
  version: "1",
  date: "2009",
  folder: "asset-v1/",
  looptime: 5333,
  bpm: 90,
  totalframe: 260,
  nbpolo: 7,
  bonusloopA: false,
  bonusendloopA: false,
  colBck: "#121212",
  col0: "#919191",
  col1: "#5f5f5f",
  col2: "#4b4b4b",
  col3: "#373737",
  col4: "#232323",
  animearray: [{
    name: "1_lead",
    color: "828282",
    uniqsnd: true
  }, {
    name: "2_deux",
    color: "828282",
    uniqsnd: true
  }, {
    name: "3_kosh",
    color: "828282",
    uniqsnd: true
  }, {
    name: "4_shpok",
    color: "828282",
    uniqsnd: true
  }, {
    name: "5_tom",
    color: "828282",
    uniqsnd: true
  }, {
    name: "6_nouana",
    color: "828282",
    uniqsnd: true
  }, {
    name: "7_scratch",
    color: "828282",
    uniqsnd: true
  }, {
    name: "8_trill",
    color: "828282",
    uniqsnd: true
  }, {
    name: "9_bass",
    color: "828282",
    uniqsnd: true
  }, {
    name: "10_uh",
    color: "828282",
    uniqsnd: true
  }, {
    name: "11_nugu",
    color: "828282",
    uniqsnd: true
  }, {
    name: "12_guit",
    color: "828282",
    uniqsnd: true
  }, {
    name: "13_tromp",
    color: "828282",
    uniqsnd: true
  }, {
    name: "14_pouin",
    color: "828282",
    uniqsnd: true
  }, {
    name: "15_tung",
    color: "828282",
    uniqsnd: true
  }, {
    name: "16_aoun",
    color: "828282",
    uniqsnd: true
  }, {
    name: "17_hum",
    color: "828282",
    uniqsnd: true
  }, {
    name: "18_get",
    color: "828282",
    uniqsnd: true
  }, {
    name: "19_tellme",
    color: "828282",
    uniqsnd: true
  }, {
    name: "20_make",
    color: "828282",
    uniqsnd: true
  }],
  bonusarray: [{
    name: "Choir",
    src: "v1-b1-choir-hb",
    code: "2,4,8,11,15",
    sound: "bonus-choir",
    loop: 2
  }, {
    name: "Sailor",
    src: "v1-b2-sailor-hb",
    code: "10,11,14,15,20",
    sound: "bonus-sailor",
    aspire: "aspire-sailor",
    loop: 2
  }, {
    name: "Santa",
    src: "v1-b3-santa-hb",
    code: "1,9,13,14,16",
    sound: "bonus-santa",
    aspire: "aspire-santa",
    loop: 2
  }]
};
versions.v2 = {
  // LITTLE MISS
  name: "Little Miss",
  version: "2",
  date: "2012",
  folder: "asset-v2/",
  looptime: 4800,
  bpm: 100,
  totalframe: 232,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: true,
  colBck: "#1c0d0d",
  col0: "#EB4B4B",
  col1: "#C32D2D",
  col2: "#9B2323",
  col3: "#691E1E",
  col4: "#371919",
  animearray: [{
    name: "beat1_boom",
    color: "828282",
    uniqsnd: false
  }, {
    name: "beat2_kashi",
    color: "828282",
    uniqsnd: false
  }, {
    name: "beat3_paomeu",
    color: "828282",
    uniqsnd: true
  }, {
    name: "beat4_ptttpeu",
    color: "828282",
    uniqsnd: false
  }, {
    name: "beat5_slupttt",
    color: "828282",
    uniqsnd: true
  }, {
    name: "effet1_poulll",
    color: "828282",
    uniqsnd: false
  }, {
    name: "effet2_tucati",
    color: "828282",
    uniqsnd: true
  }, {
    name: "effet3_tuilopta",
    color: "828282",
    uniqsnd: false
  }, {
    name: "effet4_tululou",
    color: "828282",
    uniqsnd: true
  }, {
    name: "effet5_tumttt",
    color: "828282",
    uniqsnd: false
  }, {
    name: "melo1_nananana",
    color: "828282",
    uniqsnd: false
  }, {
    name: "melo2_pelulu",
    color: "828282",
    uniqsnd: false
  }, {
    name: "melo3_siffle",
    color: "828282",
    uniqsnd: false
  }, {
    name: "melo4_tatouti",
    color: "828282",
    uniqsnd: false
  }, {
    name: "melo5_tvutvutvu",
    color: "828282",
    uniqsnd: false
  }, {
    name: "coeur1_oaaah",
    color: "828282",
    uniqsnd: false
  }, {
    name: "coeur2_cougou",
    color: "828282",
    uniqsnd: false
  }, {
    name: "coeur3_porticoeur",
    color: "828282",
    uniqsnd: false
  }, {
    name: "voix1_isit",
    color: "828282",
    uniqsnd: false
  }, {
    name: "voix2_uare",
    color: "828282",
    uniqsnd: false
  }],
  bonusarray: [{
    name: "Satisfied",
    src: "v2-b1-satisfy-hb",
    code: "1,4,6,9,12",
    sound: "bonus-satisfy",
    aspire: "aspire",
    loop: 4
  }, {
    name: "Little Miss",
    src: "v2-b2-miss-hb",
    code: "5,6,7,13,15",
    sound: "bonus-miss",
    aspire: "aspire",
    loop: 4
  }, {
    name: "Why this world",
    src: "v2-b3-world-hb",
    code: "6,8,9,14,18",
    sound: "bonus-world",
    aspire: "aspire",
    loop: 4
  }]
};
versions.v3 = {
  // SUNRISE
  name: "Sunrise",
  version: "3",
  date: "2013",
  folder: "asset-v3/",
  looptime: 8000,
  bpm: 120,
  totalframe: 384,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: true,
  colBck: "#01141A",
  col0: "#6E96A0",
  col1: "#3C646E",
  col2: "#28505A",
  col3: "#143C46",
  col4: "#002832",
  animearray: [{
    name: "drum1_ballet",
    color: "1EB482",
    uniqsnd: true
  }, {
    name: "drum2_kick",
    color: "1EB482",
    uniqsnd: true
  }, {
    name: "drum3_snare",
    color: "1EB482",
    uniqsnd: true
  }, {
    name: "drum4_lead",
    color: "1EB482",
    uniqsnd: true
  }, {
    name: "drum5_charley",
    color: "1EB482",
    uniqsnd: true
  }, {
    name: "effet1_long",
    color: "50B4E6",
    uniqsnd: false
  }, {
    name: "effet2_daft1",
    color: "50B4E6",
    uniqsnd: true
  }, {
    name: "effet3_tududu",
    color: "50B4E6",
    uniqsnd: true
  }, {
    name: "effet4_daft2",
    color: "50B4E6",
    uniqsnd: true
  }, {
    name: "effet5_rythme",
    color: "50B4E6",
    uniqsnd: false
  }, {
    name: "melo1_tuu",
    color: "FA5050",
    uniqsnd: true
  }, {
    name: "melo2_indien",
    color: "FA5050",
    uniqsnd: true
  }, {
    name: "melo3_armo",
    color: "FA5050",
    uniqsnd: true
  }, {
    name: "melo4_clav",
    color: "FA5050",
    uniqsnd: false
  }, {
    name: "melo5_siffle",
    color: "FA5050",
    uniqsnd: true
  }, {
    name: "voix1_waya",
    color: "E6C832",
    uniqsnd: true
  }, {
    name: "voix2_ride",
    color: "E6C832",
    uniqsnd: false
  }, {
    name: "voix3_over",
    color: "E6C832",
    uniqsnd: false
  }, {
    name: "voix4_colors",
    color: "E6C832",
    uniqsnd: true
  }, {
    name: "voix5_sunrise",
    color: "E6C832",
    uniqsnd: false
  }],
  bonusarray: [{
    name: "Lill Child",
    src: "v3-b1-child-hb",
    code: "2,4,9,14,16",
    sound: "bonus-child",
    aspire: "aspire",
    loop: 4
  }, {
    name: "Dance",
    src: "v3-b2-dance-hb",
    code: "2,3,5,6,14",
    sound: "bonus-dance",
    aspire: "aspire",
    loop: 4
  }, {
    name: "Sunrise",
    src: "v3-b3-sunrise-hb",
    code: "6,11,13,16,18",
    sound: "bonus-sunrise",
    aspire: "aspire",
    loop: 4
  }]
};
versions.v4 = {
  // THE LOVE
  name: "The Love",
  version: "4",
  date: "2014",
  folder: "asset-v4/",
  looptime: 8000,
  bpm: 120,
  totalframe: 384,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: false,
  colBck: "#201200",
  col0: "#D8A365",
  col1: "#BA7B3D",
  col2: "#A16224",
  col3: "#6A3501",
  col4: "#422101",
  animearray: [{
    name: "drum1_kick",
    color: "E5A90E",
    uniqsnd: false
  }, {
    name: "drum2_snare",
    color: "E5A90E",
    uniqsnd: false
  }, {
    name: "drum3_touti",
    color: "E5A90E",
    uniqsnd: true
  }, {
    name: "drum4_charley",
    color: "E5A90E",
    uniqsnd: true
  }, {
    name: "drum5_chatom",
    color: "E5A90E",
    uniqsnd: false
  }, {
    name: "effect1_bass",
    color: "0CB6CB",
    uniqsnd: false
  }, {
    name: "effect2_enigmatic",
    color: "0CB6CB",
    uniqsnd: true
  }, {
    name: "effect3_cry",
    color: "0CB6CB",
    uniqsnd: true
  }, {
    name: "effect4_odoyouno",
    color: "0CB6CB",
    uniqsnd: true
  }, {
    name: "effect5_oua",
    color: "0CB6CB",
    uniqsnd: true
  }, {
    name: "melo1_toun",
    color: "F42828",
    uniqsnd: false
  }, {
    name: "melo2_flute",
    color: "F42828",
    uniqsnd: false
  }, {
    name: "melo3_neou",
    color: "F42828",
    uniqsnd: false
  }, {
    name: "melo4_hu",
    color: "F42828",
    uniqsnd: true
  }, {
    name: "melo5_ah",
    color: "F42828",
    uniqsnd: true
  }, {
    name: "chips1_feel",
    color: "787DFF",
    uniqsnd: false
  }, {
    name: "chips2_chillin",
    color: "787DFF",
    uniqsnd: true
  }, {
    name: "chips3_yeah",
    color: "787DFF",
    uniqsnd: true
  }, {
    name: "chips4_filback",
    color: "787DFF",
    uniqsnd: false
  }, {
    name: "chips5_teylo",
    color: "787DFF",
    uniqsnd: true
  }],
  bonusarray: [{
    name: "Baby",
    src: "v4-b1-love-hb",
    code: "1,2,6,11,17",
    sound: "bonus-love",
    aspire: "aspire",
    loop: 1
  }, {
    name: "Follow",
    src: "v4-b2-follow-hb",
    code: "1,6,8,12,18",
    sound: "bonus-follow",
    aspire: "aspire",
    loop: 1
  }, {
    name: "Eagle",
    src: "v4-b3-eagle-hb",
    code: "1,3,6,13,16",
    sound: "bonus-eagle",
    aspire: "aspire",
    loop: 1
  }]
};
versions.v5 = {
  // BRAZIL
  name: "Brazil",
  version: "5",
  date: "2016",
  folder: "asset-v5/",
  looptime: 8000,
  bpm: 120,
  totalframe: 384,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: false,
  colBck: "#0A1910",
  col0: "#6EB950",
  col1: "#41A032",
  col2: "#2D7D28",
  col3: "#235023",
  col4: "#14321E",
  animearray: [{
    name: "1_poum",
    color: "FAB405",
    uniqsnd: true
  }, {
    name: "2_creuki",
    color: "FAB405",
    uniqsnd: true
  }, {
    name: "3_shaka",
    color: "FAB405",
    uniqsnd: true
  }, {
    name: "4_chouk",
    color: "FAB405",
    uniqsnd: true
  }, {
    name: "5_kaliak",
    color: "FAB405",
    uniqsnd: true
  }, {
    name: "6_tek",
    color: "23BEE1",
    uniqsnd: true
  }, {
    name: "7_tuk",
    color: "23BEE1",
    uniqsnd: true
  }, {
    name: "8_teung",
    color: "23BEE1",
    uniqsnd: true
  }, {
    name: "9_ting",
    color: "23BEE1",
    uniqsnd: true
  }, {
    name: "10_kougou",
    color: "23BEE1",
    uniqsnd: true
  }, {
    name: "11_parimba",
    color: "64B92D",
    uniqsnd: true
  }, {
    name: "12_coloko",
    color: "64B92D",
    uniqsnd: true
  }, {
    name: "13_clav",
    color: "64B92D",
    uniqsnd: true
  }, {
    name: "14_tromp",
    color: "64B92D",
    uniqsnd: true
  }, {
    name: "15_trompolo",
    color: "64B92D",
    uniqsnd: true
  }, {
    name: "16_bass",
    color: "E63C14",
    uniqsnd: true
  }, {
    name: "17_wa",
    color: "E63C14",
    uniqsnd: true
  }, {
    name: "18_ya",
    color: "E63C14",
    uniqsnd: true
  }, {
    name: "19_palapa",
    color: "E63C14",
    uniqsnd: true
  }, {
    name: "20_oh",
    color: "E63C14",
    uniqsnd: true
  }],
  bonusarray: [{
    name: "Felicidade",
    src: "v5-b1-felicidade-hb",
    code: "1,3,6,10,16",
    sound: "bonus-felicidade",
    loop: 1
  }, {
    name: "Chegou",
    src: "v5-b2-chegou-hb",
    code: "1,4,9,13,17",
    sound: "bonus-chegou",
    loop: 1
  }, {
    name: "Musica",
    src: "v5-b3-musica-hb",
    code: "1,5,7,14,19",
    sound: "bonus-musica",
    loop: 1
  }]
};
versions.v6 = {
  // ALIVE
  name: "Alive",
  version: "6",
  date: "2018",
  folder: "asset-v6/",
  looptime: 7111,
  bpm: 135,
  totalframe: 342,
  nbpolo: 7,
  bonusloopA: false,
  bonusendloopA: false,
  colBck: "#110521",
  col0: "#A07DFA",
  col1: "#825FD2",
  col2: "#5F3CA0",
  col3: "#371464",
  col4: "#230A41",
  animearray: [{
    name: "1_kick",
    color: "1e96be",
    uniqsnd: true
  }, {
    name: "2_snare",
    color: "1e96be",
    uniqsnd: true
  }, {
    name: "3_kanye",
    color: "1e96be",
    uniqsnd: true
  }, {
    name: "4_tuctuc",
    color: "1e96be",
    uniqsnd: true
  }, {
    name: "5_break",
    color: "1e96be",
    uniqsnd: true
  }, {
    name: "6_cribasse",
    color: "825fd2",
    uniqsnd: true
  }, {
    name: "7_distotut",
    color: "825fd2",
    uniqsnd: true
  }, {
    name: "8_screw",
    color: "825fd2",
    uniqsnd: true
  }, {
    name: "9_shaolin",
    color: "825fd2",
    uniqsnd: true
  }, {
    name: "10_shower",
    color: "825fd2",
    uniqsnd: true
  }, {
    name: "11_basse",
    color: "e11419",
    uniqsnd: true
  }, {
    name: "12_hou",
    color: "e11419",
    uniqsnd: true
  }, {
    name: "13_clav",
    color: "e11419",
    uniqsnd: true
  }, {
    name: "14_synth",
    color: "e11419",
    uniqsnd: true
  }, {
    name: "15_yah",
    color: "e11419",
    uniqsnd: true
  }, {
    name: "16_hurry",
    color: "f06400",
    uniqsnd: true
  }, {
    name: "17_good",
    color: "f06400",
    uniqsnd: true
  }, {
    name: "18_mind",
    color: "f06400",
    uniqsnd: true
  }, {
    name: "19_haha",
    color: "f06400",
    uniqsnd: true
  }, {
    name: "20_wow",
    color: "f06400",
    uniqsnd: true
  }],
  bonusarray: [{
    name: "Alive",
    src: "v6-b1-alive-hb",
    code: "4,6,9,14,18",
    sound: "bonus-alive",
    loop: 3
  }, {
    name: "Busta",
    src: "v6-b2-busta-hb",
    code: "1,2,8,11,16",
    sound: "bonus-busta",
    aspire: "aspire-busta",
    loop: 3
  }, {
    name: "VR",
    src: "v6-b3-vr-hb",
    code: "3,8,11,12,20",
    sound: "bonus-vr",
    aspire: "aspire-vr",
    loop: 3
  }]
};
versions.v7 = {
  // JEEVAN
  name: "Jeevan",
  version: "7",
  date: "2019",
  folder: "asset-v7/",
  looptime: 6857,
  bpm: 140,
  totalframe: 342,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: true,
  colBck: "#2B0F02",
  col0: "#FE6E23",
  col1: "#D65A1E",
  col2: "#AE4619",
  col3: "#863214",
  col4: "#551E05",
  animearray: [{
    name: "1_lead",
    color: "ff6419",
    uniqsnd: true
  }, {
    name: "2_pouin",
    color: "ff6419",
    uniqsnd: false
  }, {
    name: "3_tung",
    color: "ff6419",
    uniqsnd: true
  }, {
    name: "4_tabla",
    color: "ff6419",
    uniqsnd: true
  }, {
    name: "5_tuduki",
    color: "ff6419",
    uniqsnd: true
  }, {
    name: "6_bass",
    color: "e11923",
    uniqsnd: false
  }, {
    name: "7_bourdon",
    color: "e11923",
    uniqsnd: true
  }, {
    name: "8_campan",
    color: "e11923",
    uniqsnd: true
  }, {
    name: "9_kum",
    color: "e11923",
    uniqsnd: false
  }, {
    name: "10_string",
    color: "e11923",
    uniqsnd: false
  }, {
    name: "11_citar",
    color: "328cd2",
    uniqsnd: true
  }, {
    name: "12_guit",
    color: "328cd2",
    uniqsnd: true
  }, {
    name: "13_tromp",
    color: "328cd2",
    uniqsnd: false
  }, {
    name: "14_taoung",
    color: "328cd2",
    uniqsnd: true
  }, {
    name: "15_sifle",
    color: "328cd2",
    uniqsnd: false
  }, {
    name: "16_djindr",
    color: "32b441",
    uniqsnd: true
  }, {
    name: "17_djinga",
    color: "32b441",
    uniqsnd: true
  }, {
    name: "18_djinta",
    color: "32b441",
    uniqsnd: true
  }, {
    name: "19_jeevan",
    color: "32b441",
    uniqsnd: false
  }, {
    name: "20_yaha",
    color: "32b441",
    uniqsnd: false
  }],
  bonusarray: [{
    name: "Kofitez",
    src: "v7-b1-kofitez-hb",
    code: "1,2,4,16,17",
    sound: "bonus_kofitez",
    loop: 3
  }, {
    name: "Sapna",
    src: "v7-b2-sapna-hb",
    code: "1,3,6,14,15",
    sound: "bonus_sapna",
    aspire: "aspire_sapna",
    loop: 3
  }, {
    name: "Kabikabi",
    src: "v7-b3-kabikabi-hb",
    code: "7,8,10,11,19",
    sound: "bonus_kabikabi",
    loop: 3
  }]
};
versions.v8 = {
  // DYSTOPIA
  name: "Dystopia",
  version: "8",
  date: "2020",
  folder: "asset-v8/",
  looptime: 6857,
  bpm: 140,
  totalframe: 328,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: false,
  colBck: "#0F1918",
  col0: "#779295",
  col1: "#5F7E7B",
  col2: "#476761",
  col3: "#304D47",
  col4: "#1B312F",
  animearray: [{
    name: "1_atlanta",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "2_tuctom",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "3_foubreak",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "4_koukaki",
    color: "5f7e7b",
    uniqsnd: true
  }, {
    name: "5_koungou",
    color: "5f7e7b",
    uniqsnd: true
  }, {
    name: "6_bass",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "7_monk",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "8_sonar",
    color: "5f7e7b",
    uniqsnd: true
  }, {
    name: "9_souffle",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "10_epifle",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "11_arpeg",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "12_tromp",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "13_pizzi",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "14_organ",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "15_synth",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "16_follow",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "17_choir",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "18_houhou",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "19_reach",
    color: "5f7e7b",
    uniqsnd: false
  }, {
    name: "20_believe",
    color: "5f7e7b",
    uniqsnd: false
  }],
  bonusarray: [{
    name: "Riveria",
    src: "v8-b1-riviera-hb",
    code: "1,6,7,11,19",
    sound: "21_bonus_riviera",
    loop: 6
  }, {
    name: "Zemetekile",
    src: "v8-b2-zemetekile-hb",
    code: "1,2,3,4,10",
    sound: "22_bonus_zemetekile",
    loop: 6
  }, {
    name: "Cumulor",
    src: "v8-b3-cumulor-hb",
    code: "4,5,14,16,18",
    sound: "23_bonus_cumulor",
    loop: 6
  }]
};
var preventActionUsed = !(versions.v9 = {
  // WEKIDDY
  name: "Wekiddy",
  version: "9",
  date: "2023",
  folder: "asset-v9/",
  looptime: 5053,
  bpm: 95,
  totalframe: 242,
  nbpolo: 7,
  bonusloopA: true,
  bonusendloopA: false,
  colBck: "#00102B",
  col0: "#008EFF",
  col1: "#005CFA",
  col2: "#0048C3",
  col3: "#00348C",
  col4: "#002055",
  animearray: [{
    name: "01_boo_9",
    color: "9448ff",
    uniqsnd: false
  }, {
    name: "02_kevin",
    color: "fa340f",
    uniqsnd: false
  }, {
    name: "03_double_k",
    color: "19d428",
    uniqsnd: false
  }, {
    name: "04_blue_gt",
    color: "2c86fe",
    uniqsnd: true
  }, {
    name: "05_mj_182",
    color: "19d428",
    uniqsnd: true
  }, {
    name: "06_boom_fuzz",
    color: "2c86fe",
    uniqsnd: false
  }, {
    name: "07_asap_bee",
    color: "19d428",
    uniqsnd: false
  }, {
    "name": "08_m_o_g",
    color: "ffca06",
    uniqsnd: false
  }, {
    name: "09_arashi",
    color: "2c86fe",
    uniqsnd: false
  }, {
    name: "10_big_duke",
    color: "fa340f",
    uniqsnd: false
  }, {
    name: "11_swingy",
    color: "2c86fe",
    uniqsnd: false
  }, {
    name: "12_d_invaders",
    color: "19d428",
    uniqsnd: false
  }, {
    name: "13_doo_doo",
    color: "2c86fe",
    uniqsnd: true
  }, {
    name: "14_8_bit",
    color: "19d428",
    uniqsnd: false
  }, {
    name: "15_kc_glow",
    color: "9448ff",
    uniqsnd: false
  }, {
    name: "16_el_cool_p",
    color: "fa340f",
    uniqsnd: false
  }, {
    name: "17_memphis",
    color: "2c86fe",
    uniqsnd: false
  }, {
    name: "18_jogg_d",
    color: "ffca06",
    uniqsnd: false
  }, {
    name: "19_scooter",
    color: "19d428",
    uniqsnd: false
  }, {
    name: "20_lil_blaze",
    color: "2c86fe",
    uniqsnd: false
  }],
  bonusarray: [{
    name: "Flow",
    src: "v9-b1-flow-hb",
    code: "1,2,5,8,17",
    sound: "21_bonus_flow",
    aspire: "aspire_flow",
    loop: 2
  }, {
    name: "URFO",
    src: "v9-b2-urfo-hb",
    code: "1,2,3,16,20",
    sound: "22_bonus_urfo",
    aspire: "aspire_urfo",
    loop: 4
  }
  //      { // no bonus 3 yet
  //        name: gE(0x913),
  //        src: "\x76\x39\x2d\x62\x32\x2d\x75\x72\x66\x6f\x2d\x68\x62",
  //        code: "1,4,7,10,12", // official b3 code i think?
  //        sound: gE(0x371),
  //        aspire: "\x61\x73\x70\x69\x72\x65\x5f\x75\x72\x66\x6f",
  //        loop: 0x4,
  //      },
  ]
});

function preventAction(g) {
  if (!preventActionUsed) {
    preventActionUsed = true;
    g();
    setTimeout(function () {
      preventActionUsed = false;
    }, 0.25);
  }
}
function tryfunc(g) {
  if (null != g && "undefined" !== g && "function" === (typeof g).toLowerCase()) {
    g();
  }
}
function inIframe() {
  try {
    return window.self !== window.top;
  } catch (g) {
    return true;
  }
}
function callParentWindow(g, h) {
  if (isIframe) {
    if (null != window.top && "undefined" !== window.top && null != window.top.appEvent && "undefined" !== window.top.appEvent) {
      window.top.appEvent(g, h);
    } else {
      setTimeout(function () {
        callParentWindow(g, h);
      }, 0xc8);
    }
  }
}
var regexList = {
  "allchar": /[*]/,
  "classic": /[^A-Za-z0-9\u00C0-\u017F '-]/,
  "search": /[^A-Za-z0-9\u00C0-\u017F\u0025 '-]/,
  "max3letters": /[*]|(.)(?=\1\1\1)/gi,
  "strict": /[^A-Za-z0-9 '-]/,
  "custom": /[^A-Za-z0-9àâçèéêîôùûÀÂÇÈÉÊÎÔÙÛ '-]/,
  "email": /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  "allsafe": /[^A-Za-z0-9\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\s]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/
};
function removeDupInArray(g, h) {
  var i;
  var j = [];
  for (i of g) if (!existInArray(j, i, h)) {
    j.push(i);
  }
  return j;
}
function uniqueBetweenArray(g, h, j) {
  var k;
  var l = [];
  for (k of g) if (!existInArray(h, k, j)) {
    l.push(k);
  }
  for (k of h) if (!existInArray(g, k, j)) {
    l.push(k);
  }
  return l;
}
function existInArray(g, h, j) {
  var k = !(null != j && "undefined" !== j) || j;
  var l = false;
  var m = 0x0;
  for (var p = g.length; m < p; m++) {
    if (k) {
      if (g[m] === h) {
        l = true;
        break;
      }
    } else {
      if (g[m].toLowerCase() === h.toLowerCase()) {
        l = true;
        break;
      }
    }
  }
  return l;
}
function removeInArray(g, h) {
  var i = 0x0;
  for (var j = h.length; i < j; i++) {
    if (h[i] === g) {
      h.splice(i, 0x1);
      break;
    }
  }
  return h;
}
function existInArrayFromProp(g, h, j) {
  var k = 0x0;
  for (var l = j.length; k < l; k++) {
    if (j[k][h] === g) {
      return true;
    }
  }
  return false;
}
function numberArray(g) {
  var i = 0x0;
  for (var j = g.length; i < j; i++) {
    g[i] = 0x0 | g[i];
  }
  return g;
}
function xhr(g, h, j, k, l) {
  $.ajax({
    "type": g,
    "url": h,
    "crossdomain": true,
    "data": j,
    "success": function (m) {
      k(m, j);
    },
    "error": l || function () {},
    "dataType": "json"
  });
}
function renameFile(g) {
  return 0x1 == animSize ? g : nameToHD(g);
}
function nameToHD(g) {
  var h = g.substr(g.lastIndexOf("."));
  return g.split(h).join("-hd" + h);
}
function loadSnd(g, h, j, k) {
  var l = new XMLHttpRequest();
  l.open("GET", g, true);
  l.responseType = "arraybuffer";
  l.onload = function () {
    h.decodeAudioData(l.response, function (p) {
      j(p);
    }, function (p) {
      k();
    });
  };
  l.onerror = function () {
    k();
  };
  l.send();
}
function gotoAppUrl(g) {
  g = null == g || "undefined" === g ? appBrowser ? "" : "index.html" : g;
  window.location.href = g;
}
function reloadPage() {
  (appBrowser ? window.top : window).location.reload();
}
function openURL(g, h) {
  var j = isIframe ? window.top : window;
  var h = null == h || "undefined" === h ? "_blank" : h;
  var h = appBrowserDemo && isIOS ? "_self" : h;
  if (window.electron) {
    electron.ipc.openURL(g);
  } else if (window.cordova) {
    cordova.InAppBrowser.open(g, "_system", "hidden=yes,location=no");
  } else {
    j.open(g, h);
  }
}
function redirectTo(g) {
  var i = "https://www.incredibox.com/url/" + g;
  var i = i;
  openURL(i = window.cordova ? {
    "facebook": "https://www.facebook.com/incredibox",
    "twitter": "https://twitter.com/incredibox_",
    "instagram": "https://www.instagram.com/incredibox.official/",
    "youtube": "https://www.youtube.com/incredibox"
  }[g] || i : i);
}
function windowPopup(g, h, j, k) {
  var m = k ? screen.height / 0x2 - j / 0x2 : 0x0;
  var k = k ? screen.width / 0x2 - h / 0x2 : 0x0;
  window.open(g, "", "menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=" + h + ",height=" + j + ",top=" + m + ",left=" + k);
}
function getParameterByName(g) {
  var h = {};
  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (j, k, l) {
    h[k] = l;
  });
  var i = null;
  return i = g in h ? h[g] : i;
}
function getPageNameGA() {
  return -0x1 != window.location.href.indexOf("app.html") ? "app.html?v=" + getParameterByName("v") : "index.html";
}
function secToText(g) {
  var i;
  var j = parseInt(g / 0x3e8 % 0x3c);
  var k = parseInt(g / 0xea60 % 0x3c);
  i = parseInt(g / 0x36ee80 % 0x18);
  return (k < 0xa ? "0" + k : k) + ":" + (j < 0xa ? "0" + j : j);
}
function getTime() {
  return new Date().getTime();
}
function getTimeAgo(g, h) {
  g = -0x1 == g.indexOf("/") ? g.split("-").join("/") : g;
  h = -0x1 == h.indexOf("/") ? h.split("-").join("/") : h;
  var j = new Date(g);
  var h = timeConversion(new Date(h).getTime() - j.getTime());
  return false === h ? getStringDate(g) : h;
}
function timeConversion(g) {
  var j = (g / 0x3e8).toFixed(0x1);
  var k = (g / 0xea60).toFixed(0x1);
  var l = (g / 0x36ee80).toFixed(0x1);
  var g = (g / 0x5265c00).toFixed(0x1);
  var m = "";
  if (j < 0x3c) {
    j = Math.round(j);
    m = j.toString() + " " + (j < 0x2 && null != STR("txt.time.tSec.one") && "undefined" !== STR("txt.time.tSec.one") ? STR("txt.time.tSec.one") : STR("txt.time.tSec.other"));
  } else {
    if (k < 0x3c) {
      j = Math.round(k);
      m = j.toString() + " " + (j < 0x2 && null != STR("txt.time.tMin.one") && "undefined" !== STR("txt.time.tMin.one") ? STR("txt.time.tMin.one") : STR("txt.time.tMin.other"));
    } else {
      if (l < 0x17) {
        k = Math.round(l);
        m = k.toString() + " " + (k < 0x2 && null != STR("txt.time.tHou.one") && "undefined" !== STR("txt.time.tHou.one") ? STR("txt.time.tHou.one") : STR("txt.time.tHou.other"));
      } else {
        if (!(g < 0xa)) {
          return false;
        }
        j = Math.round(g);
        m = j.toString() + " " + (j < 0x2 && null != STR("txt.time.tDay.one") && "undefined" !== STR("txt.time.tDay.one") ? STR("txt.time.tDay.one") : STR("txt.time.tDay.other"));
      }
    }
  }
  return STR("txt.ago").split("%{date_time}").join(m);
}
function getDateNow() {
  var h = new Date();
  var j = h.getDate();
  var k = h.getMonth() + 0x1;
  var l = h.getFullYear();
  var m = h.getHours();
  var p = h.getMinutes();
  var h = h.getSeconds();
  var j = j < 0xa ? String("0" + j) : String(j);
  var k = k < 0xa ? String("0" + k) : String(k);
  var m = m < 0xa ? String("0" + m) : String(m);
  var p = p < 0xa ? String("0" + p) : String(p);
  var h = h < 0xa ? String("0" + h) : String(h);
  return String(l + "-" + k + "-" + j + " " + m + ":" + p + ":" + h);
}
function jsonDecode(g) {
  return null == g || "undefined" === g ? null : (g = g.split("\t").join("").split("\n").join(""), JSON.parse(g));
}
function jsonEncode(g) {
  return null == g || "undefined" === g ? null : JSON.stringify(g);
}
function random(g) {
  return Math.round(Math.random() * g);
}
function randomRangeInt(g, h) {
  g = Math.ceil(g);
  h = Math.floor(h);
  return Math.floor(Math.random() * (h - g + 0x1)) + g;
}
function decimal(g, h) {
  h = null == h || "undefined" === h ? 0x2 : h;
  h = Math.pow(0xa, h);
  return Math.round(g * h) / h;
}
function numberSpaced(g) {
  var h;
  return g ? (g = g.toString(), h = g.indexOf("."), g.replace(/\d(?=(?:\d{3})+(?:\.|$))/g, function (i, j) {
    return h < 0x0 || j < h ? i + " " : i;
  })) : 0x0;
}
function trim(g) {
  return null == g || "undefined" === g ? "" : (g = (g = (g = g.split("\t").join("")).split("\n").join("")).split("\r").join("")).replace(/^\s+|\s+$|\s+(?=\s)/g, "");
}
function cleanInputText(g) {
  return g = (g = trim(g = ucwords(g))).replace(/[*]|(.)(?=\1\1\1)/gi, "");
}
function slugify(g) {
  return g.toString().toLowerCase().replace(/\s+/g, "-").replace(/&/g, "-and-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "");
}
function ucwords(g) {
  return (g = g.toLowerCase()).charAt(0x0).toUpperCase() + g.slice(0x1);
}
function uniqid(g) {
  g = g || "";
  return Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10).substring(0x1) + g + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10).substring(0x1) + g + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10).substring(0x1) + g + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10).substring(0x1) + g + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10).substring(0x1);
}
function uniqid30() {
  return Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10) + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10) + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10) + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10) + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10) + Math.floor(0x10000 * (0x1 + Math.random())).toString(0x10);
}
function getUniqLink(g) {
  g = null != g && "undefined" !== g ? g.app : app.version;
  return uniqid() + "-v" + g;
}
function isnull(g) {
  return null == g || "undefined" === g;
}
function notnull(g) {
  return null != g && "undefined" !== g;
}
function copyToClipboard(g) {
  var i = document.createElement("textarea");
  i.value = g;
  i.setAttribute("readonly", "");
  i.style = {
    "position": "absolute",
    "visibility": "hidden",
    "pointerEvents": "none"
  };
  document.body.appendChild(i);
  i.select();
  document.execCommand("copy");
  document.body.removeChild(i);
}
function resetAnimationCSS(g) {
  g.style.animation = "none";
  g.offsetHeight;
  g.style.animation = null;
}
function transitionEndEventName() {
  var g;
  var h = document.createElement("div");
  var i = {
    "transition": "transitionend",
    "OTransition": "oTransitionEnd",
    "MozTransition": "transitionend",
    "WebkitTransition": "webkitTransitionEnd"
  };
  for (g in i) if (i.hasOwnProperty(g) && undefined !== h.style[g]) {
    return i[g];
  }
  return null;
}
function animationEndEventName() {
  var g;
  var h = document.createElement("div");
  var i = {
    "animation": "animationend",
    "OAnimation": "oanimationend",
    "MozAnimation": "animationend",
    "WebkitAnimation": "webkitAnimationEnd"
  };
  for (g in i) if (i.hasOwnProperty(g) && undefined !== h.style[g]) {
    return i[g];
  }
  return null;
}
function addTransition(g, h, j, k, l) {
  l = !!(null != l && "undefined" !== l) && l;
  g.off(transitionEnd).addClass(h).on(transitionEnd, {
    "div": g,
    "prop": j,
    "func": k,
    "log": l
  }, transitionComplete);
}
function removeTransition(g, h, j, k, l) {
  l = !!(null != l && "undefined" !== l) && l;
  g.off(transitionEnd).removeClass(h).on(transitionEnd, {
    "div": g,
    "prop": j,
    "func": k,
    "log": l
  }, transitionComplete);
}
function transitionComplete(g) {
  if (null != g.data && "undefined" !== g.data && null != g.data.func && "undefined" !== g.data.func && g.originalEvent.propertyName.replace("-webkit-", "") == g.data.prop && g.data.div.attr("id") == g.target.id) {
    if (null != g.data.log) {
      "undefined" !== g.data.log;
    }
    g.data.div.off(transitionEnd);
    g.data.func();
  }
}
function stopProp(g) {
  if (null != g && "undefined" !== g) {
    g.stopPropagation();
  }
}
String.prototype.replaceAt = function (g, h) {
  return this.substr(0x0, g) + h + this.substr(g + h.length);
};
var drawMinTopY;
var drawMaxTopY;
var drawMaxRandPosY;
var drawMaxBounceY;
var drawPoloW;
var drawPoloH;
var drawEyeW;
var drawEyeH;
var drawAnimW;
var drawAnimH;
var drawEyeY;
var drawPupW;
var drawPup1X;
var drawPup1Y;
var drawPup2X;
var drawPup2Y;
var drawMaxPupMove;
var cropPoloW;
var cropPoloH;
var cropAnimW;
var cropAnimH;
var cropEyeW;
var cropEyeH;
var cropEyeX;
var cropEyeY;
var cropEyelidX;
var cropEyelid1Y;
var cropEyelid2Y;
var cropEyelid3Y;
var cropEyelid4Y;
var cropPupY;
var cropPupW;
var canvasBound;
var canvasScale;
var poloRatio;
var poloBlocW;
var poloOverlapW;
var poloBlocX;
var sizes = {
  "polo": {
    "sprWidth": 0xa4,
    "sprHeight": 0x190,
    "overlapW": 0x1e,
    "minTopY": 0xa,
    "maxTopY": 0x17c,
    "maxRandomY": 0x1e,
    "maxBounceY": 0x19,
    "sprAnimW": 0xa4,
    "sprAnimH": 0x17c,
    "eyesTopY": 0x61,
    "sprEyesW": 0xa4,
    "sprEyesH": 0x28,
    "sprEyesX": 0x1ec,
    "sprEyesY": 0x0,
    "sprEyelidX": 0x148,
    "sprEyelid1Y": 0x0,
    "sprEyelid2Y": 0x28,
    "sprEyelid3Y": 0x50,
    "sprEyelid4Y": 0x78,
    "sprPupY": 0x1c2,
    "sprPupW": 0x10,
    "pup1X": 0x36,
    "pup1Y": 0x6e,
    "pup2X": 0x5f,
    "pup2Y": 0x6e,
    "maxPupMove": 0x7
  },
  "canvas": {
    "baseW": 0x404,
    "baseH": 0x17c,
    "marge": 0x32,
    "maxOverflow": 0x14
  },
  "video": {
    "baseW": 0x3e8,
    "baseH": 0x190
  }
};
var bottomNeedSlide = false;
function getViewport() {
  var g = document.body.clientWidth;
  var h = document.body.clientHeight;
  if (g < h) {
    g = document.body.clientHeight;
    h = document.body.clientWidth;
  }
  return {
    "w": g,
    "h": h
  };
}
function resizeApp() {
  var k;
  var q;
  var w;
  var x;
  var y;
  var z;
  var A;
  var B;
  var C;
  var D;
  var E;
  var F;
  var G;
  var H;
  var I;
  var J;
  var K;
  var L;
  var M;
  if (pageApp) {
    if (miniPlayer) {
      sizes.canvas.marge = 0xf;
    }
    cropPoloW = sizes.polo.sprWidth * animSize;
    cropPoloH = sizes.polo.sprHeight * animSize;
    cropAnimW = sizes.polo.sprAnimW * animSize;
    cropAnimH = sizes.polo.sprAnimH * animSize;
    cropEyeW = sizes.polo.sprEyesW * animSize;
    cropEyeH = sizes.polo.sprEyesH * animSize;
    cropEyeX = sizes.polo.sprEyesX * animSize;
    cropEyeY = sizes.polo.sprEyesY * animSize;
    cropEyelidX = sizes.polo.sprEyelidX * animSize;
    cropEyelid1Y = sizes.polo.sprEyelid1Y * animSize;
    cropEyelid2Y = sizes.polo.sprEyelid2Y * animSize;
    cropEyelid3Y = sizes.polo.sprEyelid3Y * animSize;
    cropEyelid4Y = sizes.polo.sprEyelid4Y * animSize;
    cropPupY = sizes.polo.sprPupY * animSize;
    cropPupW = sizes.polo.sprPupW * animSize;
    k = document.querySelector("#game");
    q = document.querySelector("#box-top");
    w = document.querySelector("#box-stage");
    x = w.querySelector("#cnv-stage");
    y = w.querySelector("#box-polo");
    z = document.querySelector("#box-loader-polo");
    A = document.querySelector("#box-video");
    B = document.querySelector("#box-picto");
    C = A.querySelectorAll(".video");
    D = sizes.canvas.baseW / sizes.canvas.baseH;
    G = sizes.video.baseW / sizes.video.baseH;
    M = hasHBI ? 0x19 : 0x0;
    window.onresize = function () {
      if (C) {
        if (k.clientWidth / k.clientHeight < 1.6) {
          bottomNeedSlide = false;
          L = w.clientHeight;
          if (document.body.classList.contains("bottomSlide")) {
            document.body.classList.remove("bottomSlide");
          }
        } else {
          bottomNeedSlide = !miniPlayer;
          L = k.clientHeight - q.clientHeight - q.clientHeight / 0x2;
        }
        if ((H = (I = L) * G) < k.clientWidth) {
          H = Math.ceil(k.clientWidth);
          I = Math.ceil(H / G);
        }
        J = Math.round((H - A.clientWidth) / 0x2);
        K = Math.round((I - L) / 0x2);
        C.forEach(N => {
          N.style.width = H + "px";
          N.style.height = I + "px";
          N.style.transform = "translate(" + -J + "px, " + -K + "px)";
        });
      }
      if (x) {
        F = w.clientHeight + sizes.canvas.maxOverflow;
        if ((E = F * D) > w.clientWidth - 0x2 * sizes.canvas.marge) {
          E = w.clientWidth - 0x2 * sizes.canvas.marge;
          F = E / D;
        }
        if (appBrowser && E > sizes.canvas.baseW) {
          E = sizes.canvas.baseW;
          F = E / D;
        }
        x.style.width = E + "px";
        x.style.height = F + "px";
        y.style.width = E + "px";
        y.style.height = F + "px";
        z.style.width = E + "px";
        B.style.width = 0.92 * E - 0x2 * M + "px";
        x.width = x.clientWidth * 0x2;
        x.height = x.clientHeight * 0x2;
        canvasBound = x.getBoundingClientRect();
        canvasScale = x.clientHeight / sizes.canvas.baseH;
        poloOverlapW = canvasBound.width * sizes.polo.overlapW / sizes.canvas.baseW;
        poloBlocW = (canvasBound.width + poloOverlapW * (nbPoloMax - 0x1)) / nbPoloMax;
        poloBlocX = (canvasBound.width - poloBlocW) / (nbPoloMax - 0x1);
        poloRatio = poloBlocW / sizes.polo.sprWidth;
        drawMinTopY = sizes.polo.minTopY * canvasScale * 0x2;
        drawMaxTopY = sizes.polo.maxTopY * canvasScale * 0x2;
        drawMaxRandPosY = sizes.polo.maxRandomY * canvasScale * 0x2;
        drawMaxBounceY = sizes.polo.maxBounceY * canvasScale * 0x2;
        drawPoloW = sizes.polo.sprWidth * poloRatio * 0x2;
        drawPoloH = sizes.polo.sprHeight * poloRatio * 0x2;
        drawEyeW = sizes.polo.sprEyesW * poloRatio * 0x2;
        drawEyeH = sizes.polo.sprEyesH * poloRatio * 0x2;
        drawEyeY = sizes.polo.eyesTopY * poloRatio * 0x2;
        drawAnimW = sizes.polo.sprAnimW * poloRatio * 0x2;
        drawAnimH = sizes.polo.sprAnimH * poloRatio * 0x2;
        drawPupW = sizes.polo.sprPupW * poloRatio * 0x2;
        drawPup1X = sizes.polo.pup1X * poloRatio * 0x2;
        drawPup1Y = sizes.polo.pup1Y * poloRatio * 0x2;
        drawPup2X = sizes.polo.pup2X * poloRatio * 0x2;
        drawPup2Y = sizes.polo.pup2Y * poloRatio * 0x2;
        drawMaxPupMove = sizes.polo.maxPupMove * poloRatio * 0x2;
      }
      if (listPolo && listPolo.length) {
        listPolo.forEach(function (N, O) {
          N.resize();
          if (pause) {
            N.draw();
          }
        });
      }
    };
    window.onresize();
  }
}
var pageExt;
var appBrowser;
var transitionEnd;
var animationEnd;
var iosVersion;
var iosVersionNumber;
var debugMute = getParameterByName("mute") || false;
var debugGame = getParameterByName("game") || false;
var debugScene = getParameterByName("scene") || false;
var debugBonus = getParameterByName("bonus") || false;
var build = {
  store: "steam",
  platform: "desktop",
  os: "win",
  osMinimum: 23,
  storeURL: "https://play.google.com/store/apps/details?id=com.sofarsogood.incredibox",
  version: "0.7.0",
  htmlExt: "html"
};
var machine = {};
var user = {};
var hasNetwork = false;
var sndExt = "ogg";
var vidExt = "webm";
var appBrowserDemo = false;
var appBrowserSchool = false;
var featureLocked = false;
var isMouseDevice = window.matchMedia("(hover: hover)").matches && window.matchMedia("(pointer: fine)").matches;
var isTouchDevice = checkTouchDevice();
var isMobile = false;
var trustAppMobile = window.cordova || false;
var isIframe = inIframe();
var pointerEventType = {};
var isIOS = false;
var isIOSMac = false;
var isOSX = false;
var isWin = false;
var isAndroid = false;
var isiPod = false;
var isiPhone = false;
var isiPad = false;
var isiPadPro = false;
var hasHBI = false;
var animSize = 0x1;
function checkSystem() {
  pageApp = window.location.href.includes("app.html") || window.location.href.includes("app.php") || "1" == getParameterByName("afs");
  pageExt = "html";
  appBrowser = false;
  appBrowserDemo = !(!window.navigator || true !== window.navigator.standalone) || !!window.matchMedia("(display-mode: standalone)").matches;
  appBrowserSchool = !!(null != getParameterByName("afs") && "undefined" !== getParameterByName("afs"));
  featureLocked = (appBrowser || appBrowserDemo) && !appBrowserSchool;
  hasNetwork = networkState();
  machine = getDeviceInfo(true);
  user = {
    "guid": storage.getItem("user-guid") || "",
    "djname": storage.getItem("user-djname") || "",
    "lang": storage.getItem("user-lang") || ""
  };
  isAndroid = /android/i.test(machine.osName);
  isWin = /windows/i.test(machine.osName);
  isOSX = /mac os/i.test(machine.osName);
  isIOS = /ios/i.test(machine.osName);
  isIOSMac = !(!window.device || !window.device.isiOSAppOnMac) && window.device.isiOSAppOnMac;
  if (iosVersion = !(!window.device || !window.device.version) && window.device.version) {
    h = iosVersion.split(".");
    iosVersionNumber = Number(String(h[0x0]) + String(h[0x1])[0x0]);
  }
  isiPod = isIOS && /ipod/i.test(machine.osName);
  isiPhone = isIOS && /iphone/i.test(machine.osName);
  isiPad = isIOS && /ipad/i.test(machine.deviceModel);
  isiPadPro = isIOS && /ipadpro/i.test(machine.deviceModel);
  isRetina = checkRetina();
  isMobile = checkMobile();
  hasHBI = isIOS && checkHBI();
  animSize = 0x400 <= document.body.clientWidth && 0x300 <= document.body.clientHeight ? 0x2 : 0x1;
  if (appBrowser) {
    animSize = 0x1;
    sndExt = checkAudioFormat("ogg") ? "ogg" : sndExt;
    vidExt = isAndroid || "mozilla firefox" == machine.browserName && machine.browserVersion <= 0x30 ? "webm" : "mp4";
  }
  pointerEventType = setPointerEvent();
  transitionEnd = transitionEndEventName();
  animationEnd = animationEndEventName();
  window.cordova;
  window.electron;
  var h = window.cordova ? document : window;
  h.addEventListener("online", networkOn, false);
  h.addEventListener("offline", networkOff, false);
  document.body.classList.remove("black");
  if (window.electron) {
    document.body.classList.add("electron");
  }
  if (!(pageApp || window.electron)) {
    document.getElementById("fade-all").classList.add("white");
  }
  if (pageApp) {
    document.body.classList.add("v" + appVersion);
    document.body.classList.add("darkback");
  }
  if (!(!appBrowser || appBrowserDemo || appBrowserSchool)) {
    document.body.classList.add("appBrowser");
  }
  if (appBrowserDemo) {
    document.body.classList.add("appBrowserDemo");
  }
  if (appBrowserSchool) {
    document.body.classList.add("afs");
  }
  if (featureLocked) {
    document.body.classList.add("featureLocked");
  }
  if (hasHBI) {
    document.body.classList.add("hasHBI");
  }
  if (miniPlayer) {
    document.body.classList.add("miniPlayer");
  }
  if (window.cordova && isAndroid) {
    document.addEventListener("backbutton", function (i) {
      i.preventDefault();
      clickAndroidBackButton();
    }, false);
  }
  if (window.cordova && pageApp && !isIOSMac && !window.electron) {
    document.addEventListener("pause", appOnPause, false);
    document.addEventListener("resume", appOnResume, false);
  }
  if (window.cordova && pageApp && isAndroid) {
    window.addEventListener("native.keyboardshow", VKBopen);
    window.addEventListener("native.keyboardhide", VKBclose);
  }
  if (pageApp && !window.cordova) {
    window.electron;
  }
  if (window.electron && true && "YXJw" != btoa(electron.vars.arg)) {
    new BoxDialog("#pop-dialog").open("Incredibox needs to run from<br>your Steam library.<br>Thanks for your support!", "&#129488;", [], true, true);
    throw new Error("Please connect to your Steam account");
  }
}
function checkHBI() {
  if (window.cordova) {
    var h = getComputedStyle(document.documentElement).getPropertyValue("--sab");
    if (h && "" != h && 0x0 < parseInt(h)) {
      return true;
    }
  }
  return false;
}
function getListUUID() {
  var h;
  var i = [];
  i.push(machine.uuid);
  for (h in storage.getAllItem()) if (-0x1 != h.indexOf("uuid-")) {
    if ("" != h.replace("uuid-", "")) {
      i.push(h.replace("uuid-", ""));
    } else {
      storage.removeItem(h);
    }
  }
  return removeDupInArray(i, false);
}
function secureIframe() {}
function checkInBrowser() {
  return -0x1 < document.URL.indexOf("http://") || -0x1 < document.URL.indexOf("https://");
}
function checkInPWA() {
  return !(!window.navigator || true !== window.navigator.standalone) || !!window.matchMedia("(display-mode: standalone)").matches;
}
function checkMobile() {
  var g;
  return !(window.electron || isIOSMac || isiPad || (g = getViewport(), !(isiPod || isiPhone || g.h <= 0x1f4 && g.w <= 0x3e8)));
}
function checkRetina() {
  var g;
  return !!window.matchMedia && ((g = window.matchMedia("only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)")) && g.matches || 0x1 < window.devicePixelRatio);
}
function checkTouchDevice() {
  var g = false;
  try {
    document.createEvent("TouchEvent");
    g = true;
  } catch (h) {}
  if (window.hasOwnProperty("ontouchstart") || 0x0 < navigator.maxTouchPoints || 0x0 < navigator.msMaxTouchPoints) {
    g = true;
  }
  return g = window.matchMedia("(pointer: coarse)").matches ? true : g;
}
function checkMouseDevice() {
  return window.matchMedia("(hover: hover)").matches && window.matchMedia("(pointer: fine)").matches;
}
function getAppData() {
  return {
    "build": build,
    "machine": machine,
    "user": user
  };
}
function checkAudioFormat(g) {
  g = g || "mp3";
  var h = document.createElement("audio");
  return !(!h.canPlayType || !h.canPlayType("audio/" + g + ";").replace(/no/, ""));
}
function checkSupported() {
  var h = window.hasOwnProperty("HTMLCanvasElement");
  var j = window.AudioContext || window.webkitAudioContext || false;
  var k = window.requestAnimationFrame || window.webkitRequestAnimationFrame || false;
  var l = "string" == typeof new XMLHttpRequest().responseType;
  var m = !(null == transitionEnd || "undefined" === transitionEnd) && !(null == animationEnd || "undefined" === animationEnd);
  window.AudioContext = j;
  window.requestAnimationFrame = k;
  return h ? j ? l ? m ? k ? "ok" : "RAF" : "CSS3" : "XHR" : "Audio API" : "Canvas";
}
function lockScreenEdges() {
  if (window.cordova && "object" == typeof ScreenEdgesPlugin) {
    ScreenEdgesPlugin.setPreferredEdges(["top", "bottom"], function () {}, function (h) {});
  }
}
function unlockScreenEdges() {
  if (window.cordova && "object" == typeof ScreenEdgesPlugin) {
    ScreenEdgesPlugin.setPreferredEdges([], function () {}, function (g) {});
  }
}
function converterCanRun() {
  var g = "function" == typeof window.Worker;
  window.cordova;
  return g;
}
function setPointerEvent(g) {
  var i = window.hasOwnProperty("PointerEvent") ? "pointer" : window.hasOwnProperty("TouchEvent") ? "touch" : "mouse";
  var g = g || i;
  var i = {};
  if ("pointer" == g) {
    i.down = "pointerdown";
    i.up = "pointerup";
    i.move = "pointermove";
    i.cancel = "pointercancel";
    i.leave = "pointerleave";
  } else if ("touch" == g) {
    i.down = "touchstart";
    i.up = "touchend";
    i.move = "touchmove";
    i.cancel = "touchcancel";
    i.leave = "touchcancel";
  } else if ("mouse" == g) {
    i.down = "mousedown";
    i.up = "mouseup";
    i.move = "mousemove";
    i.cancel = "mouseleave";
    i.leave = "mouseleave";
  }
  return i;
}
function initRightClick() {
  window.oncontextmenu = function () {
    return false;
  };
}
function networkOn() {
  hasNetwork = true;
  localMixObject.saveMixOffline();
  initAnalytics();
}
function networkOff() {
  hasNetwork = false;
}
function networkState() {
  var h = false;
  if (navigator.onLine) {
    h = navigator.onLine;
  } else if (navigator.network && navigator.network.connection && navigator.network.connection.type) {
    h = !(navigator.network.connection.type == Connection.NONE);
  }
  return h;
}
function keepAppAwake() {
  if (window.plugins && window.plugins.insomnia && !isIOSMac) {
    window.plugins.insomnia.keepAwake(function () {}, function () {});
  }
}
function stopKeepingAppAwake() {
  if (window.plugins && window.plugins.insomnia && !isIOSMac) {
    window.plugins.insomnia.allowSleepAgain(function () {}, function () {});
  }
}
function deleteUserInfo() {}
function getUserInfo() {
  return {
    "guid": storage.getItem("user-guid") || "",
    "djname": storage.getItem("user-djname") || "",
    "lang": storage.getItem("user-lang") || ""
  };
}
function setUserInfo(g) {
  if (null != g.guid && "undefined" !== g.guid) {
    g.guid = 0x1e == g.guid.length ? g.guid : "";
    user.guid = g.guid;
    storage.setItem("user-guid", user.guid, true);
  }
  if (null != g.djname && "undefined" !== g.djname) {
    user.djname = g.djname;
    storage.setItem("user-djname", user.djname, true);
  }
  if (null != g.lang && "undefined" !== g.lang) {
    user.lang = g.lang;
    storage.setItem("user-lang", user.lang, true);
  }
  user = {
    "guid": storage.getItem("user-guid") || "",
    "djname": storage.getItem("user-djname") || "",
    "lang": storage.getItem("user-lang") || ""
  };
}
function getDeviceInfo(g) {
  var j;
  var k;
  var q = navigator.userAgent || navigator.vendor || window.opera;
  var w = q.toLowerCase();
  var x = "(?)";
  if (/(fban|fbios|fbav|fbbv|fbid)/gi.test(w)) {
    x = "Facebook";
  } else if (/(twitter)/gi.test(w)) {
    x = "Twitter";
  }
  var y = "(?)";
  if (window.cordova && device) {
    y = device.platform;
  } else if (/(macintosh)/gi.test(w) && navigator.maxTouchPoints && 0x2 < navigator.maxTouchPoints || /(iphone|ipad|ipod)/gi.test(w)) {
    y = "iOS";
  } else if (/(mac os x)/gi.test(w)) {
    y = "Mac OS X";
  } else if (/(macppc|macintel|mac_powerpc|macintosh)/gi.test(w)) {
    y = "Mac OS";
  } else if (/(windows|win16)/gi.test(w)) {
    y = "Windows";
  } else if (/(android)/gi.test(w)) {
    y = "Android";
  }
  var z = "(?)";
  var A = w;
  if (window.cordova && device) {
    A = device.model;
  }
  if (/(windows phone|windows phone)/gi.test(A)) {
    z = "Windows phone";
  } else if (/(windows|win16)/gi.test(A)) {
    z = "PC";
  } else if (/(android)/gi.test(A)) {
    z = "Android";
  } else if (/(macintosh)/gi.test(A) && navigator.maxTouchPoints && 0x2 < navigator.maxTouchPoints && 0x400 == window.screen.width && 0x556 == window.screen.height) {
    z = "iPadPro";
  } else if (/(macintosh)/gi.test(A) && navigator.maxTouchPoints && 0x2 < navigator.maxTouchPoints || /(ipad)/gi.test(A)) {
    z = "iPad";
  } else if (/(iphone)/gi.test(A)) {
    z = "iPhone";
  } else if (/(ipod)/gi.test(A)) {
    z = "iPod";
  } else if (/(mac)/gi.test(A)) {
    z = "Mac";
  }
  if (window.cordova && device && null != appleModel[device.model] && /ipad pro/i.test(appleModel[device.model])) {
    A = "iPadPro";
  }
  var A = "(?)";
  if (window.cordova && device) {
    A = device.model;
  } else if (null != window.navigator && null != navigator.platform) {
    A = navigator.platform;
  }
  var B = "(?)";
  if (window.cordova && device) {
    B = device.version;
  } else if ("Windows" == y) {
    if (/(windows 10.0|windows nt 10.0)/gi.test(w)) {
      B = "10";
    } else if (/(windows 8.1|windows nt 6.3)/gi.test(w)) {
      B = "8.1";
    } else if (/(windows 8|windows nt 6.2)/gi.test(w)) {
      B = "8";
    } else if (/(windows 7|windows nt 6.1)/gi.test(w)) {
      B = "7";
    } else if (/(windows nt 6.0)/gi.test(w)) {
      B = "Vista";
    } else if (/(windows nt 5.2)/gi.test(w)) {
      B = "Server 2003";
    } else if (/(windows nt 5.1|windows xp)/gi.test(w)) {
      B = "XP";
    } else if (/(windows nt 5.0|windows 2000)/gi.test(w)) {
      B = "2000";
    } else if (/(win 9x 4.90|windows me)/gi.test(w)) {
      B = "ME";
    } else if (/(windows 98|win98)/gi.test(w)) {
      B = "98";
    } else if (/(windows 95|win95|windows_95)/gi.test(w)) {
      B = "95";
    } else if (/(windows nt 4.0|winnt4.0|winnt|windows nt)/gi.test(w)) {
      B = "NT 4.0";
    } else if (/(windows ce)/gi.test(w)) {
      B = "CE";
    } else if (/(win16)/gi.test(w)) {
      B = "3.11";
    }
  } else if ("Android" == y) {
    D = "Android";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = parseFloat(q.slice(E + D.length, E + D.length + 0x6));
    B = isNaN(C) ? B : C;
  } else if ("iOS" == y) {
    D = "OS";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = q.slice(E + D.length, E + D.length + 0x6);
    C = parseFloat(C.replace("_", "."));
    B = isNaN(C) ? B : C;
  } else if (-0x1 != y.indexOf("Mac OS")) {
    D = -0x1 != y.indexOf("Mac OS X") ? "Mac OS X" : "Mac OS";
    E = q.toLowerCase().indexOf(D.toLowerCase());
    C = q.slice(E + D.length, E + D.length + 0x6);
    C = parseFloat(C.replace("_", "."));
    B = isNaN(C) ? B : C;
  }
  var w = 0x0;
  if ("iOS" == y) {
    if (window.cordova && device) {
      if (null != appleModel[device.model] && "iPhone" == z) {
        w = appleModel[device.model].replace("iPhone", "").split(" ")[0x0];
        w = /SE/i.test(w) ? 0x7 : /X/i.test(w) ? 0xa : parseInt(w);
      }
    } else if ("iPhone" == z && (E = window.screen.width, D = window.screen.height, 0x140 == E && 0x1e0 == D ? w = 0x4 : 0x140 == E && 0x238 == D ? w = 0x5 : 0x177 == E && 0x29b == D || 0x19e == E && 0x2e0 == D ? w = 0x6 : (0x177 == E && 0x32c == D || 0x19e == E && 0x380 == D) && (w = 0xa), 0x3 == window.devicePixelRatio) && (0x32c == E && 0x177 == D || 0x380 == D && 0x19e == E)) {
      w = 0xa;
    }
  }
  var C = "";
  if (window.cordova && device) {
    C = "win";
  } else if (/mac os/i.test(y)) {
    C = "osx";
  } else if (/windows/i.test(y)) {
    C = "win";
  } else if (/android/i.test(y)) {
    C = "and";
  } else if (/ios/i.test(y)) {
    C = "ios";
  }
  var D = navigator.appName;
  var E = "" + parseFloat(navigator.appVersion);
  var F = parseInt(navigator.appVersion, 0xa);
  if (-0x1 != (j = q.indexOf("OPR/"))) {
    D = "Opera";
    E = q.substring(j + 0x4);
  } else if (-0x1 != (j = q.indexOf("Opera"))) {
    D = "Opera";
    E = q.substring(j + 0x6);
    if (-0x1 != (j = q.indexOf("Version"))) {
      E = q.substring(j + 0x8);
    }
  } else if (-0x1 != (j = q.indexOf("Edge"))) {
    D = "Microsoft Edge";
    E = q.substring(j + 0x5);
  } else if (-0x1 != (j = q.indexOf("MSIE"))) {
    D = "Microsoft Internet Explorer";
    E = q.substring(j + 0x5);
  } else if (-0x1 != (j = q.indexOf("Trident"))) {
    D = "Microsoft Internet Explorer";
    if (-0x1 != (j = q.indexOf("rv:"))) {
      E = q.substring(j + 0x3);
    }
  } else if (-0x1 != (j = q.indexOf("CriOS")) && /iphone|ipod|ipad/i.test(q)) {
    D = "Google Chrome for IOS";
    E = q.substring(j + 0x6);
  } else if (-0x1 != (j = q.indexOf("Chrome"))) {
    D = "Google Chrome";
    E = q.substring(j + 0x7);
  } else if (-0x1 != (j = q.indexOf("Safari"))) {
    D = "Safari";
    E = q.substring(j + 0x7);
    if (-0x1 != (j = q.indexOf("Version"))) {
      E = q.substring(j + 0x8);
    }
  } else if (-0x1 != (j = q.indexOf("Firefox"))) {
    D = "Mozilla Firefox";
    E = q.substring(j + 0x8);
  } else if ((k = q.lastIndexOf(" ") + 0x1) < (j = q.lastIndexOf("/")) && (D = q.substring(k, j), E = q.substring(j + 0x1), D.toLowerCase() == D.toUpperCase())) {
    D = navigator.appName;
  }
  if (-0x1 != (k = (E = -0x1 != (k = E.indexOf(";")) ? E.substring(0x0, k) : E).indexOf(" "))) {
    E = E.substring(0x0, k);
  }
  F = parseInt("" + E, 0xa);
  if (isNaN(F)) {
    E = "" + parseFloat(navigator.appVersion);
    F = parseInt(navigator.appVersion, 0xa);
  }
  var q = "";
  if (window.device && window.device.uuid) {
    q = device.uuid.toUpperCase();
  } else if (window.electron && window.electron.vars.uuid) {
    q = window.electron.vars.uuid;
  } else if (null != storage.getItem("tmp-uuid") && "undefined" !== storage.getItem("tmp-uuid")) {
    q = storage.getItem("tmp-uuid");
  } else {
    q = "tmp-" + uniqid("-").toUpperCase();
    storage.setItem("tmp-uuid", q);
  }
  var G = {
    "osName": y,
    "osTiny": C,
    "osVersion": B.toString(),
    "deviceModel": z,
    "deviceName": A,
    "deviceNumber": w,
    "browserName": D,
    "browserVersion": F,
    "browserFullVersion": E,
    "browserAppName": navigator.appName,
    "browserUserAgent": navigator.userAgent,
    "language": navigator.language || "",
    "webviewEmbed": x,
    "uuid": q
  };
  var H = 0x0;
  if (true === g) {
    for (H in G) if ("string" == typeof G[H]) {
      G[H] = G[H].toLowerCase();
    }
  }
  if (window.device) {
    for (H in device);
  }
  for (H in G);
  return G;
}
window.devicePixelRatio = window.devicePixelRatio || 0x1;
secureIframe();
var appleModel = {};
function initRulesCSS() {
  var g = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sal"));
  var h = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sar"));
  var g = Math.max(g, h, 0x14);
  var h = ":root {";
  if (pageApp) {
    h += "\n\t\t\t--app-v : " + appVersion + ";\n\t\t\t--colBck : " + app.colBck + ";\n\t\t\t--col0 : " + app.col0 + ";\n\t\t\t--col1 : " + app.col1 + ";\n\t\t\t--col2 : " + app.col2 + ";\n\t\t\t--col3 : " + app.col3 + ";\n\t\t\t--col4 : " + app.col4 + ";\n\t\t\t--url-img-home-screen : url(../asset-v" + appVersion + "/img/home-screen@2x.jpg);\n\t\t\t--url-img-home-titre : url(../asset-v" + appVersion + "/img/home-titre@2x.png);\n\t\t\t--url-img-home-version : url(../asset-v" + appVersion + "/img/home-version@2x.png);\n\t\t";
  }
  h = h + ("\n\t\t\t--fullfill-padding : " + g + "px;\n\t\t\t--url-img-bt-stores : url(" + "https://www.incredibox.com/" + "img/bt-stores-" + currentLanguage.split("-")[0x0] + ".png);\n\t\t") + "}";
  var g = document.head || document.getElementsByTagName("head")[0x0];
  var i = document.createElement("style");
  g.appendChild(i);
  i.type = "text/css";
  i.appendChild(document.createTextNode(h));
}
function BoxDialog(g) {
  var i = this;
  var j = $(g);
  function k(n) {
    n.preventDefault();
    stopProp(n);
    n.data.bt.addTouchAnimation();
    var q = true;
    if (undefined !== n.data.func) {
      if (n.data.func === l) {
        q = false;
      }
      n.data.func();
    }
    if (q) {
      l();
    }
  }
  function l() {
    if (!i.neverClose) {
      i.close();
    }
  }
  this.$div = j;
  this.$bck = j.find(".bac");
  this.$scale = j.find(".scale");
  this.$box = j.find(".box");
  this.$pop = j.find(".pop");
  this.$pop.$title = j.find(".title");
  this.$pop.$text = j.find(".text");
  this.$pop.$content = j.find(".content");
  this.opened = false;
  this.neverClose = false;
  this.isOpen = function () {
    return i.opened;
  };
  this.open = function (q, v, w, x, y, z, A) {
    if (i.isOpen()) {
      removeInFocusHistory("popup-dialog");
      deleteFocus();
      i.killall();
    }
    j.on(pointerEventType.down, stopProp);
    i.opened = true;
    i.neverClose = !(null == z || "undefined" === z) && z;
    q = null == q || "undefined" === q ? "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod" : q;
    v = null == v || "undefined" === v ? "Info" : v;
    w = null == w || "undefined" === w ? ["Close"] : w;
    x = null == x || "undefined" === x ? [l] : x;
    y = !(null == y || "undefined" === y) && y;
    if (null != A && "undefined" !== A) {
      j.attr("data-name", A);
    }
    j.addClass("show");
    i.clean();
    i.$pop.$title.html(v);
    i.$pop.$text.html(q);
    var B = 0x0;
    for (var C = w.length; B < C; B++) {
      var D = w[B];
      var E = $("<div class=\"bt bt-light\" id=\"bt-mini" + B + "\"></div>");
      (E = new CustomButton(E)).html("<div class=\"bck\"><div class=\"txt\">" + D + "</div></div><div class=\"hitzone\"></div>");
      E.on(pointerEventType.down, {
        "func": x[B],
        "bt": E
      }, k);
      i.$pop.$content.append(E);
    }
    if (y) {
      j.css({
        "z-index": "9999"
      });
    }
    i.fadeInBck();
    i.$box.removeClass("open close").addClass("open");
    createFocus("popup-dialog");
  };
  this.close = function (n) {
    if (null != n && "undefined" !== n) {
      n.preventDefault();
    }
    i.fadeOutBck();
    i.$box.removeClass("open close").addClass("close").one(animationEnd, function (q) {
      $(q.target).removeClass("close");
      j.removeClass("show");
      j.removeAttr("data-name");
      j.off();
      i.clean();
      i.opened = false;
      removeInFocusHistory("popup-dialog");
      createFocusFromHistory();
    });
  };
  this.killall = function () {
    removeInFocusHistory("popup-dialog");
    j.off();
    j.removeAttr("data-name");
    j.removeClass("show");
    i.clean();
    i.$box.removeClass("open close");
    resetAnimationCSS(i.$box[0x0]);
    i.$bck.removeClass("animateFadeIn animateFadeOut");
    resetAnimationCSS(i.$bck[0x0]);
    i.opened = false;
  };
  this.fadeInBck = function (n) {
    if (n) {
      i.$bck.addClass("mini");
    } else {
      i.$bck.removeClass("mini");
    }
    i.$bck.addClass("animateFadeIn");
  };
  this.fadeOutBck = function () {
    i.$bck.addClass("animateFadeOut").one(animationEnd, function (n) {
      $(n.target).removeClass("animateFadeIn animateFadeOut");
    });
  };
  this.clean = function () {
    i.$pop.$content.find(".bt").off();
    i.$pop.$content.empty();
    i.$pop.$title.empty();
    i.$pop.$text.empty();
  };
  return this;
}
function Popup(g) {
  var j;
  var k = this;
  var q = $(g);
  var v = q.find(".bac");
  var w = q.find(".box");
  var x = q.find(".bt.icon");
  var y = q.find(".container");
  var z = 0x0 < q.find(".box-tab .tab").length;
  var A = true;
  var B = true;
  function C() {
    A = true;
    v.removeClass("animateFadeIn animateFadeOut");
    k.closeComplete();
  }
  function D(F) {
    B = true;
    w.removeClass("slideUp slideDown").get(0x0).offsetHeight;
    j.onBoxCloseEnd();
    k.closeComplete();
    tryfunc(F);
  }
  function E() {
    if (null != k.onCloseTab && "undefined" !== k.onCloseTab) {
      k.onCloseTab();
    }
    q.find(".tab.active").removeClass("active");
    q.find(".pop.active").removeClass("active");
    var F = $(this);
    var G = q.find(".pop#" + F.attr("id").replace("tab-", "pop-"));
    F.addClass("active");
    G.addClass("active");
    createFocus(G.attr("id"));
  }
  this.$popup = q;
  this.$icon = x;
  this.$container = y;
  this.objCustom = j;
  this.open = function (F) {
    if (!(null != j && "undefined" !== j && F.name == j.name)) {
      if (!q.hasClass("show")) {
        q.addClass("show");
      }
      if (!v.hasClass("animateFadeIn")) {
        k.showBck();
      }
      if (w.hasClass("slideUp")) {
        k.hideBox(function () {
          k.open(F);
        });
      } else {
        k.custom(F);
        k.showBox();
      }
    }
  };
  this.close = function (F) {
    k.hideBck(F);
    k.hideBox(null, F);
  };
  this.closeComplete = function () {
    if (A && B) {
      k.reinit();
      tryfunc(j.onCloseComplete);
      j = null;
    }
  };
  this.reinit = function () {
    if (!j["static"]) {
      y.empty();
    }
    q.removeClass("show mini info action action-back no-action");
    q.removeAttr("data-name");
    v.removeClass("animateFadeIn animateFadeOut");
    w.removeClass("slideUp slideDown").get(0x0).offsetHeight;
  };
  this.custom = function (F) {
    j = {
      "static": F["static"] || false,
      "bodyclose": F.bodyclose || false,
      "bckclose": F.bckclose || false,
      "name": F.name || "no-name",
      "icntype": F.icntype || "",
      "class": F["class"] || "",
      "content": F.content || "",
      "onBoxOpenStart": F.onBoxOpenStart || nada,
      "onBoxOpenEnd": F.onBoxOpenEnd || nada,
      "onBoxCloseStart": F.onBoxCloseStart || nada,
      "onBoxCloseEnd": F.onBoxCloseEnd || nada,
      "onCloseComplete": F.onCloseComplete || nada
    };
    q.removeClass("big column mini info action action-back no-action");
    q.addClass(j["class"]);
    q.attr("data-name", j.name);
    if ("" != j.icntype) {
      q.addClass(j.icntype);
      x.find("svg use").attr("xlink:href", "#ic-" + ("action" == j.icntype ? "close" : "action-back" == j.icntype ? "navl" : "info"));
    }
    if (!j["static"]) {
      y.html(j.content);
    }
  };
  this.refresh = function () {
    if (null != j && "undefined" !== j && null != j.content && "undefined" !== j.content) {
      y.html(j.content);
    }
  };
  this.showBck = function () {
    A = false;
    v.addClass("animateFadeIn").one(animationEnd, function () {});
  };
  this.hideBck = function (F) {
    if (true === F) {
      C();
    } else {
      v.addClass("animateFadeOut").one(animationEnd, function () {
        C();
      });
    }
  };
  this.showBox = function () {
    B = false;
    j.onBoxOpenStart();
    if (z) {
      q.find(".box-tab .tab").first().trigger(pointerEventType.down.split(" ")[0x0]);
      deleteFocus();
    }
    w.addClass("slideUp").one(animationEnd, function () {
      if (j.bodyclose) {
        $body.on(pointerEventType.down, k.clickBck);
      }
      if (j.bckclose) {
        v.on(pointerEventType.down, k.close);
      }
      j.onBoxOpenEnd();
    });
  };
  this.hideBox = function (F, G) {
    if (j.bodyclose) {
      $body.off(pointerEventType.down, k.clickBck);
    }
    if (j.bckclose) {
      v.off(pointerEventType.down, k.close);
    }
    j.onBoxCloseStart();
    if (true === G) {
      D(F);
    } else {
      w.addClass("slideDown").one(animationEnd, function () {
        D(F);
      });
    }
  };
  this.clickBck = function (F) {
    F.preventDefault();
    if (!(0x0 < $(F.target).closest(g + " .box").length)) {
      if (!z || (F = null != (F = ~F.type.indexOf("touch") ? F.originalEvent : F).targetTouches && "undefined" !== (F = ~F.type.indexOf("touch") ? F.originalEvent : F).targetTouches ? F.targetTouches[0x0] : F, 0x64 < Math.round(F.pageY))) {
        k.close();
      }
    }
  };
  this.isOpen = function () {
    return q.hasClass("show");
  };
  this.getName = function () {
    return null != j && "undefined" !== j && null != j.name && "undefined" !== j.name ? j.name : "";
  };
  if (z) {
    q.find(".box-tab .tab").each(function (F) {
      $(this).on(pointerEventType.down, E);
    });
  }
  return this;
}
function checkIfPopupOpen() {
  if (null != boxPopup && "undefined" !== boxPopup && boxPopup.isOpen()) {
    boxPopup.close(true);
  }
}
function boxInfoCustom() {
  var h = boxInfo.$popup.find("#pop-tuto .slideshow");
  h.$box = h.find(".img-row");
  h.$btL = h.find(".bt").first();
  h.$btR = h.find(".bt").last();
  h.$nav = h.find(".pt-box");
  h.init = function () {
    var k;
    var m = this;
    var p = 0x0;
    var q = 0x0;
    var v = 0x0;
    var w = 0x0;
    var x = this.find(".bloc").length;
    var y = 0x64 / x;
    var z = 0x0;
    for (var A = 0x0; A < x; A++) {
      m.$nav.append("<div class=\"pt\"></div>");
    }
    this.addListener = function () {
      document.body.addEventListener(pointerEventType.up, m.onRelease);
      document.body.addEventListener(pointerEventType.leave, m.onRelease);
      document.body.addEventListener(pointerEventType.move, m.onMove);
    };
    this.removeListener = function () {
      document.body.removeEventListener(pointerEventType.up, m.onRelease);
      document.body.removeEventListener(pointerEventType.leave, m.onRelease);
      document.body.removeEventListener(pointerEventType.move, m.onMove);
    };
    this.onPress = function (B) {
      B = "targetTouches" in B ? B.targetTouches[0x0] : B;
      p = B.pageX;
      m.$box.removeClass("slide");
      k = boxInfo.$popup.find(".slideshow")[0x0].clientWidth;
      m.removeListener();
      m.addListener();
    };
    this.onMove = function (B) {
      B = "targetTouches" in B ? B.targetTouches[0x0] : B;
      B = 0x64 * (-0x1 * Math.round(p - B.pageX)) / document.body.clientWidth;
      z = B * document.body.clientWidth / k;
      q = z / x * 0.6;
      m.$box.css({
        "transform": "translate(" + (w + q) + "%,0)"
      });
    };
    this.onRelease = function () {
      m.removeListener();
      if (z < -0xf) {
        if (v != x - 0x1) {
          m.slide("left");
        } else {
          m.slide();
        }
      } else if (0xf < z && 0x0 !== v) {
        m.slide("right");
      } else {
        m.slide();
      }
      z = q = p = 0x0;
    };
    this.slide = function (B) {
      m.removeListener();
      m.$box.addClass("slide");
      if ("left" === B) {
        v++;
      } else if ("right" === B) {
        v--;
      }
      w = -v * y;
      m.$box.css({
        "transform": "translate(" + String(w) + "%,0)"
      });
      m.lightup();
    };
    this.clickLeft = function (B) {
      if (0x0 !== v) {
        m.slide("right");
      }
    };
    this.clickRight = function (B) {
      if (v != x - 0x1) {
        m.slide("left");
      }
    };
    this.lightup = function () {
      m.$nav.find(".pt").removeClass("active");
      m.$nav.find(".pt").eq(v).addClass("active");
      m.$btL.removeClass("disable");
      m.$btR.removeClass("disable");
      if (0x0 === v) {
        m.$btL.addClass("disable");
      }
      if (v == x - 0x1) {
        m.$btR.addClass("disable");
      }
    };
    this.desactive = function () {
      if (0x0 < v) {
        p = q = v = w = z = 0x0;
        m.slide();
      }
      m.$box[0x0].removeEventListener(pointerEventType.down, m.onPress);
      m.$btL[0x0].removeEventListener(pointerEventType.down, m.clickLeft);
      m.$btR[0x0].removeEventListener(pointerEventType.down, m.clickRight);
      m.removeListener();
    };
    this.active = function () {
      m.$box[0x0].addEventListener(pointerEventType.down, m.onPress);
      m.$btL[0x0].addEventListener(pointerEventType.down, m.clickLeft);
      m.$btR[0x0].addEventListener(pointerEventType.down, m.clickRight);
      m.lightup();
    };
  };
  h.init();
  return h;
}
function initPopup() {
  (boxInfo = new Popup(".box-popup#pop-info")).$slide = boxInfoCustom();
  boxParam = new Popup(".box-popup#pop-param");
  $("#pop-language .box-lang .bt").on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(function () {
      clickBtLang(h);
    });
  });
  $("#pop-follow .bt.color-facebook").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("facebook");
  });
  $("#pop-follow .bt.color-twitter").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("twitter");
  });
  $("#pop-follow .bt.color-instagram").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("instagram");
  });
  $("#pop-follow .bt.color-youtube").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("youtube");
  });
  $("#pop-follow .bt.color-tumblr").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("tumblr");
  });
  $("#pop-follow #img-shop").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("shop-all");
  });
  $("#pop-credit #bt-feedback").on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(sendFeedback);
  });
  $("#pop-credit #bt-rating").on(pointerEventType.down, function (h) {
    h.preventDefault();
    var i = isIOS || isOSX ? build.storeRateURL : "https://play.google.com/store/apps/details?id=com.sofarsogood.incredibox";
    preventAction(function () {
      openURL(i);
    });
  });
  $("#pop-credit #bt-faq").on(pointerEventType.down, function (h) {
    h.preventDefault();
    redirectTo("faq");
  });
  $("#pop-credit #bt-privacy").on(pointerEventType.down, function (h) {
    h.preventDefault();
    showPP();
  });
}
function showPP(g) {}
function hidePP() {}
function refusePP() {}
function acceptPP(g) {}
function dialogGetApp(g, h) {
  if (null != g && "undefined" !== g) {
    g.preventDefault();
  }
  if (appBrowserDemo) {
    popupGetApp(h);
  } else if (appBrowser) {
    popupGetAppBrowser(h);
  } else {
    boxDialog.open("To access this feature you have to download the Incredibox app. Let's go? &#128273;", "&#128274; Locked", [STR("bt.sure"), STR("bt.later")], [], true);
  }
}
function popupGetApp(g) {
  var i = isIOS ? "<div class='bt-store' id='bt-getapp'><div class='bck appstore'></div></div>" : "<div class='bt with-icn' id='bt-getapp'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg><div class='txt'>Get app</div></div><div class='hitzone'></div></div>";
  var j = isIOS ? "appstore" : "store";
  i = isAndroid ? "<div class='bt-store' id='bt-getapp'><div class='bck playstore'></div></div>" : i;
  j = isAndroid ? "playstore" : j;
  boxPopup.open({
    "name": "get-full-app",
    "icntype": true === g ? "action-back" : "action",
    "class": "big column",
    "content": "\n\t\t\t<div class='left'>\n               <div class='img-box'></div>\n            </div>\n            <div class='right'>\n               <div class='title'>" + STR("txt.lockedContent") + "</div>\n               <div class='text'>\n               \t" + STR("txt.wantAllFeature") + " " + STR("txt.easyDownload") + "<br><br>\n               \t" + STR("txt.catchyFeatures").replace("%{emoji}", "&#129321") + "\n               </div>\n               " + i + "\n            </div>",
    "onBoxOpenEnd": function () {
      if (true === g) {
        boxPopup.$icon.on(pointerEventType.down, popupRecok);
      } else {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      }
      boxPopup.$popup.find(".img-box").css({
        "background-image": "url(./img/demo-mockup.jpg)"
      }).addClass("fade");
      boxPopup.$popup.find("#bt-getapp").on(pointerEventType.down, function (m) {
        m.preventDefault();
        redirectTo(j);
      });
    },
    "onBoxCloseStart": function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find("#bt-getapp").off();
    }
  });
}
function popupGetAppBrowser(g) {
  var j = true === g ? "action-back" : "action";
  var k = "App exclusivity";
  var l = "This feature is only available in the Incredibox App.<br>Choose your store below and access the full experience!";
  var m = "More info";
  var p = null != getParameterByName("lang") && "en" != getParameterByName("lang") ? getParameterByName("lang") + "/" : "";
  var q = "https://www.incredibox.com/" + p + "app";
  if (isIframe && null != window.top.i18n) {
    k = window.top.i18n.app_exclusivity;
    l = window.top.i18n.feature_only_inapp + "<br>" + window.top.i18n.access_full_xp;
    m = window.top.i18n.bt_more_info;
  }
  boxPopup.open({
    "name": "get-full-app-browser",
    "icntype": j,
    "content": "\n\t\t\t<div class='title'>" + k + " &#128521;</div>\n\t\t\t<div class='text'>" + l + "</div>\n\t\t\t<div class='box-bt-store'>\n\t\t\t\t<a href=\"https://apps.apple.com/app/incredibox/id1093131935\" target=\"_blank\" class=\"bt-store\"><div class=\"bck appstore\"></div></a>\n\t\t\t\t<a href=\"https://play.google.com/store/apps/details?id=com.sofarsogood.incredibox\" target=\"_blank\" class=\"bt-store\"><div class=\"bck playstore\"></div></a>\n\t\t\t\t<a href=\"https://www.amazon.fr/So-Far-Good-Incredibox/dp/B07BKZCDHT/\" target=\"_blank\" class=\"bt-store\"><div class=\"bck amazonstore\"></div></a>\n\t\t\t\t<a href=\"https://store.steampowered.com/app/1545450/Incredibox/\" target=\"_blank\" class=\"bt-store\"><div class=\"bck steam\"></div></a>\n\t\t\t\t<a href=\"https://apps.apple.com/app/id1437906083\" target=\"_blank\" class=\"bt-store\"><div class=\"bck macappstore\"></div></a>\n\t\t\t\t<a href=\"https://www.microsoft.com/fr-fr/p/incredibox/9pdjpp8scs9k?rtc=1&activetab=pivot:overviewtab\" target=\"_blank\" class=\"bt-store\"><div class=\"bck windowsstore\"></div></a>\n\t\t\t\t<a href=\"https://www.incredibox.com/schools\" target=\"_blank\" class=\"bt-store\"><div class=\"bck schools\"></div></a>\n\t\t\t</div>\n\t\t\t<div id=\"bt-more-info\" class=\"bt bt-light with-icn\"><div class=\"bck\"><div class=\"icn\"><svg class=\"icn-svg\"><use xlink:href=\"#ic-navr\"></use></svg></div><div class=\"txt\">" + m + "</div></div><div class=\"hitzone\"></div></div>",
    "onBoxOpenEnd": function () {
      if (true === g) {
        boxPopup.$icon.on(pointerEventType.down, popupMixSaved);
      } else {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      }
      boxPopup.$popup.find("#bt-more-info").on(pointerEventType.down, function (r) {
        r.preventDefault();
        openURL(q, "_self");
      });
    },
    "onBoxCloseStart": function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find("#bt-more-info").off();
    }
  });
}
function popupGeneralError(g) {
  var j = translateObj && translateObj.trad ? STR("pop.generalErrorText") : "Sorry, the app encountered a technical problem.";
  var k = translateObj && translateObj.trad ? STR("bt.ok") : "Ok";
  var l = g && g.error ? "<br>[ error: " + g.error + " ]" : "";
  var m = g && g.action ? g.action : "";
  var g = g && g.txt ? g.txt + l : j + l;
  if ("kill" == m) {
    boxDialog.open(g, "&#128533;", [], [], true, true);
  } else if ("reload" == m) {
    boxDialog.open(g, "&#128533;", ["Reload"], [reloadPage], true);
  } else {
    boxDialog.open(g, "&#128533;", [k], [], true);
  }
}
function popupStillHere() {
  if (null != boxDialog && "dialogStillHere" != boxDialog.$div.attr("data-name")) {
    boxDialog.open(STR("pop.stillHere"), "&#128564;", [STR("bt.sure")], [clickPopupStillHere], true, false, "dialogStillHere");
  }
}
function popupInfo() {
  deleteFocus();
  boxInfo.open({
    "static": true,
    "bckclose": true,
    "name": "popup-info",
    "class": "big",
    "onBoxOpenEnd": function () {
      boxInfo.$slide.active();
      createFocus("pop-tuto");
    },
    "onBoxCloseStart": function () {
      deleteFocus();
      focusHistory = [];
    },
    "onBoxCloseEnd": function () {
      boxInfo.$slide.desactive();
    },
    "onCloseComplete": function () {
      createFocus(pageApp ? "home" : "index-select");
    }
  });
}
function popupParam() {
  deleteFocus();
  boxParam.open({
    "static": true,
    "bckclose": true,
    "name": "popup-param",
    "class": "big",
    "onBoxOpenEnd": function () {
      createFocus("pop-language");
    },
    "onBoxCloseStart": function () {
      deleteFocus();
      focusHistory = [];
    },
    "onCloseComplete": function () {
      createFocus(pageApp ? "home" : "index-select");
    }
  });
}
function popupSwitch() {
  deleteFocus();
  boxSwitch.open({
    "static": true,
    "bckclose": true,
    "name": "popup-switch",
    "onBoxOpenEnd": function () {
      createFocus("popup-switch");
    },
    "onBoxCloseStart": function () {
      deleteFocus();
      focusHistory = [];
    },
    "onCloseComplete": function () {
      createFocus("home");
    }
  });
}
function popupDrag() {
  var h = STR(modeRecord ? "pop.dragDropText" : "txt.tuto1");
  boxPopup.open({
    "name": "drag-and-drop",
    "class": "mini",
    "bodyclose": true,
    "content": "<div class='title'>" + STR("pop.dragDropTitle") + "</div><div class='text'>" + h + "</div>",
    "onBoxOpenStart": function () {
      boxPopup.$popup.find(".pop").append("<div id='pointe-box' class='bottom'><div id='pointe'></div></div>");
    },
    "onBoxCloseEnd": function () {
      boxPopup.$popup.find("#pointe-box").remove();
      if (!modeRecord) {
        storage.setItem("popupDragViewed", "viewed");
      }
    }
  });
}
function popupShort() {
  boxPopup.open({
    "name": "too-short",
    "icntype": "info",
    "class": "mini",
    "bodyclose": true,
    "content": "\n\t\t\t<div class='title'>" + STR("pop.toShortTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.toShortText").split("%{minimum_time}").join(app.recmintime) + "</div>"
  });
}
function popupBonusPlaying() {
  boxPopup.open({
    "name": "bonus-playing",
    "icntype": "info",
    "class": "mini",
    "bodyclose": true,
    "content": "\n\t\t\t<div class='title'>" + STR("pop.bonusPlayingTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.bonusPlayingText") + "</div>"
  });
}
function popupFindPreviousBonus() {
  boxPopup.open({
    "name": "find-previous-bonus",
    "icntype": "info",
    "class": "mini",
    "bodyclose": true,
    "content": "\n\t\t\t<div class='title'>" + STR("pop.bonusFindPreviousTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.bonusFindPreviousText") + "</div>"
  });
}
function popupBonusUnlocked(g) {
  var i;
  if ((!modeReplay && !modeRandom || g) && (i = "v" + appVersion + "-popup-bonus-unlock", null == storage.getItem(i) || "undefined" === storage.getItem(i) || g)) {
    boxPopup.open({
      "name": "bonus-unlocked",
      "class": "mini",
      "bodyclose": true,
      "content": "\n\t\t\t\t\t<div class='title'>" + STR("pop.bonusUnlockTitle") + "</div>\n\t\t\t\t\t<div class='text'>" + STR("pop.bonusUnlockText") + "</div>\n\t\t\t\t",
      "onBoxOpenStart": function () {
        boxPopup.$popup.find(".pop").append("<div id='pointe-box' class='top'><div id='pointe'></div></div>");
        calcPointePosX(0x1);
      },
      "onBoxCloseEnd": function () {
        storage.setItem(i, "ok");
        boxPopup.$popup.find("#pointe-box").remove();
      }
    });
  }
}
function popupBonusFindNext(g) {
  var h;
  if ((!modeReplay && !modeRandom || g) && (h = "v" + appVersion + "-popup-bonus-next", null == storage.getItem(h) || "undefined" === storage.getItem(h) || g)) {
    if (isToolbarOpen) {
      closeTool();
    }
    boxPopup.open({
      "name": "find-next-bonus",
      "class": "mini",
      "bodyclose": true,
      "content": "\n\t\t\t\t\t<div class='title'>" + STR("pop.bonusFindNextTitle") + "</div>\n\t\t\t\t\t<div class='text'>" + STR("pop.bonusFindNextText") + "</div>\n\t\t\t\t",
      "onBoxOpenStart": function () {
        boxPopup.$popup.find(".pop").append("<div id='pointe-box'><div id='pointe'></div></div>");
      },
      "onBoxCloseEnd": function () {
        storage.setItem(h, "ok");
        boxPopup.$popup.find("#pointe-box").remove();
      }
    });
  }
}
function calcPointePosX(g) {
  var i = document.querySelector("#pop-popup .pop").getBoundingClientRect();
  var g = document.querySelector("#bt-bonus-" + g).getBoundingClientRect();
  var g = g.left - i.left + g.width / 0x2;
  g = (g = g < 0x1e ? 0x1e : g) > i.width - 0x1e ? i.width - 0x1e : g;
  document.getElementById("pointe").style.left = g + "px";
}
function popupRecok() {
  checkTimeRecok = new Date().getTime();
  deleteFocus();
  var h = "\n\t\t<div class='bt bt-haut retry'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-reset'></use></svg></div><div class='txt'>" + STR("bt.retry") + "</div><div class='hitzone'></div></div>\n\t\t<div class='bt bt-haut replay'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='txt'>" + STR("bt.replay") + "</div><div class='hitzone'></div></div>\n\t\t<div class='bt bt-haut save'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-edit'></use></svg></div><div class='txt'>" + STR("bt.save") + "</div><div class='hitzone'></div></div>";
  if (appBrowserDemo) {
    h = "\n\t\t\t<div class='bt bt-haut replay'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='txt'>" + STR("bt.replay") + "</div><div class='hitzone'></div></div>\n\t\t\t<div class='bt bt-haut share'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='txt'>" + STR("bt.share") + "</div><div class='hitzone'></div></div>\n\t\t\t<div class='bt bt-haut download'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='txt'>Get MP3</div><div class='hitzone'></div></div>";
  }
  boxPopup.open({
    "name": "record-complete",
    "icntype": "action",
    "content": "\n\t\t\t<div class='title'>" + STR("pop.recOkTitle") + "</div>\n\t\t\t<div class='content'>\n\t\t\t\t<div class='box-bt-haut'>\n\t\t\t\t\t" + h + "\n\t\t\t\t</div>\t\n\t\t\t</div>",
    "onBoxOpenEnd": function () {
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      boxPopup.$popup.find(".bt.replay").on(pointerEventType.down, function (j) {
        j.preventDefault();
        preventAction(clickReplayMix);
      });
      if (appBrowserDemo) {
        boxPopup.$popup.find(".bt.share").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(function () {
            popupGetApp(true);
          });
        });
        boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(function () {
            popupGetApp(true);
          });
        });
      } else {
        boxPopup.$popup.find(".bt.retry").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(clickRetryMix);
        });
        boxPopup.$popup.find(".bt.save").on(pointerEventType.down, function (j) {
          j.preventDefault();
          preventAction(clickSaveMix);
        });
      }
      createFocus("popup-record-complete");
      unlock();
    },
    "onBoxCloseStart": function () {
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    "onBoxCloseEnd": function () {
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    "onCloseComplete": function () {
      removeInFocusHistory("popup-record-complete");
      if (!modeReplay) {
        createFocus("toolbar");
      }
    }
  });
}
var checkTimeRecok = 0x0;
function canIclickRecok() {
  return 0x258 < new Date().getTime() - checkTimeRecok;
}
function clickRetryMix() {
  if (0x258 < new Date().getTime() - checkTimeRecok) {
    boxPopup.close();
    callAd("next", "retry-mix", function () {
      TweenMax.delayedCall(0.2, startRecordMode);
    });
  }
}
function clickReplayMix() {
  if (0x258 < new Date().getTime() - checkTimeRecok) {
    boxPopup.close();
    prepareReplayMode();
    startReplayMode();
    saveGA("mix", "replay");
  }
}
function clickSaveMix() {
  popupForm();
}
function popupForm() {
  boxPopup.open({
    "name": "save-form",
    "icntype": "action-back",
    "content": function () {
      var h = "\n\t\t\t<div class='title'>" + STR("pop.formTitle") + "</div>\n\t\t\t<div class='content'>\n\t\t\t\t<form action='javascript:validFormMix()' method='post' target='_self' autocomplete='off'>\n\t\t\t\t\t<div class='formzone'>\n\t\t\t\t\t\t<div class='formline ic-name'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-user-mini'></use></svg></div><input type='text' id='input-name' placeholder='" + STR("txt.inputName") + "' value='" + user.djname + "' maxlength='26' autocorrect='off' spellcheck='false'/></div>\n\t\t\t\t\t\t<div class='formline ic-title'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-note-mini'></use></svg></div><input type='text' id='input-title' placeholder='" + STR("txt.inputTitle") + "' value='' maxlength='26' autocorrect='off' spellcheck='false'/></div>\n\t\t\t\t\t\t<div class='formline ic-dedi'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div><input type='text' id='input-dedi' placeholder='" + STR("txt.dedicatedTo").split("%{name}").join("...") + "' value='' maxlength='26' autocorrect='off' spellcheck='false'/></div>";
      if (!appBrowser) {
        h += "<div class='formline ic-private'>\n\t\t\t\t\t\t\t<div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div>\n\t\t\t\t\t\t\t<div class='bt-onofftext active'>\n\t\t\t\t\t\t\t\t<div class='slider'></div>\n\t\t\t\t\t\t\t\t<div class='txtbox'>\n\t\t\t\t\t\t\t\t\t<div class='label'>" + STR("bt.private") + "</div>\n\t\t\t\t\t\t\t\t\t<div class='label'>" + STR("bt.public") + "</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>";
      }
      h += "</div>\n\t\t\t\t\t<div class='btzone'>\n\t\t\t\t\t\t<div class='bt bt-round bt-big valid'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-check'></use></svg></div><div class='hitzone'></div></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type='submit' style='visibility:hidden;position:absolute'/><div class='clear'></div>\n\t\t\t\t</form>\n\t\t\t</div>";
      if (appBrowser && !appBrowser) {
        h += "<div style='margin-top: 25px; color:#777; font-size:14px; line-height:20px;'>" + STR("pop.dontUseName") + " &#128521;</div>";
      }
      return h;
    },
    "onBoxOpenEnd": function () {
      var i;
      var j;
      createFocus("popup-save-form");
      boxPopup.$icon.on(pointerEventType.down, popupRecok);
      boxPopup.$popup.find(".bt.valid").on(pointerEventType.down, function (k) {
        k.preventDefault();
        preventAction(clickBtValidFormMix);
      });
      if (window.cordova && !isIOSMac) {
        boxPopup.$popup.find(".formline:not(.ic-private)").on(pointerEventType.down, function (k) {
          boxPopup.$popup.find(".formline").off(pointerEventType.down);
          Spinner.add($(this).find(".icn-box"));
        });
        boxPopup.$popup.find(".formline input").on("focus", function () {
          boxPopup.$popup.find(".formline input").off("focus");
          Spinner.reset();
        });
      }
      if (!(appBrowser || null != storage.getItem("param-safe"))) {
        i = boxPopup.$popup.find(".formline.ic-private .bt-onofftext");
        j = boxPopup.$popup.find(".formline.ic-private svg use");
        i.on(pointerEventType.down, function (k) {
          k.preventDefault();
          if (i.hasClass("active")) {
            i.removeClass("active");
            j.attr("xlink:href", "#ic-lock-mini");
          } else {
            i.addClass("active");
            j.attr("xlink:href", "#ic-view-mini");
          }
        });
      }
    },
    "onBoxCloseStart": function () {
      removeInFocusHistory("popup-save-form");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
      boxPopup.$popup.find(".bt-onofftext").off();
      boxPopup.$popup.find(".formline").off();
      boxPopup.$popup.find(".formline input").off();
      boxPopup.$popup.find("input").off();
      if (window.cordova) {
        blurAll();
      }
    }
  });
}
var androidKB;
var translateObj;
var defaultLanguage;
var currentLanguage;
var formProcessing = false;
function clickBtValidFormMix() {
  validFormMix();
}
function validFormMix() {
  var h;
  var j;
  var k;
  var m;
  var q;
  var v;
  var w;
  var x;
  var y;
  var z;
  var A;
  function B() {
    TweenMax.delayedCall(0x1, function () {
      Spinner.reset();
      popupMixSaved();
    });
  }
  if (!(boxPopup.$popup.find(".formzone .formline input").hasClass("focused") || formProcessing)) {
    formProcessing = true;
    lock();
    h = appBrowser || null != storage.getItem("param-safe") || !boxPopup.$popup.find(".formzone .bt-onofftext").hasClass("active");
    j = boxPopup.$popup.find(".formzone #input-name");
    k = boxPopup.$popup.find(".formzone #input-title");
    m = boxPopup.$popup.find(".formzone #input-dedi");
    q = j.val().substr(0x0, 0x1a);
    v = k.val().substr(0x0, 0x1a);
    w = m.val().substr(0x0, 0x1a);
    q = cleanInputText(q);
    v = cleanInputText(v);
    w = cleanInputText(w);
    z = /[^A-Za-z0-9\u00C0-\u017F '-]/;
    x = q.replace(/ /g, "");
    y = v.replace(/ /g, "");
    A = w.replace(/ /g, "");
    if (z.test(x)) {
      invalidField(j);
    } else if (z.test(y)) {
      invalidField(k);
    } else if (z.test(A)) {
      invalidField(m);
    } else if ("" === x) {
      invalidField(j);
    } else if ("" === y) {
      invalidField(k);
    } else {
      deleteFocus();
      boxPopup.$popup.find(".formzone input").blur();
      z = {
        "mymix": true,
        "online": false,
        "name": ucwords(q),
        "title": ucwords(v),
        "dedi": ucwords(w),
        "app": app.version,
        "datedb": getDateNow(),
        "link": getUniqLink(),
        "private": h ? 0x1 : 0x0,
        "nbview": 0x0,
        "nblike": 0x0,
        "xml": trim(recordMix.getXML())
      };
      A = boxPopup.$popup.find(".bt.valid");
      Spinner.add(A);
      recordMix.setData(z);
      localMixObject.saveMix(z);
      mixToShare = z;
      setUserInfo({
        "djname": ucwords(q)
      });
      delete XHRmemotime.mymix;
      if (hasNetwork) {
        callAd("next", "save-mix");
        if (appBrowser) {
          saveMixDB(z, B, function () {
            boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
            Spinner.reset();
            formProcessing = false;
            unlock();
          });
        } else {
          saveMixDB(z, B);
        }
      } else if (appBrowser) {
        Spinner.reset();
        formProcessing = false;
        unlock();
        boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], []);
      } else {
        B();
      }
    }
  }
}
function invalidField(g) {
  g.addClass("invalid").one(animationEnd, function (h) {
    $(h.target).removeClass("invalid");
  });
  formProcessing = false;
  unlock();
}
function VKBopen(g) {
  if (window.cordova && isAndroid && boxPopup.isOpen() && "save-form" == boxPopup.$popup.attr("data-name")) {
    g = g.keyboardHeight || 0.7 * document.body.clientHeight;
    (androidKB = new FocusKeyboardAndroid()).init(g);
  }
}
function VKBclose() {
  if (window.cordova && isAndroid && boxPopup.isOpen() && "save-form" == boxPopup.$popup.attr("data-name") && androidKB) {
    androidKB.kill();
    androidKB = null;
  }
}
function FocusKeyboardAndroid() {
  var h;
  var j;
  var k;
  function l(p) {
    m(p.target);
  }
  function m(p) {
    var p = p.getBoundingClientRect();
    var q = p.top;
    var p = p.height;
    var q = Math.round(j - (q + p / 0x2));
    TweenMax.to(boxPopup.$popup, 0.3, {
      "scrollTo": {
        "y": "-=" + q
      },
      "ease": Quad.easeInOut,
      "overwrite": true
    });
  }
  this.init = function (p) {
    h = p;
    j = (document.body.clientHeight - h) / 0x2;
    (k = document.querySelectorAll("#pop-popup[data-name=save-form] input[type=text]")).forEach(function (q) {
      q.addEventListener("focus", l);
      if (document.activeElement == q) {
        m(q);
      }
    });
    boxPopup.$popup.addClass("VKBopen");
    boxPopup.$popup.find(".bac").css({
      "height": "calc(100% + " + h + "px)"
    });
    window.cordova;
  };
  this.kill = function () {
    k.forEach(function (p) {
      p.removeEventListener("focus", l);
    });
    TweenMax.to(boxPopup.$popup, 0x0, {
      "scrollTo": {
        "y": 0x0
      },
      "overwrite": true
    });
    boxPopup.$popup.removeClass("VKBopen");
    boxPopup.$popup.find(".bac").css({
      "height": "100%"
    });
    window.cordova;
  };
}
function blurAll() {
  if (null != document.activeElement && "undefined" !== document.activeElement) {
    document.activeElement.blur();
  }
}
function listenFocus() {
  var g = false;
  if (isIOS) {
    document.addEventListener("focusin", function () {
      g = true;
    });
    document.addEventListener("focusout", function () {
      g = false;
      setTimeout(function () {
        if (!g) {
          window.scrollTo(0x0, 0x0);
        }
      }, 0xfa);
    });
  }
}
function popupConvertMix() {
  var h = "action";
  var i = appBrowserSchool && miniPlayer ? mixToWatch : mixToShare;
  if (!($mixlist.hasClass("show") || appBrowserSchool)) {
    h = "action-back";
  }
  boxPopup.open({
    "name": "convert-mix",
    "icntype": h,
    "content": "\n\t\t\t<div class='title'>" + STR("pop.convertMixTitle") + "</div>\n\t\t\t<div class='text'>" + STR("pop.convertMixText") + "</div>\n\t\t\t<div class='content'>\n\t\t\t\t<div id='convert-loader-box' class='progress-box'><div class='progress-bar'></div></div>\n\t\t\t\t<a class='bt with-icn color download' id='bt-save-file'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg><div class='txt'>" + STR("bt.saveFile") + "</div></div><div class='hitzone'></div></a>\n\t\t\t\t<div class='spinner-box spin'><svg class='icn-svg col-version'><use xlink:href='#ic-loader'></use></svg></div>\n\t\t\t</div>",
    "onBoxOpenEnd": function () {
      createFocus("popup-convert-mix");
      boxPopup.$icon.on(pointerEventType.down, function () {
        if ("action" == h) {
          boxPopup.close();
        } else {
          popupMixSaved();
        }
      });
      if (null != i && "undefined" !== i && converterCanRun()) {
        startConvert(i, boxPopup.$popup);
      } else {
        popupGeneralError({
          "error": "converter mix"
        });
      }
    },
    "onBoxCloseStart": function () {
      removeInFocusHistory("popup-convert-mix");
      removeInFocusHistory("popup-convert-mix-ready");
      createFocus("playlist-line-open");
      boxPopup.$icon.off();
      stopConvert();
    }
  });
}
function popupMixSaved() {
  formProcessing = false;
  boxPopup.open({
    "name": "mix-saved",
    "icntype": "action",
    "content": function () {
      var h = appBrowser ? STR("pop.shareMixSaved") : STR("pop.shareMixSavedPlaylist") + "<br>" + STR("pop.shareShareTop50");
      var h = 0x1 == mixToShare["private"] ? h.split("<br>")[0x0] : h;
      var i = "";
      if (!appBrowserSchool) {
        i = (i += "<div class='bt bt-haut link'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='txt'>" + STR("bt.link") + "</div><div class='hitzone'></div></div>") + ("<div class='bt bt-haut share color-blue'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='txt'>" + STR("bt.share") + "</div><div class='hitzone'></div></div>");
      }
      if (converterCanRun()) {
        i += "<div class='bt bt-haut download hoverLocked'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='txt'>" + STR("bt.exportFile") + "</div><div class='ic-locked'><svg class='icn-svg'><use xlink:href='#ic-lock'></use></svg></div><div class='hitzone'></div></div>";
      }
      i += "<div class='bt bt-haut mixlist color hoverLocked'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-mixlist'></use></svg></div><div class='txt'>" + STR("bt.myMix") + "</div><div class='ic-locked'><svg class='icn-svg'><use xlink:href='#ic-lock'></use></svg></div><div class='hitzone'></div></div>";
      return "\n\t\t\t\t<div class='title'>" + STR("pop.shareTitle") + "</div>\n\t\t\t\t<div class='text'>" + h + "</div>\n\t\t\t\t<div class='content'>\n\t\t\t\t\t<div class='box-bt-haut'>" + i + "</div>\n\t\t\t\t</div>";
    },
    "onBoxOpenEnd": function () {
      createFocus("popup-mix-saved");
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      if (boxPopup.$popup.find(".bt.link").length) {
        boxPopup.$popup.find(".bt.link").on(pointerEventType.down, function (i) {
          var j = $(this);
          preventAction(function () {
            clickBtCopyLink(j);
          });
        });
      }
      if (boxPopup.$popup.find(".bt.mixlist").length) {
        if (appBrowser && !appBrowserSchool) {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (i) {
            dialogGetApp(i, true);
          });
        } else if (appBrowser && appBrowserSchool) {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (i) {
            callParentWindow("clickBtMixlist");
          });
        } else {
          boxPopup.$popup.find(".bt.mixlist").on(pointerEventType.down, function (i) {
            preventAction(clickBtGoToMixlist);
          });
        }
      }
      if (boxPopup.$popup.find(".bt.download").length) {
        if (appBrowser && !appBrowserSchool) {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function (i) {
            dialogGetApp(i, true);
          });
        } else if (appBrowser && appBrowserSchool) {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function () {
            callParentWindow("exportMP3");
          });
        } else {
          boxPopup.$popup.find(".bt.download").on(pointerEventType.down, function () {
            preventAction(popupConvertMix);
          });
        }
      }
      boxPopup.$popup.find(".bt.share").on(pointerEventType.down, function (i) {
        var j = $(this);
        preventAction(function () {
          clickBtShareGlobal(j);
        });
      });
      unlock();
    },
    "onBoxCloseStart": function () {
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    "onCloseComplete": function () {
      if (onGame) {
        createFocus("toolbar");
      }
      mixToShare = {};
    }
  });
}
function popupGlobalShare() {
  var h = $mixlist.isOpen() ? "action" : "action-back";
  boxPopup.open({
    "name": "global-share",
    "icntype": h,
    "class": miniPlayer ? "mini" : "",
    "content": "\n\t\t\t<div class='title'>" + STR("bt.share") + "</div>\n\t\t\t<div class='content'>\n\t\t\t\t<div class='box-bt-haut'>\n\t\t\t\t\t<div class='bt bt-haut mail'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-mail'></use></svg></div><div class='txt'>Mail</div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-haut color-facebook'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-facebook'></use></svg></div><div class='txt'>Facebook</div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-haut color-twitter color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-twitter'></use></svg></div><div class='txt'>Twitter</div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-haut link color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='txt'>" + STR("bt.link") + "</div><div class='hitzone'></div></div>\n\t\t\t\t</div>\n\t\t\t</div>",
    "onBoxOpenEnd": function () {
      createFocus("popup-global-share");
      boxPopup.$popup.find(".bt.mail").on(pointerEventType.down, function (i) {
        i.preventDefault();
        preventAction(function () {
          shareMix("mail");
        });
      });
      boxPopup.$popup.find(".bt.color-facebook").on(pointerEventType.down, function (i) {
        i.preventDefault();
        preventAction(function () {
          shareMix("facebook");
        });
      });
      boxPopup.$popup.find(".bt.color-twitter").on(pointerEventType.down, function (i) {
        i.preventDefault();
        preventAction(function () {
          shareMix("twitter");
        });
      });
      boxPopup.$popup.find(".bt.link").on(pointerEventType.down, function (i) {
        i.preventDefault();
        preventAction(function () {
          shareMix("clipboard");
        });
      });
      if ("action" == h) {
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      } else {
        boxPopup.$icon.on(pointerEventType.down, popupMixSaved);
      }
      unlock();
    },
    "onBoxCloseStart": function () {
      removeInFocusHistory("popup-global-share");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    "onBoxCloseEnd": function () {
      createFocusFromHistory();
      Spinner.reset();
    }
  });
}
function popupEmail() {
  boxPopup.open({
    "name": "email-form",
    "icntype": "action-back",
    "class": miniPlayer ? "mini" : "",
    "content": "\n\t\t\t<div class='title'>" + STR("pop.formEmailTitle") + "</div>\n\t\t\t<div class='content'>\n\t\t\t\t<form action='javascript:clickBtValidFormEmail()' method='post' target='_self' autocomplete='off'>\n\t\t\t\t\t<div class='formzone'>\n\t\t\t\t \t\t<div class=\"formline ic-name\"><div class=\"icn-box\"><svg class=\"icn-svg\"><use xlink:href=\"#ic-user-mini\"></use></svg></div><input type=\"text\" id=\"input-name\" placeholder=\"" + STR("txt.inputEmailSender") + "\" value=\"" + (null != user.djname && "undefined" !== user.djname ? user.djname : "") + "\" maxlength=\"26\" autocorrect=\"off\" spellcheck=\"false\"/></div>\n\t\t\t\t\t\t<div class='formline ic-email'><div class='icn-box'><svg class='icn-svg'><use xlink:href='#ic-at-mini'></use></svg></div><input type='email' id='input-email' placeholder='" + STR("txt.inputEmailRecipient") + "' value='' maxlength='254' autocorrect='off' spellcheck='false'/></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class='btzone'>\n\t\t\t\t\t\t<div class='bt bt-round bt-big valid'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-check'></use></svg></div><div class='hitzone'></div></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type='submit' style='visibility:hidden;position:absolute'/><div class='clear'></div>\n\t\t\t\t</form>\n\t\t\t</div>",
    "onBoxOpenEnd": function () {
      createFocus("popup-email-form");
      boxPopup.$icon.on(pointerEventType.down, popupGlobalShare);
      boxPopup.$popup.find(".bt.valid").on(pointerEventType.down, function (h) {
        h.preventDefault();
        preventAction(clickBtValidFormEmail);
      });
    },
    "onBoxCloseStart": function () {
      removeInFocusHistory("popup-email-form");
      deleteFocus();
      boxPopup.$icon.off();
      blurAll();
    },
    "onBoxCloseEnd": function () {
      formProcessing = false;
    }
  });
}
function clickBtValidFormEmail() {
  var h;
  var j;
  var k;
  var m;
  var p;
  var q;
  var v;
  var w;
  var x;
  var y;
  if (!(boxPopup.$popup.find(".formzone .formline input").hasClass("focused") || (h = "https://www.incredibox.com/mix/" + mixToShare.link, j = mixToShare.title, k = mixToShare.name, formProcessing))) {
    formProcessing = true;
    lock();
    m = boxPopup.$popup.find(".formzone #input-name");
    p = boxPopup.$popup.find(".formzone #input-email");
    q = m.val().substr(0x0, 0x1a);
    v = p.val().substr(0x0, 0xfe);
    q = cleanInputText(q, m);
    v = trim(v);
    y = q.split(" ").join("");
    w = v.toLowerCase();
    if ("" == y || /[^A-Za-z0-9\u00C0-\u017F '-]/.test(y)) {
      invalidField(m);
    } else if ("" != w && /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(w)) {
      boxPopup.$popup.find(".formzone input").blur();
      blurAll();
      x = boxPopup.$popup.find(".bt.valid");
      Spinner.add(x);
      if (hasNetwork) {
        (y = {}).expediteur = q;
        y.email = v;
        y.type = "composition";
        y.djName = k;
        y.title = j;
        y.link = h;
        y.src = window.electron ? "electron" : window.cordova ? "cordova" : "browser";
        y.lang = currentLanguage.split("-")[0x0];
        xhr("POST", "https://www.incredibox.com/ph3/send-mail.php", y, function (z) {
          if ("success" == z.state) {
            Spinner.reset();
            x.addClass("success");
            TweenMax.delayedCall(0.6, function () {
              unlock();
              popupGlobalShare();
            });
          } else {
            boxDialog.open(STR("pop.shareErrorText"), STR("pop.shareErrorTitle"), [STR("bt.ok")], [function () {
              Spinner.reset();
            }]);
            formProcessing = false;
            unlock();
          }
        }, function (z) {
          formProcessing = false;
          boxDialog.open(STR("pop.shareErrorText"), STR("pop.shareErrorTitle"), [STR("bt.ok")], [function () {
            Spinner.reset();
          }]);
          unlock();
        });
      } else {
        formProcessing = false;
        boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
          Spinner.reset();
        }]);
        unlock();
      }
    } else {
      invalidField(p);
    }
  }
}
function saveMixDB(g, h, i) {
  var k = i || h;
  var i = {
    "build": build,
    "machine": machine,
    "user": user
  };
  i.mix = g;
  $.ajax({
    "type": "POST",
    "url": "https://www.incredibox.com/ph3/save-mix-db.php",
    "data": i,
    "dataType": "json",
    "crossdomain": true,
    "success": function (l) {
      if ("success" == l.state) {
        g.online = true;
        g.link = l.link;
        g.id = l.id;
        g.datedb = l.datedb;
        localMixObject.saveMix(g);
        delete XHRmemotime.latest;
        if (h) {
          h();
        }
      } else {
        k();
        saveGA("mix", "save_db_failed");
      }
    },
    "error": function (l) {
      k();
    }
  });
}
function clickBtShareGlobal(g) {
  checkIfMixSavedThenShare("global", g || $(this));
}
function clickBtCopyLink(g) {
  checkIfMixSavedThenShare("clipboard", g || $(this));
}
function clickBtGoToMixlist() {
  backToHome(function () {
    openPlaylist("mixlist", true, true);
  });
}
function checkIfMixSavedThenShare(g, h) {
  lock();
  deleteFocus();
  Spinner.add(h);
  if (hasNetwork) {
    if (true !== mixToShare.mymix || mixToShare.online) {
      shareMix(g);
    } else {
      saveMixDB(mixToShare, function () {
        $scrollbox.find(".line[data-key='mix-" + mixToShare.link + "']").removeClass("isoffline");
        shareMix(g);
      }, function (j) {
        boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")], []);
        Spinner.reset();
        unlock();
      });
    }
  } else {
    h = $mixlist.hasClass("show") ? STR("pop.noCoShareText") : STR("pop.noCoShareText") + " " + STR("pop.noCoShareText2");
    boxDialog.open(h, STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
    unlock();
  }
}
function shareMix(g, h) {
  if (null == h && window.cordova && window.plugins && window.plugins.socialsharing) {
    TweenMax.delayedCall(0.5, shareMix, [g, true]);
    return false;
  }
  if ("global" != g) {
    Spinner.reset();
  }
  var h = mixToShare.name;
  var k = mixToShare.title;
  var q = "https://www.incredibox.com/mix/" + mixToShare.link;
  var v = "https://www.incredibox.com/img/share/share-v" + app.version + "-en@2x.png";
  var w = "https://www.incredibox.com/img/share/share-v" + app.version + "-en.png";
  var x = STR("pop.shareSubject");
  var h = STR("pop.sharePresentMix").split("%{name}").join(h).split("%{title}").join(k);
  var k = STR("pop.shareTextLike");
  var y = STR("pop.shareTextBeCool");
  var z = h + "\n" + q + "\n\n" + k + "\n\n---------------------------\n\nDownload the app: https://www.incredibox.com/info/store";
  var k = y + " #incredibox";
  var A = h + " " + y + " #incredibox";
  var B = "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(q);
  var C = "https://twitter.com/intent/tweet?text=" + encodeURIComponent(k) + "&url=" + encodeURIComponent(q) + "&hashtags=musicApp,beatbox,pumpItUp&related=incredibox_%3AThe%20Incredibox%20official%20Twitter%20account!";
  switch (g) {
    case "mail":
      if (window.cordova && window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareViaEmail(z, x, null, null, null, [w], E, F);
      } else {
        popupEmail();
      }
      break;
    case "facebook":
      if (window.electron) {
        openURL(B);
      } else {
        windowPopup(B, 0x230, 0x15e, true);
      }
      break;
    case "twitter":
      if (window.electron) {
        openURL(C);
      } else {
        windowPopup(C, 0x230, 0x15e, true);
      }
      break;
    case "clipboard":
      if (window.electron) {
        electron.ipc.clipboard(q).then(() => D())["catch"](G => popupGeneralError({
          "error": "clipboard"
        }));
      } else if (window.cordova && cordova.plugins && cordova.plugins.clipboard) {
        cordova.plugins.clipboard.copy(q, D, F);
      } else {
        copyToClipboard(q);
        D(q);
      }
      break;
    case "global":
      if (window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareWithOptions({
          "message": A,
          "subject": x,
          "url": q,
          "files": [v]
        }, G => {}, G => {
          F(G);
        });
        E();
      } else {
        popupGlobalShare();
        Spinner.reset();
      }
      break;
    case "download":
      openURL("https://www.incredibox.com/file/" + mixToShare.link);
      E();
  }
  function D(G) {
    var H;
    if (appBrowser) {
      G = "<div class='formline'><div class='selectarea'>" + G.replace("https://www.", "") + "</div></div>";
      H = isIOS ? "" : STR("pop.shareClipboard");
      boxDialog.open(G + H, STR("bt.link"), [STR("bt.ok")], [], false, false, "dialog-clipboard");
    } else {
      boxDialog.open(STR("pop.shareClipboard"), STR("pop.infoTitle"), [STR("bt.ok")], [], false, false, "dialog-clipboard");
    }
    E();
    unlock();
  }
  function E(G) {
    Spinner.reset();
    unlock();
  }
  function F(G) {
    popupGeneralError({
      "txt": STR("pop.shareErrorText"),
      "error": G
    });
    Spinner.reset();
    unlock();
  }
}
function sendFeedback() {
  var h = "feedback@incredibox.com";
  var i = "App feedback";
  var j = "<br><br>----------";
  if (window.cordova) {
    i += " - " + (appleModel[device.model] || device.model) + " " + device.platform + " " + device.version + (isIOSMac ? " (iOS on Mac)" : "");
  } else {
    i += " - " + machine.deviceModel + " " + machine.osName + " " + machine.osVersion;
  }
  j = (j = (j = (j = (j = (j = (j = (j = (j = (j = (j = (j += "<br>Store : steam") + "<br>From : " + ucwords("desktop") + " - " + (undefined !== app ? app.name + " - v" + app.version : "index")) + "<br>Version : " + "0.7.0") + "<br>DJ Name : " + user.djname) + "<br>Ids : " + machine.uuid + " - " + user.guid + (trustAppMobile ? " - " + device.serial : "")) + "<br>Lang : " + user.lang + " (" + currentLanguage + ")") + "<br>Device : " + machine.deviceModel + " - " + document.body.clientWidth + "x" + document.body.clientHeight + " - " + (window.devicePixelRatio || 0x1)) + "<br>System : " + machine.osName + " - " + machine.osVersion + (isIOSMac ? " - iOS on Mac" : "")) + "<br>WV : " + machine.browserFullVersion) + "<br>Anime size " + animSize + " - cnv density " + 0x2 + "<br>fileExt : " + sndExt + " " + vidExt) + "<br>Evt : " + pointerEventType.down) + "<br>SpRate : " + (window.audioCtx && window.audioCtx.sampleRate ? audioCtx.sampleRate : "") + " - " + (window.audioCtx && window.audioCtx.baseLatency ? audioCtx.baseLatency : "");
  if (window.cordova && window.plugins && window.plugins.socialsharing) {
    j = (j = (j += "<br>----------") + "<br>App.device : " + (appleModel[device.model] || device.model) + " - " + device.manufacturer) + "<br>App.system : " + device.platform + " - " + device.version;
    window.plugins.socialsharing.shareViaEmail("<br><br><br><i>" + j + "</i>", i, h, null, null, [], () => {}, k => {
      popupGeneralError({
        "txt": STR("pop.shareErrorText"),
        "error": k
      });
    });
  } else {
    j = j.replace(/<br>/g, "\r\n");
    h = "mailto:" + h + "?subject=" + i + "&body=" + encodeURIComponent(j);
    if (window.electron) {
      electron.ipc.openURL(h);
    } else {
      window.location.href = h;
    }
  }
}
var languageListe = {
  "en-US": "English",
  fr: "Français",
  es: "Español",
  "pt-BR": "Português",
  it: "Italiano",
  de: "Deutsch",
  no: "Norsk",
  pl: "Polski",
  ru: "Русский",
  ar: "العربية",
  tr: "Türkçe",
  ko: "한국어",
  ja: "日本語",
  "zh-CN": "简体中文",
  "zh-TW": "繁體中文",
  "hi-IN": "हिंदी",
  "bn-IN": "বাংলা",
  "ta-IN": 'தமிழ்',
  "te-IN": "తెలుగు",
  th: "ไทย",
  vi: "Tiếng Việt",
  id: "Indonesia",
  ms: "Melayu"
};
function initLanguage() {
  currentLanguage = defaultLanguage = "en-US";
  var h;
  var i = "";
  for (h in languageListe) i += "<div class=\"bt bt-soft\" id=\"bt-lang-" + h + "\"><div class=\"bck\"><div class=\"txt\">" + languageListe[h] + "</div></div><div class=\"hitzone\"></div></div>";
  $("#pop-language .box-lang").append(i);
}
function checkLanguageCode(g) {
  var i = g.toLowerCase();
  return -0x1 < i.indexOf("en-") ? "en-US" : -0x1 < i.indexOf("pt-") ? "pt-BR" : -0x1 < i.indexOf("fr-") ? "fr" : -0x1 < i.indexOf("es-") ? "es" : -0x1 < i.indexOf("it-") ? "it" : -0x1 < i.indexOf("de-") ? "de" : -0x1 < i.indexOf("cn") ? "zh-CN" : "zh-hant" == i || "zh-hk" == i || "zh-tw" == i ? "zh-TW" : "zh-hans" == i || "zh-cn" == i ? "zh-CN" : "en" == i ? "en-US" : "pt" == i ? "pt-BR" : "zh" == i ? "zh-CN" : "hi" == i ? "hi-IN" : "bn" == i ? "bn-IN" : "ta" == i ? "ta-IN" : "te" == i ? "te-IN" : "nb" == i || "nn" == i ? "no" : g;
}
function debugLanguage() {}
function changeDomTxt() {
  var h;
  var i = translateObj.trad;
  $("#pop-info .tab#tab-tuto .txt").html(i.bt.tuto);
  $("#pop-info #bloc-tuto1 .txt span").html(i.txt.tuto1);
  $("#pop-info #bloc-tuto2 .txt span").html(i.txt.tuto2);
  $("#pop-info #bloc-tuto3 .txt span").html(i.txt.tuto3);
  $("#pop-info #bloc-tuto4 .txt span").html(i.txt.tuto4);
  $("#pop-info #bloc-tuto5 .txt span").html(i.txt.tuto5);
  $("#pop-info .tab#tab-credit .txt").html(i.bt.credit);
  $("#pop-info #pop-credit #copy").html(i.txt.copyright);
  $("#pop-info #pop-credit #team").html("<div class='box-team'>Allan Durand<br>Romain Delambily<br>Incredible Polo</div><div class='box-team'>" + i.txt.team + "</div>");
  $("#pop-info #pop-credit .title").html(i.txt.stayTuned);
  $("#pop-info #pop-credit #bt-feedback .txt").html(i.bt.feedback);
  $("#pop-info #pop-credit #bt-rating .txt").html(i.bt.rate);
  $("#pop-info #pop-credit #bt-privacy .txt").html(i.bt.privacy);
  $("#pop-info .tab#tab-follow .txt").html(i.bt.follow);
  $("#pop-info #pop-follow .title#git").html(i.bt.git);
  $("#pop-info #pop-follow .title#shop").html(i.txt.visitShop);
  $("#pop-param .tab#tab-language .txt").html(i.txt.language);
  $("#pop-param .tab#tab-setting .txt").html(i.bt.param);
  $("#pop-param #pop-setting #param-dark .label").html(i.txt.modeDark);
  $("#pop-param #pop-setting #param-safe .label").html(i.txt.modeSafe);
  $("#pop-param #pop-setting #param-reset .label").html(i.txt.resetBonus);
  $("#pop-param #pop-setting #param-reset .bt .txt").html(i.bt.reset);
  $("#pop-param #pop-setting #param-recover .label").html(i.txt.recoverAllMix);
  $("#pop-param #pop-setting #param-recover .bt .txt").html(i.bt.recover);
  $("#pp-box #bt-ppaccept .txt").html(i.bt.accept);
  $("#pp-box #bt-pprefuse .txt").html(i.bt.refuse);
  if (pageApp) {
    $("#mixlist .tab#tab-latest .txt").html(i.bt.latest);
    $("#mixlist .tab#tab-top50 .txt").html(i.bt.top50);
    $("#mixlist .tab#tab-search .txt").html(i.bt.search);
    $("#mixlist .tab#tab-mixlist .txt").html(i.bt.myMix);
    $("#mixlist #box-search #input-search").attr("placeholder", i.txt.inputSearch);
    $("#mixlist #box-search #input-search").val("");
    lastSearch = "";
    cleanListSearch();
    $("#mixlist .tab-filter #bt-name .txt").html(i.bt.djname);
    $("#mixlist .tab-filter #bt-title .txt").html(i.bt.mixtitle);
    $("#mixlist .tab-filter #bt-dedi .txt").html(i.txt.dedicatedTo.split("%{name}").join(""));
    $("#mixlist .tab-filter #bt-day .txt").html(i.bt.day);
    $("#mixlist .tab-filter #bt-week .txt").html(i.bt.week);
    $("#mixlist .tab-filter #bt-month .txt").html(i.bt.month);
    $("#mixlist .tab-filter #bt-year .txt").html(i.bt.year);
    $("#mixlist .scroll:not(#list-mymix) .infoListmix").html(i.txt.top50Info);
    $("#mixlist #latestbox .boxinfo").html(i.txt.latestMixInfo.split("<br>")[0x0]);
    $("#mixlist #list-day .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-week .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-month .boxinfo").html(i.txt.top50Info);
    $("#mixlist #list-year .boxinfo").html(i.txt.top50Info);
    $("#mixlist .box-info .offline .txt").html(i.txt.offline);
    $("#watch-info #bt-save .txt").html(i.bt.save);
    $("#watch-info .offline .txt").html(i.txt.offline);
    if (null != localMixObject && "undefined" !== localMixObject) {
      h = 0x0 == localMixObject.getMixlist().length ? STR("txt.mixlistEmpty") : STR("txt.mixlistInfo");
      $("#list-mymix .boxinfo", $poplist).html(h);
    }
    $("#watch-info .date, .box-info .date").each(function () {
      var j;
      if ($(this).attr("data-date")) {
        j = $(this).attr("data-date");
        $(this).html(getStringDate(j));
      }
    });
    $("#pop-switch .title").html(i.txt.enjoyVersion);
    $("#game #box-bt1 #bt-stop .txt").html(i.bt.menuRestart);
    $("#game #box-bt1 #bt-random .txt").html(i.bt.menuRandom);
    $("#game #box-bt1 #bt-record .txt").html(i.bt.menuRecord);
  } else {
    $("#page-splash #sp-baseline").html(STR("txt.baseline"));
    $("#page-splash #sp-experience").html(STR("txt.sp-experience"));
    $("#page-splash #sp-choose").html(STR("txt.selectVersion"));
  }
  if (null != boxPopup && "undefined" !== boxPopup && boxPopup.isOpen()) {
    boxPopup.refresh();
  }
  if (window.electron) {
    electron.ipc.loadLang(i);
  }
}
function loadLanguage(g) {
  var i = g && g.lang ? g.lang : null;
  var j = null != i && "undefined" !== i && null != languageListe[i] && "undefined" !== languageListe[i] ? i : null != user.lang && "undefined" !== user.lang && "" != user.lang ? user.lang : "" != machine.language ? machine.language : defaultLanguage;
  if (appBrowser) {
    j = getParameterByName("lang") ? getParameterByName("lang") : machine.language;
  }
  if (window.electron && (null == i || "undefined" === i) && "" == user.lang && null != electron.vars.lang && "undefined" !== electron.vars.lang) {
    j = checkLanguageCode(electron.vars.lang);
  }
  j = checkLanguageCode(j);
  if (null == languageListe[j] || "undefined" === languageListe[j]) {
    j = defaultLanguage;
  }
  $("#pop-language .box-lang .bt-soft#bt-lang-" + j).addClass("active");
  if (null != translateObj && "undefined" !== translateObj) {
    $("body").removeClass("lang-" + currentLanguage);
  }
  var i = new XMLHttpRequest();
  function k() {
    if (g && g.fail) {
      g.fail();
    } else {
      loadLanguageFailed();
    }
    return false;
  }
  i.addEventListener("load", function () {
    if (0xc8 != this.status) {
      k();
      return false;
    }
    translateObj = jsonDecode(this.responseText);
    setUserInfo({
      "lang": currentLanguage = j
    });
    $("body").addClass("lang-" + currentLanguage);
    if (g && g.cbck) {
      g.cbck();
    }
    saveGA("language", "load_success", currentLanguage);
  }, false);
  i.addEventListener("error", k, false);
  i.open("GET", "./lang/" + j + ".json");
  i.send();
}
function loadLanguageFailed() {
  setUserInfo({
    "lang": defaultLanguage
  });
  boxDialog.open("Impossible to load language settings. Please reload or force to quit the app then retry.", "ERROR", ["Reload"], [gotoAppUrl], true);
}
function clickBtLang(g) {
  var g = $(g.currentTarget);
  var i = g.attr("id").replace("bt-lang-", "");
  if (!g.hasClass("active")) {
    $("#pop-language .box-lang .bt").removeClass("active");
    g.addClass("active");
    loadLanguage({
      "cbck": changeDomTxt,
      "lang": i
    });
  }
}
function STR(g) {
  var j = g.split(".");
  var k = translateObj.trad;
  var l = 0x0;
  for (var m = j.length; l < m; l++) {
    var p = j[l];
    if (!(p in k)) {
      return;
    }
    k = k[p];
  }
  return k;
}
var tabBuffer;
var tabAnime;
var nbSound;
var nbSoundBonus;
var nbSoundTotal;
var nbBonus;
var nbAnime;
var nbData;
var cntTotalAsset;
var nbTotalAsset;
var tabToLoad;
var cntLoad;
var listImages = {};
function preparerArray() {
  frameTotal = app.totalframe;
  frameHalf = frameTotal / 0x2;
  tabBuffer = {};
  tabAnime = [];
  nbSound = app.animearray.length;
  nbSoundBonus = app.bonusarray.length;
  nbSoundTotal = 0x2 * nbSound + nbSoundBonus + 0x1;
  nbBonus = app.bonusarray.length;
  nbAnime = app.animearray.length;
  nbData = app.animearray.length;
  nbTotalAsset = nbSoundTotal + nbBonus + nbAnime + nbData + 0x2;
  tabToLoad = [];
  var h = cntLoad = cntTotalAsset = 0x0;
  var i = "";
  tabBuffer.sound = [];
  for (h = 0x0; h < nbSound; h++) {
    tabBuffer.sound.push({
      "sndA": 0x0,
      "sndB": 0x0
    });
    tabAnime.push({
      "imgSprite": null,
      "ratio": null,
      "width": null,
      "height": null,
      "headWidth": null,
      "headHeight": null,
      "totalFrames": null,
      "imgData": null,
      "color": app.animearray[h].color
    });
  }
  tabBuffer.bonus = [];
  for (h = 0x0; h < nbSoundBonus; h++) {
    tabBuffer.bonus.push({
      "snd": 0x0,
      "aspire": 0x0
    });
  }
  tabBuffer.metro = [{
    "snd": 0x0
  }];
  tabToLoad = [{
    "func": loadImage,
    "params": {
      "keyname": "spritePolo",
      "path": "./" + app.folder +(1 == animSize ? appBrowserSchool ? "img/polo-sprite-tshirt.png" : "img/polo-sprite.png" : nameToHD(appBrowserSchool ? "img/polo-sprite-tshirt.png" : "img/polo-sprite.png")) // bringing back old polo format for easier modding!
    }
  }, {
    "func": loadImage,
    "params": {
      "keyname": "gameBck",
      "path": "./" + app.folder + "img/game-bck@2x.jpg"
    }
  }, {
    "func": loadImage,
    "params": {
      "keyname": "gamePicto",
      "path": "./" + app.folder + "img/game-picto@2x.png"
    }
  }];
  if (miniPlayer && 0x4 < appVersion) {
    tabToLoad.pop();
  }
  for (h = 0x0; h < nbSound; h++) {
    if (app.animearray[h].uniqsnd) {
      tabToLoad.push({
        "func": loadSound,
        "params": ["sound", app.animearray[h].soundA, h, "sndA", true]
      });
      nbTotalAsset--;
    } else {
      tabToLoad.push({
        "func": loadSound,
        "params": ["sound", app.animearray[h].soundA, h, "sndA"]
      });
      tabToLoad.push({
        "func": loadSound,
        "params": ["sound", app.animearray[h].soundB, h, "sndB"]
      });
    }
  }
  for (h = 0x0; h < nbSoundBonus; h++) {
    tabToLoad.push({
      "func": loadSound,
      "params": ["bonus", app.bonusarray[h].sound, h, "snd"]
    });
    if (app.bonusarray[h].aspire) {
      tabToLoad.push({
        "func": loadSound,
        "params": ["bonus", app.bonusarray[h].aspire, h, "aspire"]
      });
    }
    i = 0x1 == animSize ? app.bonusarray[h].src : nameToHD(app.bonusarray[h].src);
    tabToLoad.push({
      "func": loadVideoBonus,
      "params": [i, h]
    });
  }
  for (h = 0x0; h < nbAnime; h++) {
    i = app.animearray[h].animeData;
    tabToLoad.push({
      "func": loadAnimeData,
      "params": [i, h]
    });
    i = 0x1 == animSize ? app.animearray[h].anime : nameToHD(app.animearray[h].anime);
    tabToLoad.push({
      "func": loadAnime,
      "params": [i, h]
    });
  }
  checkTabToLoad();
}
function checkTabToLoad() {
  updatePreload();
  if (cntLoad < tabToLoad.length) {
    tabToLoad[cntLoad].func(tabToLoad[cntLoad].params);
    cntLoad++;
  }
}
function updatePreload() {
  cntTotalAsset++;
  var g = (g = Math.round(cntTotalAsset / nbTotalAsset * 0x64)) < 0x5 ? 0x5 : g;
  $homeLoadbar.css({
    "width": String(0x64 < g ? 0x64 : g) + "%"
  });
  if (cntTotalAsset == nbTotalAsset && (createGame(), hideHomeLoadbar(), isIframe)) {
    callParentWindow("appLoadingComplete");
  }
}
function loadSound(g) {
  var h = g[0x0];
  var j = g[0x1];
  var k = g[0x2];
  var l = g[0x3];
  var m = !(null == g[0x4] || "undefined" === g[0x4]) && g[0x4];
  var p = "./" + app.folder + "sound/" + sndExt + "/" + j + "." + sndExt;
  var q = new XMLHttpRequest();
  q.open("GET", p, true);
  q.responseType = "arraybuffer";
  q.onload = function () {
    audioCtx.decodeAudioData(q.response, function (v) {
      tabBuffer[h][k][l] = v;
      if (m) {
        tabBuffer[h][k].sndB = v;
      }
      checkTabToLoad();
    }, function (v) {
      popupGeneralError({
        "error": "Decoding " + p.replace("./", ""),
        "action": "reload"
      });
    });
  };
  q.onerror = function () {
    popupGeneralError({
      "error": "XHR " + p.replace("./", ""),
      "action": "reload"
    });
  };
  q.send();
}
function loadAnimeData(g) {
  var i = g[0x0];
  var j = g[0x1];
  var k = "./" + app.folder + "anime/" + i;
  var l = new XMLHttpRequest();
  l.open("GET", k, true);
  l.responseType = "json";
  l.onload = function () {
    var m = l.response;
    var p = m.arrayFrame;
    var q = p.length;
    var u = [];
    for (var v = 0x0; v < q; v++) {
      var w = p[v].prop.split(",");
      u.push([parseInt(w[0x0]), parseInt(w[0x1]), parseInt(w[0x2]), parseInt(w[0x3])]);
    }
    tabAnime[j].imgData = u;
    tabAnime[j].headHeight = m.headHeight;
    checkTabToLoad();
  };
  l.onerror = function () {
    popupGeneralError({
      "error": "XHR " + k.replace("./", ""),
      "action": "reload"
    });
  };
  l.send();
}
function loadAnime(g) {
  var j = g[0x0];
  var k = g[0x1];
  var l = "./" + app.folder + "anime/" + j;
  var m = new Image();
  m.onload = function () {
    tabAnime[k].imgSprite = m;
    checkTabToLoad();
  };
  m.onerror = function () {
    popupGeneralError({
      "error": "Load " + l.replace("./", ""),
      "action": "reload"
    });
  };
  m.src = l;
}
function loadVideoBonus(g) {
  var i = g[0x0];
  var j = "./" + app.folder + "video/" + i;
  var k = g[0x1] + 0x1;
  var g = new XMLHttpRequest();
  g.onload = function () {
    var l = this.response;
    var m = document.createElement("video");
    m.src = window.URL.createObjectURL(l);
    m.type = "video/" + vidExt;
    m.muted = true;
    m.setAttribute("playsinline", "playsinline");
    m.setAttribute("webkit-playsinline", "webkit-playsinline");
    m.setAttribute("muted", "");
    m.onerror = function (p) {
      popupGeneralError({
        "error": "Video " + i
      });
    };
    m.oncanplaythrough = function (p) {
      m.oncanplaythrough = null;
      $boxVideo.prepend("<div class='video' id='video" + k + "'></div>");
      $boxVideo.find(".video#video" + k).append(m);
      checkTabToLoad();
    };
    m.load();
  };
  g.onerror = function () {
    popupGeneralError({
      "error": "XHR " + j.replace("./", ""),
      "action": "reload"
    });
  };
  g.open("GET", j);
  g.responseType = "blob";
  g.send();
}
function preloadImageForCSS(g) {
  var h = g.images.length;
  var j = 0x0;
  var k = {};
  function l() {
    var m = new Image();
    var p = g.images[j][0x0];
    var q = g.images[j][0x1];
    m.onload = function () {
      k[p] = this;
      j++;
      g.progress(Math.floor(0x64 * j / h));
      if (j == h) {
        g.good(k);
      } else {
        l();
      }
    };
    m.onerror = function () {
      var u = q.split("/").pop();
      g.nope(u);
    };
    m.src = q;
  }
  l();
}
function loadImage(g) {
  var i = new Image();
  i.onload = function () {
    listImages[g.keyname] = this;
    checkTabToLoad();
  };
  i.onerror = function () {
    popupGeneralError({
      "error": "Load " + g.path.replace("./", ""),
      "action": "reload"
    });
  };
  i.src = g.path;
}
var CloudSync = function () {
  this.sync = function (g) {
    if (null != g) {
      "undefined" !== g;
    }
  };
  this.save = nada;
  this.remove = nada;
  return this;
};
var LocalStorage = function () {
  var h = this;
  this.setItem = function (i, j, k) {
    window.localStorage.setItem(i, j);
    if (k) {
      cloud.save(i, j);
    }
  };
  this.getItem = function (i) {
    return window.localStorage.getItem(i);
  };
  this.getAllItem = function () {
    return window.localStorage;
  };
  this.removeItem = function (i, j) {
    window.localStorage.removeItem(i);
    if (j) {
      cloud.remove(i);
    }
  };
  this.clear = function () {
    window.localStorage.clear();
  };
  this.weight = function () {
    var j;
    var k;
    var l = window.localStorage;
    var m = 0x0;
    var p = "LS | --------------------------\n";
    for (k in l) {
      m += j = 0x2 * (l[k].length + k.length);
      p += "LS | " + k.substr(0x0, 0x32) + " = " + (j / 0x400).toFixed(0x2) + " KB\n";
    }
    return p = p + ("LS | Total = " + (m / 0x400).toFixed(0x2) + " KB\n") + "LS | --------------------------";
  };
  this.restoreMixFromDB = function (i) {
    var k = {
      "uuid": getListUUID(),
      "guid": {
        "guid": storage.getItem("user-guid") || "",
        "djname": storage.getItem("user-djname") || "",
        "lang": storage.getItem("user-lang") || ""
      }.guid,
      "mixids": localMixObject.getAllMixId()
    };
    var l = i || nada;
    if (hasNetwork && (k.uuid.length || k.user.guid || k.mixids.length)) {
      $.ajax({
        "type": "POST",
        "url": "https://www.incredibox.com/ph3/get-all-mix-db.php",
        "data": k,
        "dataType": "json",
        "crossdomain": true,
        "success": function (m) {
          var q;
          if ("success" == m.state) {
            m.mixlist.forEach(function (r) {
              r.synced = true;
              r.online = true;
              r.mymix = true;
              localMixObject.saveMix(r);
              if (localMixObject.getMix("fav-" + r.link)) {
                localMixObject.saveMix(r, true);
              }
            });
            localMixObject.getAllMix().forEach(function (r) {
              if (r.mymix && r.online && !r.synced) {
                h.removeItem("mix-" + r.link);
                h.removeItem("fav-" + r.link);
                0x0;
              }
            });
            q = getListUUID();
            q.forEach(function (r) {
              if (!(r.toUpperCase() == machine.uuid.toUpperCase() || existInArray(m.uuidlist, r, false))) {
                h.removeItem("uuid-" + r, true);
                0x0;
              }
            });
            m.uuidlist.forEach(function (r) {
              h.setItem("uuid-" + r.toUpperCase(), "", true);
              0x0;
            });
            l({
              "msg": "ok",
              "nb": m.mixlist.length
            });
          } else {
            l({
              "msg": "bug"
            });
          }
        },
        "error": function (m) {
          l({
            "msg": "error"
          });
        }
      });
    }
  };
  return this;
};
var LocalMixObject = function () {
  var h = this;
  this.saveMix = function (i, j) {
    var k;
    var j = !!(null != j && "undefined" !== j) && j;
    return !!(null != i && "undefined" !== i) && (k = -0x1 == i.link.indexOf("mix-") ? "mix-" + i.link : i.link, k = j ? k.replace("mix-", "fav-") : k, j = null == i || "undefined" === i ? null : JSON.stringify(i), storage.setItem(k, j), true);
  };
  this.deleteMix = function (i) {
    return !!(null != storage.getItem(i) && "undefined" !== storage.getItem(i)) && (storage.removeItem(i, true), true);
  };
  this.deleteMixById = function (i) {
    var j;
    var k = h.getAllMix(true);
    var l = h.getAllMix(true, true);
    for (j in k) if (k[j].id == i) {
      h.deleteMix("mix-" + k[j].link);
      h.deleteMix("fav-" + k[j].link);
    }
    for (j in l) if (l[j].id == i) {
      h.deleteMix("fav-" + l[j].link);
      h.deleteMix("mix-" + l[j].link);
    }
  };
  this.getMix = function (i) {
    return !!(null != storage.getItem(i) && "undefined" !== storage.getItem(i)) && jsonDecode(storage.getItem(i));
  };
  this.getAllMix = function (j, k) {
    var l;
    var m;
    var p = !!(null != j && "undefined" !== j) && j;
    var j = !!(null != k && "undefined" !== k) && k;
    var q = [];
    var u = storage.getAllItem();
    var v = j ? "fav-" : "mix-";
    for (l in u) if (-0x1 != l.indexOf(v)) {
      if (null == (m = jsonDecode(u[l])).datedb || "undefined" === (m = jsonDecode(u[l])).datedb) {
        m.datedb = null != m.date && "undefined" !== m.date ? m.date : getDateNow();
      }
      if (!(p && -0x1 == l.indexOf("v" + app.version) && -0x1 == l.indexOf("-IOSV" + app.version))) {
        q.push(m);
      }
    }
    return q;
  };
  this.saveMixOffline = function () {
    var i;
    var j = h.getAllMix();
    for (i in j) {
      var k = j[i];
      if (!k.online && k.mymix) {
        saveMixDB(k);
      }
    }
  };
  this.getAllMixId = function () {
    var i;
    var j = h.getAllMix(false);
    var k = [];
    for (i in j) {
      var l = j[i];
      if (l.id) {
        k.push(parseInt(l.id));
      }
    }
    return k;
  };
  this.getMixlist = function () {
    var i = h.getAllMix(true, false);
    return h.sortArrayMix(i);
  };
  this.getFavlist = function () {
    var i = h.getAllMix(true, true);
    return h.sortArrayMix(i);
  };
  this.sortArrayMix = function (i, j) {
    i.sort(function (l, m) {
      return m.datedb > l.datedb ? 0x1 : m.datedb < l.datedb ? -0x1 : 0x0;
    });
    return i = true === j ? i.reverse() : i;
  };
  this.getLastMix = function () {
    var i = h.getAllMix(false);
    var j = i.length;
    return 0x0 < j ? i[j - 0x1] : null;
  };
  this.getLastDjName = function () {
    var i = h.getLastMix();
    return null != i && "undefined" !== i ? i.name : "";
  };
  this.deleteAllMix = function () {
    for (var i in storage.getAllItem()) if (!(-0x1 == i.indexOf("mix-") && -0x1 == i.indexOf("fav-"))) {
      storage.removeItem(i);
    }
  };
  this.getStatMixOnline = function (j) {
    var l = h.getAllMixId();
    if (l.length) {
      xhr("GET", "https://www.incredibox.com/ph3/get-stat-mix.php", {
        "id": l
      }, function (m) {
        if ("success" == m.state) {
          XHRmemotime.mymix = new Date();
          var m = m.list;
          var q = [];
          m.forEach(function (u) {
            q.push(parseInt(u.id));
            var w = h.getMix("mix-" + u.link);
            w.id = u.id;
            w.newnbview = u.nbview;
            w.newnblike = u.nblike;
            h.saveMix(w);
          });
          if (q.length < l.length) {
            var r;
            var m = uniqueBetweenArray(q, l);
            for (r of m) h.deleteMixById(r);
          }
          if (undefined !== j) {
            j();
          }
        }
      }, function (m) {});
    } else if (undefined !== j) {
      j();
    }
  };
  this.getStatFavOnline = function (j) {
    var l = h.getFavlist();
    var m = [];
    l.forEach(function (p) {
      if (!(p.mymix && !p.online || !(null != p.id && "undefined" !== p.id))) {
        m.push(parseInt(p.id));
      }
    });
    if (m.length) {
      xhr("GET", "https://www.incredibox.com/ph3/get-stat-mix.php", {
        "id": m
      }, function (p) {
        if ("success" == p.state) {
          XHRmemotime.myfav = new Date();
          var p = p.list;
          var q = [];
          p.forEach(function (s) {
            q.push(parseInt(s.id));
            var u = h.getMix("fav-" + s.link);
            u.id = s.id;
            u.nbview = s.nbview;
            u.nblike = s.nblike;
            h.saveMix(u, true);
          });
          if (q.length < m.length) {
            var r;
            var p = uniqueBetweenArray(q, m);
            for (r of p) h.deleteMixById(r);
          }
          if (undefined !== j) {
            j();
          }
        }
      }, function (p) {});
    } else if (undefined !== j) {
      j();
    }
  };
};
var BonusObject = function (j, q, z) {
  var B;
  var E = this;
  var F = j + 0x1;
  var G = $("#bt-bonus-" + F);
  var H = G.find(".quarter");
  var I = $(".circle", G);
  var J = $("#box-video .video#video" + F);
  var K = $("#box-video .video#video" + F + " video")[0x0];
  var L = false;
  var M = false;
  var N = new SoundObject("bonus" + F);
  var O = new SoundObject("aspire" + F);
  var P = z.snd;
  var Q = z.aspire;
  var R = numberArray(q.code.split(","));
  var S = R.length;
  var U = [];
  var V = 0x0;
  var W = 0x0;
  this.$div = J;
  this.tabSVG = U;
  this.video = K;
  this.found = false;
  this.unlock = false;
  E.cntCode = 0x0;
  E.nbLoop = q.loop;
  E.sound = N;
  this.init = function () {
    var a1 = storage.getItem("v" + appVersion + "-bonus-complete") || 0x0;
    if (0x0 == E.getId() || E.getId() <= a1) {
      E.unlockme();
    } else {
      E.lockme();
    }
    for (var a2 = 0x0; a2 < S; a2++) {
      var a3 = {
        "obj": $(".svg.q" + (a2 + 0x1), H),
        "col": $(".svg.q" + (a2 + 0x1) + " svg", H).css("fill")
      };
      U.push(a3);
    }
    E.modeTouch();
  };
  this.reinit = function () {
    E.hideLoader();
    G.removeClass("inprogress found bounce");
    H.find(".svg").removeClass("directshow show hide");
    E.found = false;
    E.inprogress = false;
    E.cntCode = 0x0;
    E.modeTouch();
  };
  this.modeTouch = function () {
    G.off().on(pointerEventType.down, E.touchStart);
  };
  this.modeClick = function () {
    G.off().on(pointerEventType.down, E.launchVideo);
  };
  this.unlockme = function () {
    G.addClass("unlock");
    this.unlock = true;
  };
  this.lockme = function () {
    G.removeClass("unlock");
    this.unlock = false;
  };
  this.getId = function () {
    return F - 0x1;
  };
  this.getCode = function () {
    return R;
  };
  var j = G.find(".box-loader .zone");
  var X = j.find(".loader");
  var Y = j.find(".bar");
  var Z = false;
  this.showLoader = function () {
    Z = true;
    X.addClass("show");
    Y.css({
      "animation-duration": decimal(getRemainingTime(!!app.bonusloopA && !boucleA) / 0x3e8, 0x2) + "s"
    });
    Y.addClass("progress");
  };
  this.hideLoader = function () {
    if (Z) {
      Z = false;
      X.removeClass("show");
      Y.removeClass("progress");
    }
  };
  var a0 = new ClockObject("canvas-bt-bonus-" + F);
  a0.init(0x2b, 0x2b, 0x1, 0x23, 0x10);
  this.playAspiration = function (a1) {
    a1 = null != a1 && "undefined" !== a1 ? a1 : 0x0;
    O.prepare(Q, 0x0);
    O.play(a1, true);
    M = true;
  };
  this.stopAspiration = function () {
    if (M) {
      O.stop(true);
      M = false;
    }
  };
  this.hasCode = function (a1) {
    return -0x1 != R.indexOf(a1);
  };
  this.checkCode = function (a1, a2) {
    a1 = R.indexOf(a1);
    if (-0x1 < a1) {
      if (a2) {
        E.showQuarter(a1);
      } else {
        E.hideQuarter(a1);
      }
    }
  };
  this.showQuarter = function (a1) {
    E.cntCode++;
    var a2 = U[a1].obj;
    var a1 = U[a1].col;
    if (E.cntCode == S && E.unlock) {
      E.hasBeenFound();
    }
    if (0x1 == E.cntCode) {
      E.inprogress = true;
      G.addClass("inprogress");
    }
    I.addClass("show").one(animationEnd, function (a4) {
      $(a4.target).removeClass("show");
    });
    I.css({
      "border-color": a1
    });
    a2.removeClass("hide").addClass("directshow show");
  };
  this.hideQuarter = function (a1) {
    a1 = U[a1].obj;
    if (E.unlock) {
      a1.addClass("hide").one(animationEnd, function (a2) {
        $(a2.target).removeClass("directshow show hide");
      });
    } else {
      a1.removeClass("directshow show hide");
    }
    if (E.cntCode == S) {
      cancelClickBtBonus();
      this.notFoundAnymore();
    }
    E.cntCode--;
    if (E.cntCode < 0x0) {
      E.cntCode = 0x0;
    }
    if (0x0 == E.cntCode) {
      E.inprogress = false;
      G.removeClass("inprogress");
    }
  };
  this.hideClock = function () {
    a0.stop(true);
  };
  this.render = function () {
    a0.render();
  };
  this.hasBeenFound = function () {
    if (!modeReplay) {
      G.addClass("found bounce");
      popupBonusUnlocked();
    }
    E.modeClick();
    E.found = true;
  };
  this.notFoundAnymore = function () {
    if (!modeReplay) {
      G.removeClass("found bounce");
    }
    E.found = false;
    E.hideClock();
    E.hideLoader();
    E.modeTouch();
  };
  this.touchStart = function (a1) {
    a1.preventDefault();
    if (E.unlock) {
      if (!bonusPlaying) {
        (B = ~a1.type.indexOf("touch") ? G : $body).on(pointerEventType.up, E.touchEnd);
        V = new Date().getTime();
        showPoloAndPictoInCombo(F);
      }
    } else {
      popupFindPreviousBonus();
    }
  };
  this.touchEnd = function (a1) {
    a1.preventDefault();
    B.off(pointerEventType.up, E.touchEnd);
    stopShowingPoloInArray(V);
  };
  this.launchVideo = function () {
    var a1;
    if (!(bonusWaiting || bonusPlaying || (a1 = !app.bonusloopA || boucleA, !modeWatch && getRemainingTime() < 0x1f4 && a1))) {
      E.modeTouch();
      E.showLoader();
      recordMix.xmlAction("bonus", E);
      clickBtBonus(F);
      G.removeClass("bounce");
      I.addClass("showCircle").one(animationEnd, function (a2) {
        $(a2.target).removeClass("showCircle");
      });
      E.prepareVideo(0x1);
    }
  };
  this.prepareVideo = function (a1) {
    if (K.error) {
      K.load();
    }
    W = app.looptime * (a1 - 0x1) / 0x3e8;
    K.currentTime = W;
  };
  this.videoPlaying = function () {};
  this.videoEnded = function () {};
  this.play = function () {
    M = !(L = true);
    G.addClass("playing");
    E.hideLoader();
    a0.start(loopDuration * E.nbLoop, false);
    N.prepare(P);
    N.play(W);
    J.addClass("show");
    K.play().then(() => {})["catch"](a2 => {
      throw new Error(a2);
    });
  };
  this.stop = function () {
    G.removeClass("playing");
    if (loopOn && E.found) {
      E.modeClick();
    }
    if (L) {
      N.stop(true);
      a0.stop(true);
    }
    E.stopAspiration();
    L = false;
    J.removeClass("show");
    K.pause();
  };
  this.pause = function () {
    if (L) {
      K.pause();
    }
    a0.pause();
  };
  this.resume = function () {
    if (L) {
      K.play();
    }
    a0.resume();
  };
  this.init();
};
var ClockObject = function (j) {
  var q;
  var w;
  var x;
  var y;
  var z;
  var A;
  var B;
  var C;
  var D;
  var E;
  var F;
  var G = this;
  var H = $("#" + j)[0x0].getContext("2d");
  var I = 0x2 * Math.PI;
  var J = Math.PI / 0x2;
  var K = false;
  var L = false;
  var M = 0x0;
  this.start = function (N, O) {
    C = null != storage.getItem("param-dark") && "true" == storage.getItem("param-dark") ? "#CCCCCC" : "#5A5A5A";
    H.strokeStyle = C;
    L = !(K = true);
    F = O;
    E = 0x64 / N;
    D = new Date().getTime();
  };
  this.stop = function (N) {
    K = false;
    if (N) {
      G.clear();
    } else {
      L = true;
      q = F ? 0x0 : 0x1;
    }
  };
  this.pause = function () {
    M = new Date().getTime();
  };
  this.resume = function () {
    var N = new Date().getTime() - M;
    D += N;
  };
  this.render = function () {
    var N;
    var O;
    if (K || L) {
      if (K) {
        N = new Date().getTime() - D;
        w = N * E / 0x64;
      } else if (L) {
        w += 0.2 * (q - w);
      }
      if (0.999 < (w = w < 0.001 ? 0.001 : w)) {
        w = 0.999;
      }
      N = F ? -J : I * w - J;
      O = F ? I * w - J : -J;
      G.clear();
      H.beginPath();
      H.arc(x, y, A, N, O, false);
      H.stroke();
      if (!(!L || 0.001 != w && 0.999 != w)) {
        L = false;
        G.clear();
      }
    }
  };
  this.clear = function () {
    H.clearRect(x - A - B / 0x2, y - A - B / 0x2, 0x2 * A + B, 0x2 * A + B);
  };
  this.init = function (N, O, P, Q, R, S) {
    x = null == N ? 0x0 : N;
    y = null == O ? 0x0 : O;
    z = null == P ? 0x1 : P;
    A = null == Q ? 0x12 : Q;
    B = null == R ? 0x6 : R;
    C = null == S ? "#FFFFFF" : S;
    H.lineWidth = B;
    H.strokeStyle = C;
    H.globalAlpha = z;
  };
};
var ReadingBar = function (g, h, j) {
  var q;
  var w = this;
  var x = $(g);
  var y = $("#reading-buffer", x);
  var z = $cntRecord.find("#t-spent");
  var A = $cntRecord.find("#t-duration");
  var B = "00:00";
  var C = false;
  var D = 0x0;
  var E = "record";
  var F = secToText(app.looptime * app.recmaxloop);
  var G = 0x0;
  var H = 0x0;
  this.minLoop = h;
  this.maxLoop = j;
  this.maxTime = 0x0;
  this.cntLoop = 0x0;
  this.bonusList = [];
  this.onLoopsFinished = nada;
  this.onLooping = nada;
  this.isFinished = function () {
    return this.cntLoop == this.maxLoop;
  };
  this.isLastLoop = function () {
    return this.cntLoop + 0x1 == this.maxLoop;
  };
  this.open = function (I, J) {
    E = I;
    w.createRecordBlock(J);
    w.cntLoop = 0x0;
    w.maxTime = "record" == E ? F : secToText(w.maxLoop * app.looptime);
    y.css({
      "transform": "scaleX(0)"
    });
    B = "00:00";
    z.text(B);
    A.text(" / " + w.maxTime);
    G = 0x0;
    H = 0x64 / readingBar.maxLoop;
    x.addClass("open");
    $cntRecord.addClass("fadeIn");
    callParentWindow("replayTime", {
      "state": "open",
      "spent": B,
      "duration": w.maxTime
    });
    return w;
  };
  this.close = function () {
    w.onLoopsFinished = nada;
    w.onLooping = nada;
    removeTransition(x, "open", "transform", function () {
      y.removeClass("progress");
      $("#reading-marker").empty();
      $("#reading-marker-bonus").empty();
      w.bonusList = [];
    });
    $cntRecord.removeClass("fadeIn cssdelay");
    return w;
  };
  this.start = function () {
    C = true;
    w.cntLoop = 0x0;
    D = 0x0;
    w.render();
    G = Math.floor(D + q) / w.maxLoop;
    y.css({
      "transform": "scaleX(" + G / 0x64 + ")",
      "animation-duration": decimal(w.maxLoop * app.looptime / 0x3e8, 0x2) + "s"
    });
    y.addClass("progress");
    callParentWindow("replayTime", {
      "state": "start",
      "spent": B,
      "duration": w.maxTime
    });
    return w;
  };
  this.stop = function () {
    C = false;
    callParentWindow("replayTime", {
      "state": "stop",
      "spent": B,
      "duration": w.maxTime
    });
    return w;
  };
  this.froze = function () {
    y.addClass("froze");
  };
  this.seek = function (I) {
    w.cntLoop = I;
    y.removeClass("progress");
    resetAnimationCSS(y[0x0]);
    y.css({
      "transform": "scaleX(" + H * w.cntLoop / 0x64 + ")"
    });
    w.render();
  };
  this.unfroze = function () {
    y.css({
      "transform": "scaleX(" + H * w.cntLoop / 0x64 + ")",
      "animation-duration": decimal((w.maxLoop - w.cntLoop) * app.looptime / 0x3e8, 0x2) + "s"
    });
    y.removeClass("froze").addClass("progress");
  };
  this.openBig = function () {
    x.addClass("seeking");
  };
  this.openNormal = function () {
    x.removeClass("seeking");
  };
  this.loop = function () {
    w.cntLoop++;
    D += q;
    if (w.isFinished()) {
      if (w.onLoopsFinished) {
        w.onLoopsFinished();
      }
    } else if (w.onLooping) {
      w.onLooping();
    }
    return w;
  };
  this.render = function () {
    var I;
    if (C && (q = pctMetronome, I = secToText((loopOn || undefined ? timenow - startboucle : 0x0) + loopDuration * w.cntLoop), B != I)) {
      B = I;
      z.text(B);
      callParentWindow("replayTime", {
        "state": "render",
        "spent": B,
        "duration": w.maxTime
      });
    }
  };
  this.createRecordBlock = function (I) {
    var J = "record" == E ? "#D20A0A" : miniPlayer ? "#2C86FE" : "#36B460";
    var K = "record" == E ? decimal(w.minLoop / w.maxLoop, 0x2) : 0x0;
    $("#reading-block", x).css({
      "transform": "scale(" + K + ", 1)"
    });
    $($cntRecord).css({
      "color": J
    });
    y.css({
      "background-color": J
    });
    if (true === I) {
      var L = "";
      var M = 0x64 / w.maxLoop;
      var N = 0x0;
      for (var N = 0x0; N < w.maxLoop; N++) {
        L += "<div class='marker' style='left:" + M * N + "%'></div>";
      }
      $("#reading-marker").html(L);
      L = "";
      for (N = 0x0; N < w.bonusList.length; N++) {
        L += "<div class='marker' style='left:" + M * w.bonusList[N].loopIndex + "%; width:" + M + "%'></div>";
      }
      $("#reading-marker-bonus").html(L);
    }
  };
  this.createRecordBlock();
};
var RenderRAF = function (g) {
  var j;
  var k = g || nada;
  var l = false;
  function m(p) {
    k();
    j = requestAnimationFrame(m);
  }
  this.start = function () {
    if (!l) {
      l = true;
      m();
    }
  };
  this.stop = function () {
    if (l) {
      l = false;
      cancelAnimationFrame(j);
    }
  };
};
var Spinner = {
  "$bt": null,
  "$svg": null,
  "xlink": "",
  "add": function (g) {
    if (null != g && "undefined" !== g) {
      this.$bt = g;
      this.$svg = this.$bt.find("svg use");
      if (0x0 < this.$svg.length) {
        this.xlink = this.$svg.attr("xlink:href");
        this.$svg.attr("xlink:href", "#ic-loader");
      }
      this.$bt.addClass("spin");
    }
  },
  "reset": function () {
    if (null != this.$bt && "undefined" !== this.$bt) {
      this.$bt.removeClass("spin");
    }
    if (null != this.$svg && "undefined" !== this.$svg && 0x0 < this.$svg.length) {
      this.$svg.attr("xlink:href", this.xlink);
    }
    this.$bt = null;
    this.$svg = null;
    this.xlink = "";
  }
};
function CustomButton(g) {
  var k = g.find("svg");
  var l = k.find("use");
  var m = l.attr("xlink:href");
  var p = false;
  var q = false;
  g.addSpinner = function () {
    if (!p) {
      p = true;
      l.attr("xlink:href", "#ic-loader");
      k.addClass("spin");
    }
    return g;
  };
  g.removeSpinner = function () {
    if (p) {
      p = false;
      l.attr("xlink:href", m);
      k.removeClass("spin");
    }
    return g;
  };
  g.addTouchAnimation = function () {
    if (q) {
      g.removeClass("ontouch").get(0x0).offsetHeight;
    }
    q = true;
    g.addClass("ontouch").one(animationEnd, function (r) {
      g.removeClass("ontouch");
      q = false;
    });
    return g;
  };
  return g;
}
function CanvasObj(g) {
  var i;
  var j = this;
  this.id = g;
  this.div = document.getElementById(g);
  this.context = this.div.getContext("2d");
  this.saveImage = function () {
    i = j.context.getImageData(0x0, 0x0, j.div.width, j.div.height);
  };
  this.showImage = function () {
    j.clear();
    j.context.putImageData(i, 0x0, 0x0);
  };
  this.clear = function () {
    j.context.clearRect(0x0, 0x0, j.div.width, j.div.height);
  };
  return this;
}
var $focused;
var focusList = [];
var focusPos = -0x1;
var focusHistory = [];
function initFocusEvent() {
  killFocusEvent();
  document.addEventListener("keydown", keyDown, false);
  $(document).on(pointerEventType.down, g => {
    if (0x3 != g.isTrigger) {
      removeFocus(g);
    }
  });
}
function killFocusEvent() {
  document.removeEventListener("keydown", keyDown, false);
  $(document).off(pointerEventType.down, removeFocus);
}
function keyDown(g) {
  var h = g.key.toLowerCase();
  if (!(g.shiftKey && 0x9 == g.keyCode)) {
    if (0x9 == g.keyCode) {
      g.preventDefault();
    }
    if (0x1b == g.keyCode) {
      g.preventDefault();
    }
    if (0x26 == g.keyCode) {
      g.preventDefault();
    }
    if (0x28 == g.keyCode) {
      g.preventDefault();
    }
    if (!$("input").is(":focus")) {
      if (0xd == g.keyCode) {
        g.preventDefault();
      }
      if (0x25 == g.keyCode) {
        g.preventDefault();
      }
      if (0x27 == g.keyCode) {
        g.preventDefault();
      }
    }
    hitKey(h);
  }
}
function nextFocus() {
  var h;
  var i;
  focusPos = ++focusPos > focusList.length - 0x1 ? focusList.length - 0x1 : focusPos;
  if ("playlist-all" == focusHistory[focusHistory.length - 0x1] && (i = $scrollbox.find(".boxline .line.focused")).length && 0x0 < (h = i.index())) {
    i = i.height();
    $scrollbox[0x0].scroll({
      "top": h * i,
      "left": 0x0,
      "behavior": "smooth"
    });
  }
  addFocus();
}
function prevFocus() {
  var g;
  var h;
  focusPos = --focusPos < 0x0 ? 0x0 : focusPos;
  if ("playlist-all" == focusHistory[focusHistory.length - 0x1] && (h = $scrollbox.find(".boxline .line.focused")).length && 0x0 < (g = h.index())) {
    h = h.height();
    $scrollbox[0x0].scroll({
      "top": g * h - 0x2 * h,
      "left": 0x0,
      "behavior": "smooth"
    });
  }
  addFocus();
}
function addFocus() {
  if (null != $focused && "undefined" !== $focused) {
    $focused.removeClass("focused");
    $focused = null;
  }
  if (0x0 < focusList.length) {
    ($focused = focusList[focusPos].toFocus).addClass("focused");
  }
}
function removeFocus() {
  if (null != $focused && "undefined" !== $focused) {
    $focused.removeClass("focused");
    $focused = null;
    focusPos = -0x1;
  }
}
function enterFocus() {
  var g;
  if (null != $focused && "undefined" !== $focused) {
    if (null != focusList[focusPos].onEnter && "undefined" !== focusList[focusPos].onEnter) {
      focusList[focusPos].onEnter();
    } else {
      g = focusList[focusPos].toClick || focusList[focusPos].toFocus;
      if (null != $._data(g, "events")) {
        g.trigger(pointerEventType.down);
      } else {
        g[0x0].dispatchEvent(new Event(pointerEventType.down));
      }
    }
  }
}
function deleteFocus() {
  if ("popup-menu-exit" == focusHistory[focusHistory.length - 0x1]) {
    return false;
  }
  if (null != $focused && "undefined" !== $focused) {
    $focused.removeClass("focused");
    $focused = null;
  }
  focusList = [];
  focusPos = -0x1;
}
function hitKey(g) {
  switch (g) {
    case "tab":
      if ($("input").is(":focus")) {
        blurAll();
      }
      nextFocus();
      break;
    case "enter":
      if ((null == $focused || "undefined" === $focused) && "pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0xa].toFocus.trigger(pointerEventType.down);
        return false;
      }
      if ($("input").hasClass("focused") && $("input").is(":focus")) {
        blurAll();
        nextFocus();
      }
      enterFocus();
      break;
    case "escape":
      if ($("input").is(":focus")) {
        blurAll();
        return false;
      }
      if (null != $focused && "undefined" !== $focused) {
        removeFocus();
      }
      if (pageApp && pause) {
        return false;
      }
      if (boxDialog.isOpen()) {
        return false;
      }
      if (pageApp && $lockAll.hasClass("show")) {
        return false;
      }
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        boxPopup.close();
        return false;
      }
      if ("popup-news" == focusHistory[focusHistory.length - 0x1]) {
        boxPopup.close();
        return false;
      }
      if ("popup-switch" == focusHistory[focusHistory.length - 0x1]) {
        boxSwitch.close();
        return false;
      }
      if (boxInfo.isOpen()) {
        boxInfo.close();
        return false;
      }
      if (boxParam.isOpen()) {
        boxParam.close();
        return false;
      }
      if (pageApp && boxPopup.isOpen()) {
        if (boxPopup.$popup.hasClass("action") || boxPopup.$popup.hasClass("action-back")) {
          boxPopup.$icon.trigger(pointerEventType.down);
        } else {
          boxPopup.close();
        }
        return false;
      }
      if (pageApp && $mixlist.isOpen()) {
        if ("playlist-line-open" == focusHistory[focusHistory.length - 0x1]) {
          $lineOpened.trigger(pointerEventType.down).trigger(pointerEventType.up);
          return false;
        }
        if ("playlist-all" == focusHistory[focusHistory.length - 0x1]) {
          closePlaylist();
          return false;
        }
      }
      if ((window.cordova || window.electron) && null == $focused) {
        removeFocus();
        if (boxMenu.isOpen()) {
          boxMenu.close();
        } else {
          popupMenuExit();
        }
        return false;
      }
      break;
    case " ":
      if (!(!(pageApp && onGame && loopOn) || $lockAll.hasClass("show") || undefined !== boxMenu && boxMenu.isOpen())) {
        $btClock.trigger(pointerEventType.down);
      }
      break;
    case "arrowright":
      if (!$("input").is(":focus")) {
        nextFocus();
      }
      break;
    case "arrowleft":
      if (!$("input").is(":focus")) {
        prevFocus();
      }
      break;
    case "arrowdown":
      if (!$("input").is(":focus")) {
        nextFocus();
      }
      break;
    case "arrowup":
      if (!$("input").is(":focus")) {
        prevFocus();
      }
      break;
    case "1":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x0].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "2":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x1].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "3":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x2].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "4":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x3].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "5":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x4].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "6":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x5].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "7":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x6].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "8":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x7].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "9":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x8].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "0":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        focusList[0x9].toFocus.trigger(pointerEventType.down);
      }
      break;
    case "backspace":
      if ("pop-safe-code" == focusHistory[focusHistory.length - 0x1]) {
        boxPopup.$popup.find(".text").text("_ _ _ _");
      }
  }
}
function createFocus(g, h) {
  if (boxMenu && boxMenu.isOpen() && "popup-menu-exit" != g) {
    removeInArray("popup-menu-exit", focusHistory);
    focusHistory.push(g);
    focusHistory.push("popup-menu-exit");
    return false;
  }
  if (boxDialog && boxDialog.isOpen() && "popup-dialog" != g) {
    removeInArray("popup-dialog", focusHistory);
    focusHistory.push(g);
    focusHistory.push("popup-dialog");
    return false;
  }
  focusList = [];
  focusPos = -0x1;
  if ("popup-menu-exit" == g) {
    boxMenu.$popup.find(".bt:not(.icon)").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": boxMenu.$icon
    });
  }
  if (pageApp && "home" == g) {
    if ($homeBtNews && 0x0 < $homeBtNews.length) {
      focusList.push({
        "toFocus": $homeBtNews.find(".bck"),
        "toClick": $homeBtNews
      });
    }
    focusList.push({
      "toFocus": $homeBtInfo
    });
    focusList.push({
      "toFocus": $homeBtParam
    });
    if ($("#home-bt-fs").is(":visible")) {
      focusList.push({
        "toFocus": $("#home-bt-fs")
      });
    }
    focusList.push({
      "toFocus": $homeBtSwitch
    });
    focusList.push({
      "toFocus": $homeBtPlay
    });
    focusList.push({
      "toFocus": $homeBtList
    });
  }
  if ("popup-news" == g) {
    focusList.push({
      "toFocus": boxPopup.$popup.find(".bt:not(.icon)")
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if (!("pop-tuto" != g && "pop-credit" != g && "pop-follow" != g)) {
    $("#pop-info .box-tab .tab").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-tuto" == g) {
    $("#pop-info #pop-tuto .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-credit" == g) {
    $("#pop-info #pop-credit .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-follow" == g) {
    $("#pop-info #pop-follow .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": $("#pop-info #pop-follow #img-shop")
    });
  }
  if (!("pop-language" != g && "pop-setting" != g)) {
    $("#pop-param .box-tab .tab").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-language" == g) {
    $("#pop-param #pop-language .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-setting" == g) {
    $("#pop-param #pop-setting .bt-onoff, #pop-param #pop-setting .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("pop-safe-code" == g) {
    boxPopup.$popup.find(".bt:not(.icon)").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("index-select" == g) {
    if ($homeBtNews && 0x0 < $homeBtNews.length) {
      focusList.push({
        "toFocus": $homeBtNews.find(".bck"),
        "toClick": $homeBtNews
      });
    }
    if ($("#home-bt-fs").is(":visible")) {
      focusList.push({
        "toFocus": $("#home-bt-fs")
      });
    }
    focusList.push({
      "toFocus": $("#home-bt-info")
    });
    focusList.push({
      "toFocus": $("#home-bt-param")
    });
    $("#sp-select .vicon:not(.open)").each(function (v) {
      focusList.push({
        "toFocus": $(this).find(".img"),
        "onEnter": () => {
          $(this).trigger(pointerEventType.up);
        }
      });
    });
  }
  if ("popup-switch" == g) {
    $("#sp-select .vicon:not(.open)").each(function (v) {
      focusList.push({
        "toFocus": $(this).find(".img"),
        "onEnter": () => {
          $(this).trigger(pointerEventType.up);
        }
      });
    });
  }
  if ("toolbar" == g) {
    focusList.push({
      "toFocus": $btTool
    });
    focusList.push({
      "toFocus": $btClock
    });
  }
  if ("toolbar-open" == g) {
    $("#game #box-bt1 .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("game-paused" == g) {
    if ("visible" == $lockPause.css("visibility")) {
      focusList.push({
        "toFocus": $btClock,
        "toClick": $lockPause
      });
    } else {
      focusList.push({
        "toFocus": $btClock
      });
    }
  }
  if ("mode-replay" == g) {
    focusList.push({
      "toFocus": $btTool
    });
    focusList.push({
      "toFocus": $btClock
    });
    focusList.push({
      "toFocus": $btSave
    });
    focusList.push({
      "toFocus": $btLike
    });
  }
  if ("popup-record-complete" == g) {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-save-form" == g) {
    boxPopup.$popup.find(".formzone .formline:visible input").each(function (v) {
      var w = $(this);
      focusList.push({
        "toFocus": w,
        "onEnter": function () {
          var y = w.val().length;
          w.focus();
          w[0x0].setSelectionRange(y, y);
        }
      });
    });
    focusList.push({
      "toFocus": boxPopup.$popup.find(".bt-onofftext")
    });
    focusList.push({
      "toFocus": boxPopup.$popup.find(".bt.valid")
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-mix-saved" == g) {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-global-share" == g) {
    boxPopup.$popup.find(".box-bt-haut .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-email-form" == g) {
    boxPopup.$popup.find(".formzone .formline input").each(function (v) {
      var w = $(this);
      focusList.push({
        "toFocus": w,
        "onEnter": function () {
          var x = w.val().length;
          w.focus();
          w[0x0].setSelectionRange(x, x);
        }
      });
    });
    focusList.push({
      "toFocus": boxPopup.$popup.find(".bt.valid")
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-convert-mix" == g) {
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-convert-mix-ready" == g) {
    k = boxPopup.$popup.find("#bt-save-file");
    focusList.push({
      "toFocus": k,
      "onEnter": function () {
        k[0x0].click();
      }
    });
    focusList.push({
      "toFocus": boxPopup.$icon
    });
  }
  if ("popup-dialog" == g) {
    $("#pop-dialog .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  if ("playlist-all" == g) {
    $("#mixlist .tabbox .tab").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    (l = $("#mixlist .pagebox.show")).find(".tab-filter:visible").find(".bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
    if ("box-search" == l.attr("id")) {
      focusList.push({
        "toFocus": l.find(".formline input"),
        "onEnter": function () {
          l.find(".formline input").focus();
        }
      });
      focusList.push({
        "toFocus": l.find(".bt.search")
      });
    }
    $scrollbox.find(".boxline .line").each(function (v) {
      var w = $(this);
      focusList.push({
        "toFocus": w,
        "onEnter": function () {
          w.trigger(pointerEventType.down).trigger(pointerEventType.up);
        }
      });
    });
  }
  if ("playlist-line-open" == g && $lineOpened) {
    $lineOpened.find(".box-action .bt").each(function (v) {
      focusList.push({
        "toFocus": $(this)
      });
    });
  }
  var k;
  var l;
  var m;
  var p = [];
  for (m in focusList) if (isVisible(focusList[m])) {
    p.push(focusList[m]);
  }
  focusList = p;
  if (g != focusHistory[focusHistory.length - 0x1]) {
    focusHistory.push(g);
  }
  if (0x5 < focusHistory.length) {
    focusHistory.shift();
  }
  if (null != h && "undefined" !== h) {
    var q = 0x0;
    for (var u = focusList.length; q < u; q++) {
      if (focusList[q].toFocus && focusList[q].toFocus[0x0] === h[0x0]) {
        focusPos = q;
        break;
      }
    }
  }
}
function removeInFocusHistory(g) {
  removeInArray(g, focusHistory);
}
function createFocusFromHistory() {
  if (focusHistory.length) {
    createFocus(focusHistory[focusHistory.length - 0x1]);
  }
}
function isVisible(g) {
  return !!(null != g && "undefined" !== g) && !!(g = null != g.toClick && "undefined" !== g.toClick ? g.toClick : g.toFocus).length && "hidden" != g.css("visibility") && "none" != g.css("display");
}
function initParam() {
  if (appBrowser && isIOS) {
    $("#home-bt-fs").hide();
  }
  if (null != storage.getItem("param-dark") && "true" == storage.getItem("param-dark")) {
    $("body").addClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").addClass("active");
  }
  if (null != storage.getItem("param-safe")) {
    $("body").addClass("safemode");
    $("#pop-setting #param-safe .bt-onoff").addClass("active");
  }
  $("#pop-setting #param-reset .bt").on(pointerEventType.down, clickbtParamReset).parent().find(".ic-info").on(pointerEventType.down, clickbtParamResetInfo);
  $("#pop-setting #param-dark .bt-onoff").on(pointerEventType.down, clickbtParamDark);
  $("#pop-setting #param-safe .bt-onoff").on(pointerEventType.down, clickbtParamSafe).parent().find(".ic-info").on(pointerEventType.down, clickbtParamSafeInfo);
}
function isDarkMode() {
  return null != storage.getItem("param-dark") && "true" == storage.getItem("param-dark");
}
function isSafeMode() {
  return null != storage.getItem("param-safe");
}
function clickbtParamReset(g) {
  g.preventDefault();
  storage.removeItem("popupDragViewed");
  storage.removeItem("popup-bonus-next");
  storage.removeItem("popup-bonus-unlock");
  for (var i = 0x1; i <= versions.total; i++) {
    storage.removeItem("v" + i + "-popup-bonus-next");
    storage.removeItem("v" + i + "-popup-bonus-unlock");
    storage.removeItem("v" + i + "-bonus-complete");
  }
  if (pageApp) {
    addTransition($("#fade-all"), "fadeIn", "opacity", function () {
      window.location.href = undefined !== appNumberVersion ? "?v=" + appNumberVersion : "";
    });
  } else {
    $(g.currentTarget).addClass("disable");
  }
}
function clickbtParamResetInfo(g) {
  g.preventDefault();
  boxDialog.open(STR("pop.paramResetInfoText"), "", [STR("bt.gotit")], []);
}
function unlockAllBonus() {
  for (var g = 0x1; g <= versions.total; g++) {
    storage.setItem("v" + g + "-popup-bonus-next", "ok");
    storage.setItem("v" + g + "-popup-bonus-unlock", "ok");
    storage.setItem("v" + g + "-bonus-complete", "2");
  }
  addTransition($("#fade-all"), "fadeIn", "opacity", function () {
    window.location.href = undefined !== appNumberVersion ? "?v=" + appNumberVersion : "";
  });
}
function clickbtParamDark(g) {
  g.preventDefault();
  if (null != storage.getItem("param-dark") && "true" == storage.getItem("param-dark")) {
    storage.setItem("param-dark", false);
    $body.removeClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").removeClass("active");
  } else {
    storage.setItem("param-dark", true);
    $body.addClass("darkmode");
    $("#pop-setting #param-dark .bt-onoff").addClass("active");
  }
}
var $homeBtNews;
var paramsafecode = "";
function clickbtParamSafe(g) {
  g.preventDefault();
  deleteFocus();
  popupCode();
}
function turnOnSafeMode(g) {
  storage.setItem("param-safe", g);
  $body.addClass("safemode");
  $("#pop-setting #param-safe .bt-onoff").addClass("active");
}
function turnOffSafeMode() {
  storage.removeItem("param-safe");
  $body.removeClass("safemode");
  $("#pop-setting #param-safe .bt-onoff").removeClass("active");
}
function popupCode() {
  boxPopup.open({
    "name": "safe-code",
    "icntype": "action",
    "content": function () {
      return "<div class='title'>" + (null != storage.getItem("param-safe") ? STR("txt.codeEnter") : STR("txt.codeChoose")) + "</div>\n\t\t\t\t<div class='text'>_ _ _ _</div>\n\t\t\t\t<div class='content'>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>1</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>2</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>3</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>4</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>5</div></div><div class='hitzone'></div></div><br>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>6</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>7</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>8</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>9</div></div><div class='hitzone'></div></div>\n\t\t\t\t\t<div class='bt bt-round bt-soft bt-number'><div class='bck'><div class='txt'>0</div></div><div class='hitzone'></div></div><br>\n\t\t\t\t\t<br>\n\t\t\t\t\t<div class='bt bt-light' id='bt-valid-code'><div class='bck'><div class='txt'>" + STR("bt.ok") + "</div></div><div class='hitzone'></div></div>\n\t\t\t\t</div>";
    },
    "onBoxOpenEnd": function () {
      createFocus("pop-safe-code");
      null != storage.getItem("param-safe");
      paramsafecode = "";
      boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
      boxPopup.$popup.find(".bt-number").on(pointerEventType.down, function (i) {
        i.preventDefault();
        var i = boxPopup.$popup.find(".text");
        var j = i.text();
        var k = j.indexOf("_");
        if (-0x1 < k) {
          i.text(j.replaceAt(k, $(this).text()));
        }
        if (!(!(null != storage.getItem("param-safe")) || "15092009" != (paramsafecode += $(this).text()) && i.text().replace(/ /g, "") != storage.getItem("param-safe"))) {
          turnOffSafeMode();
          boxPopup.close();
        }
        if ($(this).hasClass("ontouch")) {
          $(this).removeClass("ontouch").get(0x0).offsetHeight;
        }
        $(this).addClass("ontouch").one(animationEnd, function (l) {
          $(l.target).removeClass("ontouch");
        });
      });
      boxPopup.$popup.find("#bt-valid-code").on(pointerEventType.down, function (i) {
        var j = boxPopup.$popup.find(".text").text().replace(/ /g, "");
        if (-0x1 == j.indexOf("_")) {
          if (null != storage.getItem("param-safe")) {
            if (j == storage.getItem("param-safe")) {
              turnOffSafeMode();
              boxPopup.close();
            } else {
              boxPopup.$popup.find(".text").addClass("shake").one(animationEnd, function (k) {
                paramsafecode = "";
                $(k.target).text("_ _ _ _").removeClass("shake");
              });
            }
          } else {
            turnOnSafeMode(j.replace(/ /g, ""));
            boxPopup.close();
          }
        } else {
          boxPopup.$popup.find(".text").addClass("shake").one(animationEnd, function (k) {
            $(k.target).removeClass("shake");
          });
        }
      });
    },
    "onBoxCloseStart": function () {
      removeInFocusHistory("pop-safe-code");
      deleteFocus();
      boxPopup.$icon.off();
      boxPopup.$popup.find(".bt").off();
    },
    "onCloseComplete": function () {
      createFocusFromHistory();
    }
  });
}
function clickbtParamSafeInfo(g) {
  g.preventDefault();
  boxDialog.open(STR("pop.paramSafeInfoText"), "", [STR("bt.gotit")], []);
}
function clickbtParamRecover(g) {}
function clickbtParamRecoverInfo(g) {}
var hasNews = false;
function initNews() {
  if (!(null != storage.getItem("param-safe")) && hasNetwork) {
    checkNews();
  }
}
function activeBtNews() {
  if (hasNews) {
    ($homeBtNews = $("#home-bt-news")).on(pointerEventType.up, function (h) {
      h.preventDefault();
      preventAction(popupNews);
    }).addClass("animate");
  }
}
function checkNews() {
  var h = {
    "build": build,
    "machine": machine,
    "user": user
  };
  var i = JSON.parse(localStorage.getItem("news")) || {
    id: "",
    lang: ""
  };
  var i = {
    id: i.id,
    lang: i.lang
  };
  h.news = i;
  $.ajax({
    type: "POST",
    url: "https://www.incredibox.com/ph3/check-news.php",
    data: h,
    dataType: "json",
    crossdomain: true,
    success: function (j) {
      if (null != j.nada) {
        localStorage.removeItem("");
      }
      if (null != j.deja) {
        hasNews = true;
      }
      if (null != j.news) {
        localStorage.setItem("news", JSON.stringify(j.news));
        hasNews = true;
      }
    },
    error: function (j) {}
  });
}
var newsImageLoaded = false;
function popupNews() {
  var h;
  var i;
  var j;
  if (null != localStorage.getItem("news")) {
    h = JSON.parse(localStorage.getItem("news"));
    j = (i = null != h.bt) ? "<div class=\"bt bt-light\"><div class=\"bck\"><div class=\"txt\">" + h.bt + "</div></div><div class=\"hitzone\"></div></div>" : "";
    boxPopup.open({
      name: "popup-news",
      icntype: "action",
      bodyclose: true,
      class: "big column",
      content: "<div class=gallery-container><div class=gallery-slider><div class=gallery-slide><img id=credits-images src=evadare/credits_arts/01c_remmie.png><div class=container><div id=text-credits><b>Evadare Mod by <span style=color:#5ea7ff>Rem</span></b></div><div id=text-credits>It took me years of dedication, frustration, and countless retries to finally learn, to push myself harder, and to create something I can truly be proud of — an Incredibox MOD that reflects my passion. Never in my wildest dreams did I expect the overwhelming support I received after releasing the first chapter of Evadare.<br><br>To everyone who believed in me, who stood by my side, and continues to support me - thank you from the bottom of my heart. I wish you all good health, happiness, and a life filled with joy. Take care of yourselves, always!</div></div></div><div class=gallery-slide><img id=credits-images src=evadare/credits_arts/02c_specialthanks.png><div class=container><div id=text-credits><b>Special Thanks!</b></div><div id=text-credits>I want to say thank you to <b>Artemiy Kopych</b>, <b>Alex Ivan</b>, <b>Nick Patito</b>, <b>Person from Brazil</b>, <b>Charlles</b>, and <b>Simonn</b> for their help with this project. Special thanks to <b>Person from Brazil</b>, <b>Alex Ivan</b>, and <b>Charlles</b> for helping with the sounds and adjustments, <b>Nick Patito</b> and <b>Simonn</b> for the art and concepts, and <b>Artemiy</b> for testing, small fixes, and constant support for the project, as always!<br><br>Secret thanks to <b>SG</b>, the voice behind almost every sound in the Evadare series, <b>Siren Bread</b> for making Voice 1 icon for FSP, and thanks to my <b>Mom</b>, because she loves me-</div></div></div><div class=gallery-slide><img id=credits-images src=evadare/credits_arts/03c_sofarsogood.png><div class=container><div id=text-credits><b>Special Thanks to SFSG</b></div><div id=text-credits>SFSG (So Far So Good) is the incredible team behind Incredibox — a game that's been a huge creative spark for many of us. Big thanks to Allan, Romain, and Paul for creating this app and letting people like me share our creativity. Without you, none of this would’ve happened.<br><br>The simple idea of dragging icons to make music? Genius! It’s helped so many of us discover music in a fun way. Wishing you all the best with future updates and lots of health and happiness. You're amazing!</div></div></div><div class=gallery-slide><img id=credits-images src=evadare/credits_arts/04c_kofiremmie.png><div class=container><div id=text-credits><b>Buy me a Coffee!</b></div><div id=text-credits>All of my work is free, and I don’t sell any of the projects I create, which means I don’t earn anything from them. However, each project takes a lot of time and effort, and every little bit of support helps me continue improving and sharing even more amazing content with everyone. If you enjoy what I do, please consider leaving a small donation - it means a lot to me and helps me improving! 💖</div></div><img id=kofibutton src=evadare/credits_arts/04c_kofibutton.png></div></div><button class=prev onclick=prevSlide()>❮</button> <button class=next onclick=nextSlide()>❯</button></div><script>function _0x1244a6(_0x5698d6,_0x52e3e1){return _0x14d4(_0x5698d6-0x30b,_0x52e3e1);}function _0x2f80(){const _0x2437a1=['11028FOmWAr','clientX','addEventLi','22478nvYEDO','touchend','45315yAecHk','ontainer','67686vNNhuB','.gallery-s','lider','translateX','458340CkDsBO','182110QIXquz','ches','39VlAtPY','torAll','165AHbQla','.gallery-c','style','735dZyJuU','100hFGxYg','1349440dnBEsb','length','52vBihma','touches','changedTou','touchstart','stener','querySelec'];_0x2f80=function(){return _0x2437a1;};return _0x2f80();}(function(_0x33ef93,_0x9c3b95){function _0x1345fb(_0x42bae9,_0x508b2d){return _0x14d4(_0x508b2d-0x2de,_0x42bae9);}const _0x3d9bf8=_0x33ef93();while(!![]){try{const _0x491808=parseInt(_0x1345fb(0x47f,0x486))/0x1+-parseInt(_0x1345fb(0x497,0x48a))/0x2*(-parseInt(_0x1345fb(0x471,0x474))/0x3)+-parseInt(_0x1345fb(0x48a,0x47d))/0x4*(parseInt(_0x1345fb(0x46a,0x472))/0x5)+-parseInt(_0x1345fb(0x47a,0x483))/0x6*(parseInt(_0x1345fb(0x47b,0x479))/0x7)+-parseInt(_0x1345fb(0x47d,0x47b))/0x8+-parseInt(_0x1345fb(0x48d,0x488))/0x9*(-parseInt(_0x1345fb(0x478,0x47a))/0xa)+parseInt(_0x1345fb(0x46d,0x476))/0xb*(parseInt(_0x1345fb(0x468,0x471))/0xc);if(_0x491808===_0x9c3b95)break;else _0x3d9bf8['push'](_0x3d9bf8['shift']());}catch(_0x21f00f){_0x3d9bf8['push'](_0x3d9bf8['shift']());}}}(_0x2f80,0x3d2bc));let currentSlide=0x0;function showSlide(_0x5dea46){function _0x40f0fd(_0x3f5610,_0x1fc586){return _0x14d4(_0x3f5610- -0x188,_0x1fc586);}const _0x209095=document[_0x40f0fd(0x1c,0x12)+_0x40f0fd(0xf,0x16)](_0x40f0fd(0x25,0x25)+'lide'),_0x9503af=document[_0x40f0fd(0x1c,0x12)+'tor'](_0x40f0fd(0x25,0x1b)+_0x40f0fd(0x26,0x24));if(_0x5dea46>=_0x209095[_0x40f0fd(0x16,0x16)])currentSlide=0x0;else _0x5dea46<0x0?currentSlide=_0x209095[_0x40f0fd(0x16,0x1f)]-0x1:currentSlide=_0x5dea46;const _0x1184ee=-currentSlide*0x64;_0x9503af[_0x40f0fd(0x12,0x20)]['transform']=_0x40f0fd(0xa,0x2)+'('+_0x1184ee+'%)';}function nextSlide(){showSlide(currentSlide+0x1);}function _0x14d4(_0x5701bf,_0x217469){const _0x2f8024=_0x2f80();return _0x14d4=function(_0x14d4d0,_0x1a5b15){_0x14d4d0=_0x14d4d0-0x192;let _0x5f3899=_0x2f8024[_0x14d4d0];return _0x5f3899;},_0x14d4(_0x5701bf,_0x217469);}function prevSlide(){showSlide(currentSlide-0x1);}let startX;document[_0x1244a6(0x4af,0x4ae)+'tor'](_0x1244a6(0x4a4,0x4a1)+_0x1244a6(0x4b6,0x4c3))[_0x1244a6(0x4b2,0x4b1)+_0x1244a6(0x4ae,0x4b0)](_0x1244a6(0x4ad,0x4ad),_0x3b85c0=>{function _0x82ac25(_0x323884,_0x40b5fe){return _0x1244a6(_0x323884- -0x16d,_0x40b5fe);}startX=_0x3b85c0[_0x82ac25(0x33e,0x338)][0x0][_0x82ac25(0x344,0x341)];}),document[_0x1244a6(0x4af,0x4b9)+'tor'](_0x1244a6(0x4a4,0x4a9)+_0x1244a6(0x4b6,0x4b3))[_0x1244a6(0x4b2,0x4ad)+_0x1244a6(0x4ae,0x4a8)](_0x1244a6(0x4b4,0x4ae),_0x499a9d=>{let _0x396c21=_0x499a9d[_0x4c0ff3(-0x3f,-0x3a)+_0x4c0ff3(-0x4b,-0x56)][0x0][_0x4c0ff3(-0x3a,-0x2f)];function _0x4c0ff3(_0x576a1e,_0x2d226a){return _0x1244a6(_0x576a1e- -0x4eb,_0x2d226a);}if(startX>_0x396c21+0x32)nextSlide();else startX<_0x396c21-0x32&&prevSlide();});</script>",
      onBoxOpenEnd: function () {
        function k() {
          boxPopup.$popup.find(".icn-box").remove();
          boxPopup.$popup.find(".img-box").css({
            "background-image": "url(" + h.img + ")"
          }).addClass("fade");
        }
        var l;
        createFocus("popup-news");
        if (newsImageLoaded) {
          k();
        } else {
          (l = new Image()).src = h.img;
          l.onload = function () {
            newsImageLoaded = true;
            k();
          };
        }
        boxPopup.$icon.on(pointerEventType.down, boxPopup.close);
        if (i) {
          boxPopup.$container.find(".bt").on(pointerEventType.down, function (m) {
            m.preventDefault();
            openURL(h.link);
          });
        }
      },
      onBoxCloseStart: function () {
        boxPopup.$icon.off();
        if (i) {
          boxPopup.$container.find(".bt").off();
        }
      },
      onCloseComplete: function () {
        removeInFocusHistory("popup-news");
        createFocusFromHistory();
      }
    });
  }
}
var isFullScreenable = window.electron && window.electron.vars.isFullScreenable;
var isMinimizable = window.electron && window.electron.vars.isMinimizable;
function popupMenuExit() {
  boxMenu.open({
    "name": "menu-exit",
    "icntype": "action",
    "content": function () {
      var h = window.electron && electron.ipc.isFullScreen() ? STR("bt.fullscreenOff") : STR("bt.fullscreenOn");
      var i = "\n\t\t\t\t<div class='title'>Menu</div>\n\t\t\t\t<div class='content'>";
      if (isFullScreenable) {
        i += "<div class=\"bt bt-light\" id=\"bt-exit-fullscreen\"><div class=\"bck\"><div class=\"txt\">" + h + "</div></div><div class=\"hitzone\"></div></div>";
      }
      if (isMinimizable) {
        i += "<div class=\"bt bt-light\" id=\"bt-minimize\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.minimizeWindow") + "</div></div><div class=\"hitzone\"></div></div>";
      }
      i = (i += "<div class=\"bt bt-light\" id=\"bt-open-settings\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.param") + "</div></div><div class=\"hitzone\"></div></div>") + ("<div class=\"bt bt-light\" id=\"bt-open-help\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.tuto") + "</div></div><div class=\"hitzone\"></div></div>");
      if (window.cordova || window.electron) {
        i += "<div class=\"bt bt-light\" id=\"bt-exit-app\"><div class=\"bck\"><div class=\"txt\">" + STR("bt.quitApp") + "</div></div><div class=\"hitzone\"></div></div>";
      }
      return i += "</div>";
    },
    "onBoxOpenStart": function () {
      createFocus("popup-menu-exit");
    },
    "onBoxOpenEnd": function () {
      if (isFullScreenable) {
        boxMenu.$popup.find("#bt-exit-fullscreen").on(pointerEventType.down, switchFullscreen);
      }
      if (isMinimizable) {
        boxMenu.$popup.find("#bt-minimize").on(pointerEventType.down, minimizeWindow);
      }
      if (window.cordova || window.electron) {
        boxMenu.$popup.find("#bt-exit-app").on(pointerEventType.down, exitApp);
      }
      boxMenu.$popup.find("#bt-open-help").on(pointerEventType.down, openHelp);
      boxMenu.$popup.find("#bt-open-settings").on(pointerEventType.down, openSettings);
      boxMenu.$icon.on(pointerEventType.down, boxMenu.close);
    },
    "onBoxCloseStart": function () {
      boxMenu.$icon.off();
      boxMenu.$popup.find(".bt").off();
    },
    "onCloseComplete": function () {
      removeInFocusHistory("popup-menu-exit");
      createFocusFromHistory();
    }
  });
}
function isFullScreen() {
  return window.electron && electron.ipc.isFullScreen();
}
function switchFullscreen(g) {
  if (null != g && "undefined" !== g) {
    g.preventDefault();
  }
  g = $(g.currentTarget).find(".txt");
  if (window.electron && electron.ipc.isFullScreen()) {
    g.text(STR("bt.fullscreenOn"));
    electron.ipc.leaveFullScreen();
  } else {
    g.text(STR("bt.fullscreenOff"));
    electron.ipc.enterFullScreen();
  }
}
function minimizeWindow(g) {
  if (null != g && "undefined" !== g) {
    g.preventDefault();
  }
  electron.ipc.minimize();
  boxMenu.close();
}
function exitApp(g) {
  if (null != g && "undefined" !== g) {
    g.preventDefault();
  }
  if (window.electron) {
    electron.ipc.close();
  } else if (window.cordova) {
    boxDialog.open(STR("txt.quitAppConfirm"), "", [STR("bt.yes"), STR("bt.no")], [() => {
      navigator.app.exitApp();
    }]);
  }
  boxMenu.close();
}
function openSettings() {
  boxMenu.close();
  if (boxInfo.isOpen()) {
    boxInfo.close();
  }
  popupParam();
}
function openHelp() {
  boxMenu.close();
  if (boxParam.isOpen()) {
    boxParam.close();
  }
  popupInfo();
}
var storage;
var cloud;
var $body;
var $incredibox;
var $bckGlobal;
var $lockAll;
var $lockPause;
var $fadeAll;
var $watchInfo;
var $mixlist;
var $poplist;
var $tabLatest;
var $tabTop50;
var $tabSearch;
var $tabMixlist;
var $home;
var $homeVersion;
var $homeTitre;
var $homeLoadbox;
var $homeLoadbar;
var $homeBtPlay;
var $homeBtList;
var $homeBtSwitch;
var $homeBtInfo;
var $homeBtParam;
var $homeBtFs;
var $homeBck;
var $boxStage;
var $boxVideo;
var $fadeVideo;
var $boxTop;
var $boxBtBonus;
var $boxBottom;
var $boxPicto;
var $boxLoaderPolo;
var $btTool;
var $boxBt;
var $btBack;
var $btHome;
var $btSave;
var $btLike;
var $btHelp;
var $btSwitch;
var $btStop;
var $btRecord;
var $btRandom;
var $btClock;
var $cntRecord;
var boxDialog;
var boxMenu;
var boxPopup;
var boxInfo;
var boxParam;
var boxSwitch;
var pageApp = false;
function pageLoadComplete() {
  cloud = new CloudSync();
  storage = new LocalStorage();
  localMixObject = new LocalMixObject();
  checkSystem();
  initAnalytics();
  initLanguage();
  resizeApp();
  localMixObject.saveMixOffline();
  $(document).ready(function () {
    if (isIframe && appBrowser) {
      callParentWindow("appIsReady");
    } else {
      documentReady();
    }
  });
}
function documentReady() {
  $body = $("body");
  boxMenu = new Popup(".box-popup#pop-menu-exit");
  boxDialog = new BoxDialog("#pop-dialog");
  boxPopup = new Popup(".box-popup#pop-popup");
  if ("ok" != checkSupported()) {
    removeFadeAll();
    popupGeneralError({
      "error": checkSupported(),
      "action": "kill"
    });
    return false;
  }
  loadLanguage({
    "cbck": function () {
      pageCanRun();
    },
    "fail": function () {
      removeFadeAll();
      popupGeneralError({
        "error": "no language found",
        "action": "reload"
      });
    }
  });
}
function pageCanRun() {
  if (pageApp) {
    initVersions();
  }
  initJqueryVar();
  initRulesCSS();
  initFocusEvent();
  initParam();
  initPopup();
  initNews();
  changeDomTxt();
  (pageApp ? pageAppReady : pageIndexReady)();
}
function switchVersion(g) {
  var i = $(this).attr("id").split("icon").join("");
  var j = "app." + pageExt + "?v=" + i;
  var j = (j += null != getParameterByName("lang") ? "&l=" + getParameterByName("lang") : "") + (null != getParameterByName("afs") ? "&afs=" + getParameterByName("afs") : "");
  if (featureLocked && 0x4 < parseInt(i)) {
    dialogGetApp();
  } else if (i != appVersion) {
    lock();
    focusHistory = [];
    deleteFocus();
    if (pageApp) {
      $(".box-popup#pop-switch #icon" + appVersion).addClass("close");
    }
    $(this).addClass("open clicked").one(animationEnd, function () {
      addTransition($fadeAll, "fadeIn", "opacity", function () {
        gotoAppUrl(j);
      });
    });
  }
}
function initJqueryVar() {
  $body = $("body");
  $fadeAll = $("#fade-all");
  $lockAll = $("#lock-all").on(pointerEventType.down, stopProp);
  $bckGlobal = $("#bck-global");
  $homeBtInfo = $("#home-bt-info");
  $homeBtParam = $("#home-bt-param");
  $homeBtFs = $("#home-bt-fs");
  if (pageApp) {
    $incredibox = $("#app-incredibox");
    $lockPause = $("#lock-pause").on(pointerEventType.down, function (h) {
      h.preventDefault();
      if (h.pageY - $incredibox[0x0].getBoundingClientRect().y < 0.7 * $incredibox[0x0].getBoundingClientRect().height) {
        preventAction(clickBtClock);
      }
    });
    ($mixlist = $("#mixlist")).isOpen = function () {
      return $mixlist.hasClass("show");
    };
    $tabLatest = $("#tab-latest");
    $tabTop50 = $("#tab-top50");
    $tabSearch = $("#tab-search");
    $tabMixlist = $("#tab-mixlist");
    $home = $("#home");
    $homeBck = $("#home #img-bck");
    $homeVersion = $("#home #img-version");
    $homeTitre = $("#home #img-titre");
    $homeLoadbox = $("#home #load-box");
    $homeLoadbar = $("#home #load-box #load-bar");
    $homeBtPlay = new CustomButton($("#home #home-bt-play"));
    $homeBtList = new CustomButton($("#home #home-bt-list"));
    $homeBtSwitch = $("#home #home-bt-switch");
    $boxBt = $("#box-bt");
    $btBack = $("#bt-back");
    ($btTool = $("#bt-tool")).$bck = $("#bt-tool .bck");
    $btTool.$svg = $btTool.$bck.find("svg use");
    $btTool.bounce = function () {
      this.addClass("animateBounce").one(animationEnd, function (h) {
        $(h.target).removeClass("animateBounce");
      });
    };
    $btStop = $("#bt-stop");
    $btRandom = $("#bt-random");
    $btRecord = $("#bt-record");
    $btHome = $("#bt-home");
    $btHelp = $("#bt-help");
    $btSwitch = $("#bt-switch");
    $btClock = $("#bt-clock");
    $cntRecord = $("#cnt-record");
    $btSave = $("#bt-save");
    $btLike = $("#bt-like");
    $boxStage = $("#box-stage");
    $boxVideo = $("#box-video");
    $fadeVideo = $("#fade-video");
    $boxTop = $("#box-top");
    $boxBtBonus = $("#box-bt-bonus");
    $boxBottom = $("#box-bottom");
    $boxPicto = $("#box-picto");
    $boxLoaderPolo = $("#box-loader-polo");
    ($watchInfo = $("#watch-info")).$title = $("#watch-info .title");
    $watchInfo.$name = $("#watch-info .name");
    $watchInfo.$dedi = $("#watch-info .dedi");
    $watchInfo.$date = $("#watch-info .date");
    boxSwitch = new Popup(".box-popup#pop-switch");
    $(".box-popup#pop-switch #icon" + appVersion).addClass("open");
    $(".box-popup#pop-switch .vicon").on(pointerEventType.up, switchVersion);
  }
}
function removeFadeAll() {
  if (($fadeAll = null == $fadeAll || "undefined" === $fadeAll ? $("#fade-all") : $fadeAll).hasClass("fadeIn")) {
    $fadeAll.removeClass("fadeIn");
  }
}
function clickAndroidBackButton() {
  if (pageApp) {
    if (onGame && loopOn && !pause) {
      stopAllStage();
    } else {
      gotoAppUrl("index.html?back=1");
    }
  } else {
    exitApp();
  }
}
function pageIndexReady() {
  cloud.sync(storage.restoreMixFromDB);
  removeTransition($("#fade-all"), "fadeIn", "opacity", function () {
    if (window.cordova) {
      $("#fade-all").removeClass("white");
    }
  });
  if (getParameterByName("skipintro")) {
    introComplete();
    return false;
  }
  afterPP();
}
function afterPP() {
  checkRatingModul(function () {
    setTimeout(launchIntro, 0x7d0);
  });
}
function launchIntro() {
  $("#page-splash #sp-title").addClass("titleTweenUp");
  $("#page-splash #sp-baseline").addClass("baselineTweenUp");
  $("#page-splash #sp-experience").html(STR("txt.useHeadphones")).addClass("experienceTweenUp");
  $("#page-splash #sp-headphone").addClass("headphoneTweenUp");
  setTimeout(function () {
    $("#page-splash #sp-title").addClass("titleTweenUpHide");
    $("#page-splash #sp-experience").addClass("experienceTweenUpHide");
    $("#page-splash #sp-choose").html(STR("txt.selectVersion")).addClass("chooseTweenUp");
    $("#page-splash #sp-headphone").addClass("headphoneTweenUpHide").one(animationEnd, introComplete);
  }, 0x9c4);
}
function introComplete() {
  $homeBtInfo.on(pointerEventType.down, popupInfo).addClass("animate");
  $homeBtParam.on(pointerEventType.down, popupParam).addClass("animate");
  $homeBtFs.on(pointerEventType.down, function () {
    callParentWindow("openFullscreen");
  }).addClass("animate");
  activeBtNews();
  $("#page-splash").addClass("enabled");
  $("#page-splash #sp-select .vicon").addClass("iconTweenUp").on(pointerEventType.up, switchVersion);
  createFocus("index-select");
}
document.addEventListener(window.cordova ? "deviceready" : "DOMContentLoaded", pageLoadComplete, false);
var rateShown = false;
function checkRatingModul(g) {
  var j;
  var k;
  var l = 0x0;
  function p(q) {
    if (0x1 == q) {
      storage.setItem("ratemsg", "false:0");
    } else if (0x2 == q) {
      storage.removeItem("ratemsg");
    } else {
      storage.removeItem("ratemsg");
      openURL(isIOS || window.electron && isOSX ? build.storeRateURL : "https://play.google.com/store/apps/details?id=com.sofarsogood.incredibox");
    }
    g();
  }
  if (!((window.cordova || window.electron) && hasNetwork && !(null != storage.getItem("param-safe")) && false && ((null == storage.getItem("ratemsg") || "undefined" === storage.getItem("ratemsg")) && storage.setItem("ratemsg", "true:0"), null == (j = storage.getItem("ratemsg")) || "undefined" === (j = storage.getItem("ratemsg")) || (j = String(j).split(":"), k = Boolean("true" == j[0x0]), l = Number(j[0x1]), k && (0x5 <= ++l ? (rateShown = true, boxDialog.open(STR("pop.rateText"), STR("pop.rateTitle"), [STR("bt.nope"), STR("bt.later"), STR("bt.sure")], [function () {
    p(0x1);
  }, function () {
    p(0x2);
  }, function () {
    p(0x3);
  }])) : storage.setItem("ratemsg", "true:" + String(l)))), rateShown))) {
    g();
  }
}
function reinitRatingModul() {
  storage.setItem("ratemsg", "true:0");
}
function showPopupPP(g) {
  g();
}
var app;
var clock;
var mainCanvas;
var contextCanvas;
var localMixObject;
var mixlink = getParameterByName("mix");
var miniPlayer = null != mixlink || "1" == getParameterByName("replay");
var appNumberVersion = miniPlayer && mixlink ? mixlink.slice(-0x1) : getParameterByName("v");
var appVersion = pageApp && (null == appNumberVersion || "undefined" === appNumberVersion || isNaN(appNumberVersion) || 0x1 != appNumberVersion.length) ? 0x4 : appNumberVersion;
var appVersion = pageApp && miniPlayer && mixlink && -0x1 == mixlink.indexOf("-") && 0xd == mixlink.length ? 0x2 : appVersion;
var appLoaded = false;
var appViewed = false;
var modeWatch = false;
var isBackToHome = false;
var onGame = false;
var loopOn = false;
var pause = false;
function pageAppReady() {
  initRightClick();
  initSilentMode();
  listenFocus();
  initAd();
  contextCanvas = $("#cnv-stage")[0x0].getContext("2d");
  initAudioContext();
  initAudioRoute();
  $home.addClass("animate");
  $home[0x0].onanimationend = () => {
    $home.removeClass("animate");
  };
  removeTransition($fadeAll, "fadeIn", "opacity", function () {
    (miniPlayer ? displayHomeReplay : (initMixlist(), showHome))();
  });
}
var loopDuration;
var nbPoloMax;
var mixToWatchLoaded = false;
var displayHomeReplayWaiting = false;
function tryToLoadMix() {
  xhr("GET", "https://www.incredibox.com/ph3/get-mix-db.php", {
    "id": mixlink
  }, function (h) {
    mixToWatchLoaded = !(mixToWatch = null);
    if ("success" == h.state) {
      mixToWatch = h.mixlist[0x0];
    } else {
      popupGeneralError({
        "error": "load mix",
        "action": "kill"
      });
    }
    if (displayHomeReplayWaiting) {
      displayHomeReplay();
    }
  }, function (h) {
    popupGeneralError({
      "error": "mix not found",
      "action": "kill"
    });
    mixToWatchLoaded = true;
  });
}
function prepareMixReplay(g) {
  mixToWatchLoaded = true;
  mixToWatch = g;
}
function displayHomeReplay() {
  if (mixToWatchLoaded) {
    if (mixToWatch.dedi && "" != mixToWatch.dedi) {
      $("#home #home-dedicated").html(STR("txt.dedicatedTo").replace("%{name}", mixToWatch.dedi));
      $("#home #home-dedicated").addClass("animate");
    }
    $fadeAll.removeClass("fadeIn");
    if (!(null == mixToWatch || "undefined" === mixToWatch)) {
      parseXmlAndCheckAssets();
      showHomeLoadbar();
    }
  } else {
    displayHomeReplayWaiting = true;
    if (!isIframe) {
      tryToLoadMix();
    }
  }
}
function showHome() {
  unlock();
  unlockScreenEdges();
  $fadeAll.removeClass("fadeIn");
  $homeTitre.addClass("animate");
  $homeVersion.addClass("animate");
  if (!(appViewed = miniPlayer && appBrowserSchool ? true : appViewed)) {
    appViewed = true;
    (appLoaded ? showBtHome : showHomeLoadbar)();
    $homeBtSwitch.on(pointerEventType.down, function (h) {
      preventAction(popupSwitch);
    }).addClass("animate");
    $homeBtInfo.on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(popupInfo);
    }).addClass("animate");
    $homeBtParam.on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(popupParam);
    }).addClass("animate");
    $homeBtFs.on(pointerEventType.down, function (h) {
      h.preventDefault();
      callParentWindow("openFullscreen");
    }).addClass("animate");
    activeBtNews();
  }
}
function showHomeLoadbar() {
  $homeLoadbox.addClass("animate");
  preparerArray();
}
function hideHomeLoadbar() {
  $homeLoadbox.removeClass("animate");
  if (miniPlayer) {
    if (appBrowserSchool) {
      callParentWindow("replayIsReady", {
        "func": function () {
          if (loopOn) {
            clickBtClock();
          } else {
            forceUserGesture(function () {
              clickBtWatch(mixToWatch);
            });
          }
        }
      });
    } else {
      showBtPlayListen();
    }
  } else {
    showBtHome(true);
  }
}
function showBtPlayListen() {
  $homeBtPlay.on(pointerEventType.down, function () {
    $homeBtPlay.addSpinner();
    forceUserGesture(function () {
      clickBtWatch(mixToWatch);
      callParentWindow("replayStart", mixToWatch);
    });
  });
  $homeBtPlay.addClass("animate");
  var g = 0x0;
  $body.on(pointerEventType.down, function (h) {
    g = window.top.scrollY;
  });
  $body.on(pointerEventType.up, function (h) {
    if (window.top.scrollY == g && loopOn) {
      clickBtClock();
    }
  });
  $lockPause.off();
}
function showBtHome(g) {
  if (g) {
    createFocus("home");
  }
  $homeBtPlay.addClass("animate");
  $homeBtList.addClass("animate");
  $homeBtPlay.on(pointerEventType.down, function () {
    lock();
    $homeBtPlay.addSpinner();
    forceUserGesture(clickHomeBtPlay);
  });
  $homeBtList.on(pointerEventType.down, function () {
    if (appBrowser) {
      dialogGetApp();
    } else {
      lock();
      $homeBtList.addSpinner();
      forceUserGesture(clickHomeBtPlaylist);
    }
  });
  if (debugGame) {
    clickHomeBtPlay();
  }
}
function clickHomeBtPlaylist() {
  deleteFocus();
  lock();
  TweenMax.delayedCall(0.5, function () {
    unlock();
    openPlaylist();
  });
}
function clickHomeBtPlay() {
  if (appBrowserSchool && !miniPlayer) {
    callParentWindow("clickBtPlay");
  }
  deleteFocus();
  addTransition($fadeAll, "fadeIn", "opacity", function () {
    callAd("start", "new-game", hideHome);
  });
}
function hideHome() {
  lock();
  lockScreenEdges();
  detectSilentMode();
  onGame = !(isBackToHome = false);
  $home.hide();
  $incredibox.addClass("show");
  document.body.classList.remove("darkback");
  $homeBtPlay.removeSpinner();
  renderRAF.start();
  if (modeWatch) {
    prepareReplayMode();
    afficherAllPolo(true);
  } else {
    showDiv($boxBtBonus);
    showDiv($boxPicto);
    showDiv($boxLoaderPolo);
    baisserAllPolo();
  }
  removeTransition($fadeAll, "fadeIn", "opacity", lancerApp);
}
function backToHome(g) {
  deleteFocus();
  lock();
  isBackToHome = true;
  pictoForceOnDrop();
  addTransition($fadeAll, "fadeIn", "opacity", function () {
    hideGame();
    if (g) {
      g();
    }
  });
}
function hideGame() {
  document.body.classList.add("darkback");
  onGame = false;
  stopAllStage();
  renderRAF.stop();
  closeTool();
  checkIfPopupOpen();
  $home.show();
  $incredibox.removeClass("show");
  removeTransition($fadeAll, "fadeIn", "opacity", showHome);
  if (modeWatch) {
    reinitModeWatch();
    createFocusFromHistory();
  } else {
    focusHistory = [];
    createFocus("home");
  }
}
function lancerApp() {
  $fadeAll.removeClass("fadeIn");
  if (modeWatch) {
    startReplayMode();
  } else {
    unlock();
    afficherAllPolo();
    createFocus("toolbar");
    if (null == storage.getItem("popupDragViewed") || "undefined" === storage.getItem("popupDragViewed")) {
      setTimeout(popupDrag, 0x258);
    }
  }
  saveGA("game", "launch");
}
var listPolo;
var listPicto;
var readingBar;
var randomMix;
var recordMix;
var replayMix;
var listBonus = [];
var listPoloDrop = [];
var listPoloToRemove = [];
var listPoloToSolo = [];
var poloAllVisible = false;
var modeRandom = false;
var modeRecord = false;
var modeReplay = false;
var waitForRecording = false;
var mouseX = 0x0;
var mouseY = 0x0;
function createGame() {
  appLoaded = true;
  loopDuration = app.looptime;
  nbPoloMax = app.nbpolo;
  stepAnimation = frameHalf / loopDuration;
  stepPercent = 0x64 / loopDuration;
  tabBuffer.metro[0x0].snd = audioCtx.createBuffer(0x2, 0xac44 * (app.looptime / 0x3e8), 0xac44);
  (sndMetronome = new SoundObject("metronome")).setSilence();
  (clock = new ClockObject("cnv-clock")).init(0x4c, 0x4c, 0x1, 0x44, 0x10);
  renderRAF = new RenderRAF(renderLoop);
  mainCanvas = new CanvasObj("cnv-stage");
  if (miniPlayer) {
    (recordMix = function () {}).xmlAction = function () {};
    randomMix = function () {};
  } else {
    randomMix = new RandomMix();
    recordMix = new RecordMix();
  }
  replayMix = new ReplayMix();
  readingBar = new ReadingBar("#reading-bar", app.recminloop, app.recmaxloop);
  listPolo = createBoxPolo();
  majListPoloDrop();
  listPicto = createBoxPicto();
  createBtBonus();
  listBonus = createBoxBonus();
  document.getElementById("box-stage-bck").style.backgroundImage = "url(" + listImages.gameBck.src + ")";
  if (!miniPlayer) {
    document.querySelectorAll(".picto .bck").forEach(h => {
      h.style.backgroundImage = "url(" + listImages.gamePicto.src + ")";
    });
  }
  enableBtGame();
  resizeApp();
}
function createBoxPicto() {
  var h = [];
  var j = "";
  var k = "";
  var l = 0x0;
  for (var l = 0x0; l < nbSound; l++) {
    var m = "<div class=\"picto\" id=\"picto" + l + "\" data-picto-num=\"" + l + "\"><div class=\"bck\"></div><div class=\"hitzone\"></div></div>";
    if (l < 0xa) {
      j += m;
    } else {
      k += m;
    }
  }
  $boxPicto.find(".pictoline.top").html(j);
  $boxPicto.find(".pictoline.bot").html(k);
  for (l = 0x0; l < nbSound; l++) {
    h.push(new PictoObject(l, $boxPicto));
  }
  return h;
}
function createBoxPolo() {
  var h = [];
  var i = "";
  var j = "";
  var k = 0x0;
  for (var k = 0x0; k < nbPoloMax; k++) {
    i += "\n\t\t\t<div class=\"polo\" data-polo-id=\"" + k + "\">\n\t\t\t\t<div class=\"ctrl\">\n\t\t\t\t\t<div class=\"cbt icon-game-bt-mute\"><svg class=\"icn-svg\"><use xlink:href=\"#ic-mute\"></use></svg></div>\n\t\t\t\t\t<div class=\"cbt icon-game-bt-solo\"><svg class=\"icn-svg\"><use xlink:href=\"#ic-solo\"></use></svg></div>\n\t\t\t\t\t<div class=\"cbt icon-game-bt-delete\"><svg class=\"icn-svg\"><use xlink:href=\"#ic-close\"></use></svg></div>\n\t\t\t\t</div>\n\t\t\t</div>";
    j += "\n\t\t\t<div class=\"zone\" data-polo-id=\"" + k + "\">\n\t\t\t\t<div class=\"loader\">\n\t\t\t\t\t<div class=\"bar\"></div>\n\t\t\t\t</div>\n\t\t\t</div>";
  }
  document.querySelector("#box-polo").innerHTML = i;
  document.querySelector("#box-loader-polo").innerHTML = j;
  for (k = 0x0; k < nbPoloMax; k++) {
    h.push(new PoloObject(k, contextCanvas));
  }
  return h;
}
function createBoxBonus() {
  var h = [];
  for (var j = 0x0; j < nbBonus; j++) {
    var k = app.bonusarray[j];
    var l = k.code.split(",");
    var m = $("#bt-bonus-" + (j + 0x1));
    var p = 0x0;
    for (var q = l.length; p < q; p++) {
      var u = app.animearray[l[p] - 0x1].color;
      $(".svg.q" + (p + 0x1) + " svg", m).css({
        "fill": "#" + u
      });
    }
    if (!tabBuffer.bonus[j].aspire) {
      tabBuffer.bonus[j].aspire = audioCtx.createBuffer(0x2, 0xac44 * (app.looptime / 0x3e8), 0xac44);
    }
    k = new BonusObject(j, k, tabBuffer.bonus[j]);
    h.push(k);
  }
  return h;
}
function createBtBonus() {
  var g = "";
  for (var h = 0x1; h <= nbBonus; h++) {
    g += "\n\t\t\t<div class=\"bt-bonus\" id=\"bt-bonus-" + h + "\">\n\t\t\t\t<div class=\"circle\"></div>\n\t\t\t\t<div class=\"quarter\">\n\t\t\t\t\t<div class=\"svg q0\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M83.88,29.72A42.83,42.83,0,1,0,86,43,43,43,0,0,0,83.88,29.72ZM43,58.64A15.69,15.69,0,0,1,27.36,43,15.64,15.64,0,1,1,52.18,55.64,15.52,15.52,0,0,1,43,58.64Z\"/></svg></div>\n\t\t\t\t\t<div class=\"svg q1\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M57.87,38.17l26-8.45A43,43,0,0,0,43,0V27.36A15.65,15.65,0,0,1,57.87,38.17Z\"/></svg></div>\n\t\t\t\t\t<div class=\"svg q2\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M83.88,29.72l-26,8.45a15.58,15.58,0,0,1-5.69,17.47L68.25,77.75a42.83,42.83,0,0,0,15.63-48Z\"/></svg></div>\n\t\t\t\t\t<div class=\"svg q3\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M52.18,55.64a15.55,15.55,0,0,1-18.36,0L17.75,77.75a42.77,42.77,0,0,0,50.5,0Z\"/></svg></div>\n\t\t\t\t\t<div class=\"svg q4\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M27.36,43a15.71,15.71,0,0,1,.77-4.83l-26-8.45a42.88,42.88,0,0,0,15.64,48L33.82,55.64A15.61,15.61,0,0,1,27.36,43Z\"/></svg></div>\n\t\t\t\t\t<div class=\"svg q5\"><svg x=\"0px\" y=\"0px\" width=\"86px\" height=\"86px\" viewBox=\"0 0 86 86\"><path d=\"M43,27.36V0A43,43,0,0,0,2.11,29.72l26,8.45A15.65,15.65,0,0,1,43,27.36Z\"/></svg></div>\n\t\t\t\t</div>\n\t\t\t\t<canvas id=\"canvas-bt-bonus-" + h + "\" width=\"86\" height=\"86\"></canvas>\n\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t<div class=\"icn-bck\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"hitzone\"></div>\n\t\t\t\t<div class=\"box-loader\">\n\t\t\t\t\t<div class=\"zone\"><div class=\"loader\"><div class=\"bar\"></div></div></div>\n\t\t\t\t</div>\n\t\t\t</div>";
  }
  $boxBtBonus.append(g);
}
var isToolbarOpen = false;
var isToolbarMove = false;
function enableBtGame() {
  $btBack.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickTool);
    }
  });
  $btStop.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove && loopOn) {
      preventAction(clickBtStop);
    }
  });
  $btRandom.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtRandom);
    }
  });
  $btRecord.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtRecord);
    }
  });
  $btHome.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtHome);
    }
  });
  $btHelp.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtHelp);
    }
  });
  $btSwitch.on(pointerEventType.down, function (h) {
    h.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickBtSwitch);
    }
  });
  enableBtTool();
  enablePictoDraggable();
}
function enableBtTool() {
  $btTool.on(pointerEventType.down, function (g) {
    g.preventDefault();
    if (!isToolbarMove) {
      preventAction(clickTool);
    }
  });
}
function clickTool() {
  isToolbarMove = true;
  (isToolbarOpen ? closeTool : openTool)();
}
function openTool() {
  deleteFocus();
  document.body.addEventListener(pointerEventType.down, clickStage);
  addTransition($boxBt, "open", "transform", endToolMove, true);
  isToolbarOpen = true;
}
function closeTool() {
  deleteFocus();
  document.body.removeEventListener(pointerEventType.down, clickStage);
  removeTransition($boxBt, "open", "transform", endToolMove);
  isToolbarOpen = false;
}
function endToolMove() {
  isToolbarMove = false;
  if (onGame) {
    createFocus(isToolbarOpen ? "toolbar-open" : "toolbar");
  }
}
function clickStage(g) {
  if (!$boxBt[0x0].contains(g.target)) {
    clickTool();
  }
}
function clickBtStop() {
  stopAllStage();
}
function clickBtHome() {
  backToHome();
}
function clickBtRandom() {
  startRandomMode();
}
function clickBtRecord() {
  startRecordMode();
}
function clickBtHelp() {
  backToHome(popupInfo);
}
function clickBtSwitch() {
  backToHome(popupSwitch);
}
function baisserAllPolo() {
  if (poloAllVisible) {
    poloAllVisible = false;
    for (var g = 0x0; g < nbPoloMax; g++) {
      listPolo[g].baisser();
    }
  }
}
function afficherAllPolo(g) {
  if (!poloAllVisible) {
    poloAllVisible = true;
    for (var h = 0x0; h < nbPoloMax; h++) {
      listPolo[h].remonte(0.03 * h, false, g);
    }
  }
}
function habillerPolo(g, h, j, k) {
  j = null == j || "undefined" === j ? 0x0 : j;
  var m = h.id;
  var m = tabAnime[m];
  g.habiller(h, cntBoucle, m, j, k);
  if (loopOn) {
    g.showLoader();
    g.activerClick();
  } else if (!waitingFirstLoop) {
    waitingFirstLoop = true;
    checkAudioCanRun().then(() => {
      startFirstLoop();
    })["catch"](p => {
      rebuildAudioContext().then(() => {
        startFirstLoop();
      })["catch"](() => {
        stopAllStage();
        popupGeneralError({
          "error": "Audio",
          "action": "reload"
        });
      });
    });
  }
}
function startFirstLoop() {
  waitingFirstLoop = false;
  globalVolumeFadeIn();
  enableClickFirstPolos();
  startLoop();
  if (waitForRecording) {
    startRecording();
  }
  enableBtClock();
}
function enableClickFirstPolos() {
  for (var g = 0x0; g < nbPoloMax; g++) {
    var h = listPolo[g];
    if (h.getBusy()) {
      h.activerClick();
    }
  }
}
function clickPolo(g) {
  if (!(bonusPlaying || modeRandom || ((g = g).desactiverClick(), getRemainingTime() < 0x1f4 ? listPoloToRemove.push(g) : removePolo(g), 0x0 !== (g = getListPoloBusy().length) && g != listPoloToRemove.length))) {
    stopLoop();
  }
}
function mutePolo(g) {
  g.mute();
}
function unmutePolo(g) {
  g.unmute();
}
function soloPolo() {
  var g = getListPoloBusy();
  var h = g.length;
  for (var i = 0x0; i < h; i++) {
    var j = g[i];
    if (j.getSolo()) {
      j.unmute();
    } else {
      j.mute();
    }
  }
}
function muteAll(g) {
  var j = getListPoloBusy();
  var k = j.length;
  for (var l = 0x0; l < k; l++) {
    var m = j[l];
    if (m.id != g.id) {
      m.setSolo(false);
      m.mute();
    } else {
      m.setSolo(true);
      m.unmute();
    }
  }
}
function unmuteAll() {
  var g = getListPoloBusy();
  var h = g.length;
  for (var i = 0x0; i < h; i++) {
    var j = g[i];
    j.setSolo(false);
    listPoloToSolo.push(j);
  }
  if (getRemainingTime() > 0x1f4) {
    checkPoloToSolo();
  }
}
function checkPoloToSolo() {
  var h = 0x0;
  for (var i = listPoloToSolo.length; h < i; h++) {
    listPoloToSolo[h].unmute();
  }
  listPoloToSolo = [];
}
function getTotalSolo() {
  var g = getListPoloBusy();
  var h = g.length;
  var i = 0x0;
  for (var j = 0x0; j < h; j++) {
    if (g[j].getSolo()) {
      i++;
    }
  }
  return i;
}
function stopSoloPolo() {
  var g = getListPoloBusy();
  var h = g.length;
  for (var i = 0x0; i < h; i++) {
    var j = g[i];
    listPoloToSolo.push(j);
  }
  if (getRemainingTime() > 0x1f4) {
    checkPoloToSolo();
  }
}
function stopOtherSolo() {
  var g = getListPoloBusy();
  var h = g.length;
  for (var i = 0x0; i < h; i++) {
    g[i].setSolo(false);
  }
}
function removePolo(g, h, i) {
  checkerCodeBonus(g.getPicto(), false);
  if (0x1 == getTotalSolo() && g.getSolo()) {
    g.setSolo(false);
    stopSoloPolo();
  }
  g.deshabiller(h, bonusPlaying);
  g.desactiverClick();
  g.stopSound(i);
  h = getListPoloBusy();
  if (0x1 == h.length && (g = h[0x0]).getSolo() && isMouseDevice && !isTouchDevice) {
    g.setSolo(false);
  }
}
function checkPoloToRemove(g) {
  var h = listPoloToRemove.length;
  var j = bonusPlaying ? 0.01 : 0.03;
  var k = 0x0;
  for (var l = h - 0x1; k < h; k++, l--) {
    removePolo(listPoloToRemove[k], l * j, g);
  }
  listPoloToRemove = [];
}
function poloStartWatchPicto() {
  var h = 0x0;
  for (var i = listPoloDrop.length; h < i; h++) {
    if ("hover" != listPoloDrop[h].state) {
      listPoloDrop[h].mode("regarde");
    }
  }
}
function poloStopWatchPicto() {
  var g = 0x0;
  for (var h = listPoloDrop.length; g < h; g++) {
    listPoloDrop[g].mode("normal");
  }
}
function checkPictoHoverPolo(g) {
  var i = 0x0;
  for (var j = listPoloDrop.length; i < j; i++) {
    var k = listPoloDrop[i];
    if (k.hitTestPicto(g)) {
      k.rollover();
      k.pictoHoverId = g.id;
    } else if (k.pictoHoverId == g.id) {
      k.rollout();
      k.pictoHoverId = null;
    }
  }
}
function pictoOnDrop(g, h) {
  var j;
  var k = 0x0;
  var h = !!(null != h && "undefined" !== h) && h;
  var l = listPoloDrop.length;
  var m = false;
  if (!h && !isBackToHome) {
    for (k = 0x0; k < l; k++) {
      if (!m) {
        if ((j = listPoloDrop[k]).hitTestPicto(g)) {
          m = true;
          pictoTouchePolo(j, g);
        }
      }
    }
  }
  if (m) {
    majListPoloDrop();
    listPoloDrop.length;
  } else {
    g.replacer();
  }
}
function pictoTouchePolo(g, h, i, j) {
  h.absorber(g);
  checkerCodeBonus(h, true);
  habillerPolo(g, h, i, j);
  if (0x0 < getTotalSolo()) {
    g.mute();
  }
}
function majListPoloDrop() {
  listPoloDrop = [];
  for (var g = 0x0; g < nbPoloMax; g++) {
    var h = listPolo[g];
    if (!h.getBusy()) {
      listPoloDrop.push(h);
    }
  }
}
var btClockClickedAt = 0x0;
function clickBtClock() {
  if (0x15e < new Date().getTime() - btClockClickedAt) {
    pauseGame();
    btClockClickedAt = new Date().getTime();
  }
}
function enableBtClock() {
  $btClock.off().on(pointerEventType.down, function (g) {
    g.preventDefault();
    preventAction(clickBtClock);
  }).addClass("enable");
}
function disableBtClock() {
  $btClock.off().removeClass("enable");
}
var curBonus = null;
function clickBtBonus(g) {
  bonusWaiting = true;
  curBonus = listBonus[(bonusQueue = g) - 0x1];
  checkSndAspiration(true);
  g = decimal(getRemainingTime(!!app.bonusloopA && !boucleA) / 0x3e8, 0x2);
  g = (g = g - 0.5) < 0.5 ? 0x0 : g;
  TweenMax.delayedCall(g, showBlackFadeAtStart);
}
function cancelClickBtBonus() {
  if (bonusWaiting) {
    stopBonusVideo();
  }
}
function showBlackFadeAtStart() {
  $boxVideo.addClass("visible");
  $fadeVideo[0x0].offsetHeight;
  $fadeVideo.addClass("animateFadeIn");
  if (!(modeReplay || modeRandom || miniPlayer)) {
    hideDiv($boxPicto, true);
    hideDiv($boxLoaderPolo, true);
  }
}
function blackFadeRemoved() {
  $boxVideo.removeClass();
  $fadeVideo.removeClass();
  if (!(modeReplay || modeRandom || miniPlayer)) {
    $boxStage.removeClass("pointerlock");
    showDiv($boxPicto, true);
    showDiv($boxLoaderPolo, true);
  }
}
function videoSlideDown() {
  if (bottomNeedSlide && !miniPlayer) {
    $body.addClass("bottomSlide");
  }
}
function launchBonusVideo() {
  $boxVideo.addClass("visible");
  $boxStage.addClass("pointerlock");
  $fadeVideo.removeClass();
  pictoForceOnDrop();
  videoSlideDown();
  curBonus.play();
  bonusPlaying = !(bonusWaiting = false);
}
function stopBonusVideo() {
  killTransitionBonus();
  if (curBonus) {
    curBonus.stop();
  }
  videoFadeOut();
  bonusPlaying = bonusWaiting = false;
  cntBoucleBonus = bonusQueue = 0x0;
  curBonus = null;
}
function videoFadeOut() {
  if ($boxVideo.hasClass("visible")) {
    $fadeVideo.removeClass().addClass("show");
    $fadeVideo[0x0].offsetHeight;
    if ($body.hasClass("bottomSlide")) {
      $body.removeClass("bottomSlide");
      $boxVideo.one(transitionEnd, function () {
        $fadeVideo.addClass("animateFadeOut").one(animationEnd, blackFadeRemoved);
      });
    } else {
      $fadeVideo.addClass("animateFadeOut").one(animationEnd, blackFadeRemoved);
    }
  } else {
    blackFadeRemoved();
  }
}
function killTransitionBonus() {
  TweenMax.killTweensOf(showBlackFadeAtStart);
}
function checkerCodeBonus(g, h) {
  var i = g.id + 0x1;
  for (var j = 0x0; j < nbBonus; j++) {
    listBonus[j].checkCode(i, h);
  }
}
function checkUnlockNextBonus() {
  var h;
  var i;
  if (!(modeReplay || modeRandom)) {
    h = curBonus.getId();
    i = "v" + appVersion + "-bonus-complete";
    if ((storage.getItem(i) || 0x0) <= h && h < nbBonus - 0x1) {
      storage.setItem(i, i = h + 0x1);
      listBonus[i].unlockme();
      popupBonusFindNext();
    }
  }
}
function showDiv(g, h, i) {
  if (h) {
    addTransition(g, "fade", "opacity", i);
  } else {
    g.removeClass("fade");
  }
  g.removeClass("hide");
}
function hideDiv(g, h, i) {
  if (h) {
    addTransition(g, "fade", "opacity", i);
  } else {
    g.removeClass("fade");
  }
  g.addClass("hide");
}
var timenow;
var timespent;
var renderRAF;
var sndMetronome;
var waitingFirstLoop = false;
var bonusPlaying = false;
var bonusWaiting = false;
var shouldImmediatePlayBonus = false;
var bonusQueue = 0x0;
var leaveApp = false;
var boucleA = true;
var cntBoucle = 0x0;
var cntBoucleBonus = 0x0;
var timeremain = 0x0;
var pctMetronome = 0x0;
var pctMetronomeBoucleA = 0x0;
var frame = 0x0;
var frameTotal = 0x0;
var frameHalf = 0x0;
var framePart2 = 0x0;
var stepAnimation = 0x0;
var stepPercent = 0x0;
var currentSndPart = 0x0;
var startboucle = 0x0;
var pausedAt = 0x0;
function loopFinished() {
  checkPoloToRemove();
  checkPoloToSolo();
  if (modeRandom) {
    randomMix.loop();
  }
  if (modeReplay) {
    if (replayMix.waitForReloop && cntBoucleBonus == curBonus.nbLoop) {
      replayMix.waitForReloop = false;
      replayMix.reloop = true;
    }
    readingBar.loop();
  }
  if (loopOn) {
    startLoop();
  }
  if (modeRecord) {
    readingBar.loop();
  }
}
function startLoop() {
  if (bonusPlaying && cntBoucleBonus == curBonus.nbLoop && app.bonusendloopA && !boucleA) {
    boucleA = true;
  }
  if (0x0 == cntBoucle) {
    keepAppAwake();
  }
  startboucle = new Date().getTime();
  loopOn = true;
  frame = 0x0;
  currentSndPart = boucleA ? framePart2 = 0x0 : (framePart2 = frameHalf, 0x1);
  clock.start(loopDuration, boucleA);
  sndMetronome.prepare(tabBuffer.metro[0x0].snd);
  if (modeReplay && readingBar.isLastLoop()) {
    sndMetronome.onComplete(readingBar.loop);
  } else {
    sndMetronome.onComplete(loopFinished);
  }
  if (bonusWaiting || bonusPlaying) {
    playBonus();
  }
  if (!bonusPlaying) {
    playSounds();
  }
  checkSndAspiration();
  sndMetronome.play();
  cntBoucle++;
  boucleA = !boucleA;
}
function checkSndAspiration(g) {
  if (bonusWaiting) {
    if (g) {
      if ((boucleA || !app.bonusloopA) && 0x258 < getRemainingTime()) {
        curBonus.playAspiration(decimal((loopOn || undefined ? timenow - startboucle : 0x0) / 0x3e8, 0x2));
      }
    } else if (!boucleA) {
      curBonus.playAspiration(0x0);
    }
  }
}
function stopLoop() {
  boucleA = !(loopOn = false);
  currentSndPart = cntBoucle = 0x0;
  clock.stop();
  stopBonusVideo();
  checkPoloToRemove(bonusPlaying);
  sndMetronome.stop();
  disableBtClock();
  if (modeRecord) {
    stopRecordMode();
  }
  if (modeReplay) {
    stopReplayMode();
  }
  stopKeepingAppAwake();
}
function playBonus() {
  var g = !app.bonusloopA || boucleA;
  if ((g = modeReplay ? !!replayMix.waitForReloop || g : g) && !bonusPlaying) {
    launchBonusVideo();
    hidePoloLoader();
  }
  if (bonusPlaying && ++cntBoucleBonus > curBonus.nbLoop) {
    checkUnlockNextBonus();
    stopBonusVideo();
  }
}
function playSounds() {
  for (var g = 0x0; g < nbPoloMax; g++) {
    var h = listPolo[g];
    if (h.getBusy()) {
      if (h.waitOneLoop) {
        h.showLoader();
        h.waitOneLoop = false;
      } else {
        playSoundPolo(h);
      }
    }
  }
}
function playSoundPolo(g) {
  var h = 0x0 == currentSndPart ? "sndA" : "sndB";
  g.sound.prepare(tabBuffer.sound[g.getAssetId()][h]);
  g.hideLoader();
  if (!(g.getMute() || g.getHide())) {
    g.mode("anime");
  }
  g.playSound();
}
function renderLoop() {
  timenow = new Date().getTime();
  timespent = loopOn || undefined ? timenow - startboucle : 0x0;
  timeremain = loopDuration - (loopOn || undefined ? timenow - startboucle : 0x0);
  pctMetronome = timespent * stepPercent;
  pctMetronomeBoucleA = app.bonusloopA ? decimal(0x64 - (pctMetronomeBoucleA = getRemainingTime(!boucleA) * stepPercent) / 0x2, 0x2) : pctMetronome;
  frame = Math.floor(timespent * stepAnimation);
  clock.render();
  readingBar.render();
  if (!(null == curBonus || "undefined" === curBonus)) {
    if (bonusPlaying) {
      curBonus.render();
    }
  }
  if (!bonusPlaying) {
    mainCanvas.clear();
    for (var h = 0x0; h < nbPoloMax; h++) {
      listPolo[h].draw();
    }
  }
}
function stopAllStage() {
  if (modeRandom) {
    stopRandomMode();
  }
  pictoForceOnDrop();
  var h = getListPoloBusy();
  var i = 0x0;
  for (var j = h.length; i < j; i++) {
    var k = h[i];
    listPoloToRemove.push(k);
  }
  i = 0x0;
  for (j = listBonus.length; i < j; i++) {
    listBonus[i].reinit();
  }
  globalVolumeFadeOut(stopLoop);
}
function hidePoloLoader() {
  var h = getListPoloBusy();
  var i = 0x0;
  for (var j = h.length; i < j; i++) {
    h[i].hideLoader();
  }
}
var gamePausedByUser = false;
function pauseGame() {
  (pause ? (gamePausedByUser = false, pauseOff) : (gamePausedByUser = true, pauseOn))();
}
function pauseOn() {
  if (!pause) {
    pause = true;
    pausedAt = new Date().getTime();
    $body.addClass("pause");
    pauseAudioContext();
    if (onGame) {
      if (isToolbarOpen) {
        closeTool();
      }
      if (loopOn && !froze && (clock.pause(), TweenMax.pauseAll(), curBonus)) {
        curBonus.pause();
      }
      if (froze) {
        clearTimeout(controlTimeout);
      }
      renderRAF.stop();
      pictoForceOnDrop();
      createFocus("game-paused");
    }
  }
}
function pauseOff() {
  if (pause && (pause = false, startboucle += new Date().getTime() - pausedAt, $body.removeClass("pause"), resumeAudioContext(), onGame)) {
    if (loopOn && !froze && (clock.resume(), TweenMax.resumeAll(), curBonus)) {
      curBonus.resume();
    }
    if (froze) {
      controlTimeoutComplete();
    }
    renderRAF.start();
    removeInFocusHistory("game-paused");
    createFocusFromHistory();
  }
}
function appOnPause() {
  pauseOn();
  leaveApp = true;
  lock();
  TweenMax.killTweensOf(appOnResumeComplete);
}
function appOnResume() {
  needToforceUserGesture = !(leaveApp = false);
  TweenMax.killTweensOf(appOnResumeComplete);
  TweenMax.delayedCall(0.25, appOnResumeComplete);
}
function appOnResumeComplete() {
  unlock();
  popupStillHere();
}
function clickPopupStillHere() {
  lock();
  forceUserGesture(function () {
    if (!gamePausedByUser) {
      pauseOff();
    }
    unlock();
  });
}
function pauseAudioContext() {
  globalVolumeFadeOut(() => {
    audioCtx.suspend().then(() => {})["catch"](h => {});
  });
}
function resumeAudioContext() {
  audioCtx.resume().then(() => {
    checkAudioCanRun().then(() => {
      globalVolumeFadeIn();
    })["catch"](h => {
      stopAllStage();
    });
  })["catch"](h => {
    stopAllStage();
  });
}
var audioCtx;
var froze = false;
function frozeScene() {
  if (!(pause || froze)) {
    loopOn = !(froze = true);
    sndMetronome.stop();
    immediateKillAllPolo();
    replayMix.stop();
    readingBar.froze();
    renderRAF.stop();
    clock.stop(true);
    mainCanvas.saveImage();
    mainCanvas.showImage();
    if (null != curBonus && "undefined" !== curBonus) {
      if (bonusWaiting) {
        stopBonusVideo();
      } else if (bonusPlaying) {
        killTransitionBonus();
        curBonus.sound.stop();
        curBonus.pause();
        bonusPlaying = false;
      }
    }
  }
}
function unfrozeScene(g) {
  var h;
  var i;
  if (!pause && froze) {
    h = curBonus;
    i = froze = false;
    replayMix.loop(g);
    renderRAF.start();
    readingBar.unfroze();
    if (h) {
      if (shouldImmediatePlayBonus) {
        if (curBonus.getId() != h.getId()) {
          h.stop();
        } else {
          i = true;
        }
      } else {
        stopBonusVideo();
      }
    }
    if (shouldImmediatePlayBonus) {
      shouldImmediatePlayBonus = false;
      replayMix.waitForReloop = true;
      startLoop();
      if (!i) {
        $fadeVideo[0x0].offsetHeight;
        $fadeVideo.removeClass().addClass("show animateFadeOut");
      }
    } else {
      mainCanvas.showImage();
    }
  }
}
function immediateKillAllPolo() {
  var g = getListPoloBusy();
  var h = 0x0;
  for (var i = g.length; h < i; h++) {
    checkerCodeBonus(g[h].getPicto(), false);
    g[h].stopSound();
    g[h].deshabiller(0x0, true);
    g[h].desactiverClick();
  }
}
function immediatePlayBonus(g, h) {
  bonusWaiting = shouldImmediatePlayBonus = true;
  (curBonus = listBonus[bonusQueue = g]).prepareVideo(h);
  cntBoucleBonus = h - 0x1;
}
function showPoloAndPictoInCombo(g) {
  var j = getListPoloBusy();
  var k = listBonus[g - 0x1];
  var l = [];
  var m = 0x0;
  for (var p = j.length; m < p; m++) {
    var q = j[m].getPicto().id;
    if (k.hasCode(q + 0x1)) {
      l.push(j[m].id);
    }
  }
  showPoloInArray(l);
  showPictoInCombo(g);
}
function showPoloInArray(g) {
  TweenMax.killTweensOf(stopShowPoloInArray);
  var h = getListPoloBusy();
  if (0x1 < h.length) {
    var j = 0x0;
    for (var k = h.length; j < k; j++) {
      var l = h[j];
      if (existInArray(g, l.id)) {
        if (l.getHide()) {
          l.stopHidingYourself();
        }
      } else {
        l.hideYourself();
      }
    }
  }
}
function stopShowingPoloInArray(g) {
  var h = getListPoloHidden();
  var g = g || 0x0;
  var g = decimal((new Date().getTime() - g) / 0x3e8, 0x2);
  TweenMax.delayedCall(g < 0x1 ? 0x1 : 0.1, stopShowPoloInArray, [h]);
}
function stopShowPoloInArray(g) {
  var h = 0x0;
  for (var i = g.length; h < i; h++) {
    g[h].stopHidingYourself();
  }
  stopShowPictoInCombo();
}
function showPictoInCombo(g) {
  stopShowPictoInCombo();
  var j = listBonus[g - 0x1].getCode();
  var k = j.length;
  var l = 0x0;
  for (var m = listPicto.length; l < m; l++) {
    var p = listPicto[l];
    for (var q = 0x0; q < k; q++) {
      if (!existInArray(j, p.id + 0x1)) {
        p.hideYourself();
      }
    }
  }
}
function stopShowPictoInCombo() {
  var g = 0x0;
  for (var h = listPicto.length; g < h; g++) {
    listPicto[g].stopHiddingYourself();
  }
}
function getStringDate(g, h) {
  g = -0x1 == g.indexOf("/") ? g.split("-").join("/") : g;
  var j;
  var k;
  var g = new Date(g);
  return h ? (h = g.getHours(), j = g.getMinutes(), k = g.getSeconds(), h = h < 0xa ? String("0" + h) : String(h), j = j < 0xa ? String("0" + j) : String(j), k = k < 0xa ? String("0" + k) : String(k), String(h + ":" + j + ":" + k)) : (h = g.getDate(), j = g.getMonth(), k = g.getFullYear(), g = h + " " + STR("txt.months")[j] + " " + k, "zh-cn" != currentLanguage.toLowerCase() && "zh-tw" != currentLanguage.toLowerCase() ? g : k + " 年 " + (j + 0x1) + " 月 " + h + " 日");
}
function getTimeSpent(g) {
  return loopOn || g ? timenow - startboucle : 0x0;
}
function getTimeRemain() {
  return loopDuration - (loopOn || undefined ? timenow - startboucle : 0x0);
}
function getRemainingTime(g) {
  return (g = undefined !== g && g) ? 0x2 * loopDuration - (new Date().getTime() - startboucle) : loopDuration - (new Date().getTime() - startboucle);
}
function getRemainingTimeBeforeBonus() {
  return getRemainingTime(!!app.bonusloopA && !boucleA);
}
function getRandomObject(g) {
  var h = Math.floor(Math.random() * g.length);
  return g.splice(h, 0x1)[0x0];
}
function getListPoloBusy() {
  var g = [];
  for (var h = 0x0; h < nbPoloMax; h++) {
    var i = listPolo[h];
    if (i.getBusy()) {
      g.push(i);
    }
  }
  return g;
}
function getListPoloUnmute() {
  var h = [];
  var j = getListPoloBusy();
  var k = 0x0;
  for (var l = j.length; k < l; k++) {
    var m = j[k];
    if (!m.getMute()) {
      h.push(m);
    }
  }
  return h;
}
function getListPoloFree() {
  var g = [];
  for (var h = 0x0; h < nbPoloMax; h++) {
    var i = listPolo[h];
    if (!i.getBusy()) {
      g.push(i);
    }
  }
  return g;
}
function getListPictoBusy() {
  var g = [];
  for (var h = 0x0; h < nbSound; h++) {
    var i = listPicto[h];
    if (i.used) {
      g.push(i);
    }
  }
  return g;
}
function getListPictoFree() {
  var h = [];
  for (var i = 0x0; i < nbSound; i++) {
    var j = listPicto[i];
    if (!j.used) {
      h.push(j);
    }
  }
  return h;
}
function getListPoloHidden() {
  var h = [];
  var j = getListPoloBusy();
  var k = 0x0;
  for (var l = j.length; k < l; k++) {
    var m = j[k];
    if (m.getHide()) {
      h.push(m);
    }
  }
  return h;
}
function lock() {
  $lockAll.addClass("show");
  pictoForceOnDrop();
}
function unlock() {
  $lockAll.removeClass("show");
}
var globalGain;
var globalFilter;
function rebuildAudioContext() {
  return new Promise(function (g, h) {
    killAudioContext();
    initAudioContext();
    audioCtx.resume().then(() => {
      g();
    })["catch"](j => {
      h(j);
    });
  });
}
function initAudioContext() {
  (audioCtx = new AudioContext()).onstatechange = checkStateAudioCtx;
  audioCtx.hasOwnProperty("sampleRate");
  audioCtx.hasOwnProperty("baseLatency");
  (globalGain = audioCtx.createGain()).connect(audioCtx.destination);
  globalGain.gain.value = 0x0;
}
function killAudioContext() {
  var g;
  var h;
  if (audioCtx) {
    g = audioCtx.createBuffer(0x2, 22050, 0xac44);
    (h = audioCtx.createBufferSource()).buffer = g;
    h.connect(audioCtx.destination);
    h.start(0x0);
    h.disconnect();
    audioCtx.close();
    audioCtx = null;
  }
}
function globalVolumeFadeOut(g) {
  globalGain.gain.cancelScheduledValues(audioCtx.currentTime);
  globalGain.gain.setTargetAtTime(0x0, audioCtx.currentTime, 0.015);
  setTimeout(() => {
    globalGain.gain.value = 0x0;
    if (g) {
      g();
    }
  }, 90);
}
function globalVolumeFadeIn(g) {
  globalGain.gain.cancelScheduledValues(audioCtx.currentTime);
  globalGain.gain.setTargetAtTime(0x1, audioCtx.currentTime, 0.015);
  setTimeout(() => {
    globalGain.gain.value = 0x1;
    if (g) {
      g();
    }
  }, 90);
}
function checkStateAudioCtx() {
  if (audioCtx && "running" != audioCtx.state && onGame && loopOn && !pause && !leaveApp) {
    appOnPause();
    appOnResume();
  }
}
function checkAudioCanRun() {
  return new Promise(function (h, i) {
    var j;
    if (audioCtx && audioCtx.currentTime) {
      j = audioCtx.currentTime;
      setTimeout(() => {
        if (j == audioCtx.currentTime) {
          i(new Error("audioCtx.currentTime is stuck"));
        } else {
          h();
        }
      }, 0x96);
    } else {
      i(new Error("audioCtx or audioCtx.currentTime is null"));
    }
  });
}
var needToforceUserGesture = true;
function forceUserGesture(g) {
  if (!needToforceUserGesture) {
    if (g) {
      g();
    }
    return false;
  }
  needToforceUserGesture = false;
  var i;
  var j = new SoundObject();
  j.setSilence();
  j.prepare(tabBuffer.sound[0x0].sndA);
  j.play();
  j.stop();
  if (listBonus.length) {
    i = 0x0;
    listBonus.forEach(function (k) {
      var l = k.video.currentTime;
      k.video.play().then(function () {
        k.video.pause();
        k.video.currentTime = l;
        if (++i == listBonus.length && g) {
          g();
        }
      })["catch"](function (m) {
        popupGeneralError({
          "error": "force video play"
        });
        throw new Error(m);
      });
    });
  } else if (g) {
    g();
  }
}
function initAudioRoute() {}
function initSilentMode() {}
function detectSilentMode() {}
function bugBluetoothLatency() {
  return false;
}
var SoundObject = function (g) {
  if ("object" != typeof audioCtx || !audioCtx) {
    throw new Error("Aucun AudioContxt n'a été déclaré");
  }
  var j = this;
  var k = null;
  var m = null;
  var p = null;
  var q = 0x0;
  var v = false;
  var w = false;
  var x = false;
  this.getMute = function () {
    return v;
  };
  this.getDuration = function () {
    return null != m ? m.duration : 0x0;
  };
  this.getCurrentTime = function () {
    return null != k && null != k.context ? k.context.currentTime : 0x0;
  };
  this.setSilence = function () {
    x = true;
  };
  this.setVolume = function (y) {
    p.gain.setValueAtTime(y, audioCtx.currentTime);
  };
  this.onComplete = function (y) {
    k.onended = y;
    0x0;
  };
  this.prepare = function (y, z) {
    m = y;
    p = audioCtx.createGain();
    (k = audioCtx.createBufferSource()).buffer = m;
    y = 0x0 == z || v || x ? 0x0 : 0x1;
    j.setVolume(y);
    k.connect(p);
    p.connect(globalGain);
    globalGain.connect(audioCtx.destination);
  };
  this.play = function (y, z) {
    w = true;
    q = (q = (q = decimal(y, 0x3) || 0x0) > j.getDuration() ? decimal(j.getDuration(), 0x2) - 0.01 : q) < 0x0 ? 0x0 : q;
    k.start(0x0, q);
    if (!(true !== z || v || x)) {
      j.fadeIn();
    }
  };
  this.stop = function (y) {
    if (y || null == k || !w || x || v) {
      j.stopSource();
    } else {
      j.fadeOut(true);
    }
  };
  this.stopSource = function () {
    if (null != k && w) {
      k.stop(0x0);
      k.onended = null;
    }
    q = 0x0;
    p = k = null;
    w = v = false;
  };
  this.fadeOut = function (y) {
    p.gain.setTargetAtTime(0x0, audioCtx.currentTime, 0.015);
    if (y) {
      k.stop(audioCtx.currentTime + 0.09);
      k.onended = j.stopSource;
    }
  };
  this.fadeIn = function () {
    p.gain.setTargetAtTime(0x1, audioCtx.currentTime, 0.015);
  };
  this.mute = function () {
    if (k && !x) {
      j.fadeOut();
    }
    v = true;
  };
  this.unmute = function () {
    if (k && !x) {
      j.fadeIn();
    }
    v = false;
  };
};
var pointerList = [];
function enablePictoDraggable() {
  document.body.addEventListener(pointerEventType.down, pictoPointerDown);
  document.body.addEventListener(pointerEventType.up, pictoPointerUp);
  document.body.addEventListener(pointerEventType.cancel, pictoPointerUp);
  document.body.addEventListener(pointerEventType.leave, pictoPointerUp);
  document.body.addEventListener(pointerEventType.move, pictoPointerMove);
}
function pictoPointerDown(g) {
  var i;
  var j;
  var k;
  if (g.target.classList.contains("hitzone") && g.target.parentNode.classList.contains("picto")) {
    j = (i = "targetTouches" in g ? g.targetTouches[0x0] : g).target.parentNode.dataset.pictoNum;
    if (!((k = listPicto[j]).locked || (mouseX = i.pageX, mouseY = i.pageY, k.onDrag) || -0x1 != getIndexFromPointerList("pictoNum", j))) {
      g = {
        "event": g,
        "uniqueId": "identifier" in i ? i.identifier : i.pointerId,
        "picto": k,
        "pictoNum": j,
        "dropForced": false
      };
      if (k.used) {
        k.usedTouchStart();
      } else {
        k.startDrag();
        k.moveDrag(i.pageX, i.pageY);
        poloStartWatchPicto();
      }
      pointerList.push(g);
    }
  }
}
function pictoPointerUp(g) {
  var i;
  if (pointerList.length && 0x0 <= (g = getIndexFromPointerList("uniqueId", (g = "changedTouches" in g ? g.changedTouches[0x0] : g)["identifier" in g ? "identifier" : "pointerId"]))) {
    if ((i = pointerList[g].picto).used) {
      i.usedTouchEnd();
    } else {
      i.stopDrag();
      pictoOnDrop(i, pointerList[g].dropForced);
    }
    if (0x1 == pointerList.length) {
      poloStopWatchPicto();
    }
    pointerList.splice(g, 0x1);
  }
}
function pictoForceOnDrop() {
  for (; pointerList.length;) {
    var g = pointerList[0x0];
    g.dropForced = true;
    pictoPointerUp(g.event);
  }
}
function pictoPointerMove(g) {
  var i;
  if (pointerList.length && 0x0 <= (i = getIndexFromPointerList("uniqueId", (g = "targetTouches" in g ? g.targetTouches[0x0] : g)["identifier" in g ? "identifier" : "pointerId"])) && (i = pointerList[i].picto).onDrag) {
    i.moveDrag(g.pageX, g.pageY);
    checkPictoHoverPolo(i);
    mouseX = pointerList[pointerList.length - 0x1].picto.pointerAxis.px;
    mouseY = pointerList[pointerList.length - 0x1].picto.pointerAxis.py;
  }
}
function isPictoDiv(g) {
  return g.target.classList.contains("hitzone") && g.target.parentNode.classList.contains("picto");
}
function getIndexFromPointerList(g, h) {
  return pointerList.findIndex(i => i[g] == h);
}
var $activeTab;
var $activeFilter;
var $activePage;
var $scrollbox;
var $boxline;
var $boxinfo;
var PictoObject = function (g, h) {
  var k;
  var l = this;
  var m = h.find("#picto" + g);
  var p = 0x0;
  var q = isMobile ? 1.1 : 1.2;
  this.id = g;
  this.used = false;
  this.locked = false;
  this.onDrag = false;
  this.polo = null;
  this.pointerAxis = {
    "px": 0x0,
    "py": 0x0
  };
  this.startDrag = function () {
    k = m[0x0].getBoundingClientRect();
    l.onDrag = true;
    m.removeClass("flashme");
    m.addClass("drag");
  };
  this.moveDrag = function (r, u) {
    l.setTranslation(r, u);
  };
  this.stopDrag = function () {
    l.onDrag = false;
    m.removeClass("drag");
  };
  this.replacer = function () {
    l.locked = true;
    m.addClass("replacer").one(animationEnd, l.replacerFini);
  };
  this.absorber = function (r) {
    m.css({
      "transform": "translate3d(0px, 0px, 0px)"
    });
    m.removeClass("replacer");
    m.addClass("griser");
    l.used = true;
    l.polo = r;
  };
  this.reactiver = function (r) {
    l.locked = true;
    r = !!(null != r && "undefined" !== r) && r;
    m.removeClass("griser");
    l.polo = null;
    if (!r || modeRandom || modeReplay) {
      l.replacerFini();
    } else {
      m.addClass("flashme").one(animationEnd, function (u) {
        $(u.target).removeClass("flashme");
        l.replacerFini();
      });
    }
  };
  this.replacerFini = function () {
    m.removeClass("replacer");
    m.css({
      "transform": "translate3d(0px, 0px, 0px)"
    });
    l.used = false;
    l.locked = false;
    l.pointerAxis = {
      "px": 0x0,
      "py": 0x0
    };
  };
  this.usedTouchStart = function () {
    p = new Date().getTime();
    showPoloInArray([l.polo.id]);
  };
  this.usedTouchEnd = function () {
    stopShowingPoloInArray(p);
    p = 0x0;
  };
  this.checkusedTouchStart = function () {
    if (0x0 != p) {
      l.usedTouchEnd();
    }
  };
  this.hideYourself = function () {
    m.addClass("hideYourself");
  };
  this.stopHiddingYourself = function () {
    m.removeClass("hideYourself");
  };
  this.setTranslation = function (r, u) {
    l.pointerAxis = {
      "px": r,
      "py": u
    };
    r -= k.x;
    u -= k.y;
    r -= k.width / 0x2;
    u -= k.width / q;
    m.css({
      "transform": "translate3d(" + r + "px, " + u + "px, 0px)"
    });
  };
};
var PoloObject = function (a0, a1) {
  this.sound = new SoundObject("polo" + a0);
  var a3;
  var a4;
  var a5;
  var a6;
  var a7;
  var a8;
  var a9;
  var aa;
  var ab;
  var ac;
  var ad;
  var ae;
  var af;
  var ag;
  var ah;
  var ai;
  var aj;
  var ak;
  var al;
  var am;
  var an;
  var ap;
  var aq;
  var ar;
  var as = this;
  var at = $("#box-polo").find(".polo[data-polo-id='" + a0 + "']");
  var au = $("#box-loader-polo").find(".zone[data-polo-id='" + a0 + "']");
  var av = au.find(".loader");
  var aw = au.find(".bar");
  var ax = false;
  var az = "";
  var aA = false;
  var aB = listImages.spritePolo;
  var aC = aL;
  var aF = 0x0;
  var aG = false;
  this.id = a0;
  this.state = "normal";
  var aH = at.find(".ctrl");
  function aI() {
    a1.globalAlpha = 0x1;
    a1.drawImage(aB, 0x0, 0x0, cropPoloW, cropPoloH, as.drawPoloX, as.drawPoloY, drawPoloW, drawPoloH);
  }
  function aJ(b7, b8) {
    a1.drawImage(aB, b7, b8, cropEyeW, cropEyeH, as.drawPoloX, as.drawPoloY + drawEyeY, drawEyeW, drawEyeH);
  }
  function aK() {
    a1.globalAlpha = 0.5;
    a1.drawImage(aB, cropPoloW, 0x0, cropPoloW, cropPoloH, as.drawPoloX, as.drawPoloY, drawPoloW, drawPoloH);
  }
  function aL() {
    aI();
    aJ(cropEyeX, cropEyeY);
    aK();
  }
  function aM() {
    a1.globalAlpha = 0x1;
    a1.drawImage(a9, 0x0, 0x0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aN() {
    aM();
    a1.globalAlpha = 0.7;
    a1.drawImage(a9, 0x2 * cropAnimW, 0x0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aO() {
    aM();
    aF = 0x1;
    a1.globalAlpha = aF;
    a1.drawImage(a9, 0x2 * cropAnimW, 0x0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
  }
  function aP() {
    aM();
    var b7 = af ? 0.7 : 0x0;
    aF = aF <= b7 ? b7 : decimal(aF - 0.1, 0x2);
    a1.globalAlpha = aF;
    a1.drawImage(a9, 0x2 * cropAnimW, 0x0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
    if (aF <= b7) {
      as.stopHidingYourselfComplete();
    }
  }
  function aQ() {
    if (aa) {
      aL();
    } else {
      as.anime();
      a1.globalAlpha = 0x1;
      a1.drawImage(a9, cropAnimW, 0x0, cropAnimW, cropAnimH, as.drawPoloX, as.drawPoloY, drawAnimW, drawAnimH);
      a1.drawImage(a9, an, ap + 0x1, cropAnimW, am - 0x1, as.drawPoloX + ak, as.drawPoloY + al + 0x1, drawAnimW, aj - 0x1);
    }
  }
  function aR() {
    var b7 = timenow - aq;
    var b7 = Math.floor(b7 * aV);
    var b7 = ar - 0x1 < b7 ? ar - 0x1 : b7;
    aI();
    aJ(cropEyeX, aW[b7] * cropEyeH);
    aK();
    if (ar - 0x1 <= b7) {
      as.mode("normal");
    }
  }
  function aS() {
    var b7;
    var b8;
    if (ae) {
      aQ();
    } else {
      aI();
      b8 = as.getPupPos(drawPup1X, drawPup1Y);
      b7 = as.getPupPos(drawPup2X, drawPup2Y);
      a1.drawImage(aB, 0x0, cropPupY, cropPupW, cropPupW, b8[0x0], b8[0x1], drawPupW, drawPupW);
      a1.drawImage(aB, 0x0, cropPupY, cropPupW, cropPupW, b7[0x0], b7[0x1], drawPupW, drawPupW);
      if ((b8 = (mouseY - canvasBound.top) * 0x2) < as.drawPoloY + 0x5a * poloRatio * 0x2) {
        aJ(cropEyelidX, cropEyelid4Y);
      } else if (b8 >= as.drawPoloY + 0x5a * poloRatio * 0x2 && b8 < as.drawPoloY + 0x82 * poloRatio * 0x2) {
        aJ(cropEyelidX, cropEyelid3Y);
      } else if (b8 >= as.drawPoloY + 0xaa * poloRatio * 0x2) {
        aJ(cropEyelidX, cropEyelid2Y);
      } else {
        aJ(cropEyelidX, cropEyelid1Y);
      }
    }
  }
  function aT() {
    aS();
    aK();
  }
  function aU() {
    aS();
  }
  this.$btcMute = at.find(".icon-game-bt-mute");
  this.$btcSolo = at.find(".icon-game-bt-solo");
  this.$btcStop = at.find(".icon-game-bt-delete");
  this.pictoHoverId = null;
  this.reinit = function () {
    aY();
    as.draw();
    aG = false;
    as.pictoHoverId = null;
    a3 = a4 = a5 = 0x0;
    az = a6 = a7 = a8 = a9 = null;
    aa = ab = ac = ad = ae = af = ag = ah = false;
  };
  this.getPicto = function () {
    return a6;
  };
  this.getAssetId = function () {
    return a7;
  };
  this.getMoment = function () {
    return a3;
  };
  this.getLoop = function () {
    return a4;
  };
  this.getEnabled = function () {
    return ab;
  };
  this.getBusy = function () {
    return ac;
  };
  this.getHover = function () {
    return aG;
  };
  this.getDeleting = function () {
    return ae;
  };
  this.getPlaying = function () {
    return ad;
  };
  this.getDiv = function () {
    return at;
  };
  this.getMute = function () {
    return af;
  };
  this.getHide = function () {
    return ah;
  };
  this.getSolo = function () {
    return ag;
  };
  this.setSolo = function (b7) {
    if (ag = b7) {
      as.$btcSolo.addClass("light");
    } else {
      as.$btcSolo.removeClass("light");
    }
  };
  this.setLoop = function (b7) {
    a4 = b7;
  };
  this.setMoment = function (b7) {
    a3 = b7;
  };
  this.setPlaying = function (b7) {
    ad = b7;
  };
  this.habiller = function (b7, b8, b9, ba, bb) {
    as.checkState();
    a7 = (a6 = b7).id;
    a3 = b8;
    a8 = b9.imgData;
    a9 = b9.imgSprite;
    ai = b9.headHeight;
    am = b9.headHeight * animSize;
    az = b9.color;
    a5 = a8.length;
    ac = true;
    as.resize();
    aw.css({
      "background-color": "#" + az
    });
    if (aA) {
      as.mode("waiting");
    } else {
      aa = true;
      TweenMax.delayedCall(ba, function () {
        as.rebond(bb);
      });
    }
    recordMix.xmlAction("append", as);
  };
  this.checkState = function () {
    if (!(!ae || aA)) {
      TweenMax.killTweensOf(as);
      as.remonte(0x0, true, false);
    }
  };
  this.deshabiller = function (b7, b8) {
    if (aa) {
      aa = false;
      TweenMax.killTweensOf(as.rebond);
      TweenMax.killTweensOf(as.rebond2);
    }
    ac = !(ae = true);
    TweenMax.to(as, b8 ? 0x0 : 0.3, {
      "drawPoloY": drawMaxTopY,
      "ease": Quint.easeIn,
      "onComplete": as.remonte,
      "onCompleteParams": [0x0, true, b8],
      "delay": b7,
      "overwrite": true
    });
    this.hideLoader();
    recordMix.xmlAction("remove", as);
  };
  this.baisser = function () {
    as.drawPoloY = drawMaxTopY;
  };
  this.remonte = function (b7, b8, b9) {
    if ((aA = true) === b8) {
      b8 = !modeReplay && !modeRandom && !modeWatch;
      a6.reactiver(b8);
      as.reinit();
      majListPoloDrop();
    }
    as.mode("normal");
    b8 = randomRangeInt(drawMinTopY, drawMinTopY + drawMaxRandPosY);
    TweenMax.to(as, b9 ? 0x0 : 0.4, {
      "drawPoloY": b8,
      "ease": Back.easeOut,
      "delay": b9 ? 0x0 : b7,
      "overwrite": true,
      "onComplete": function () {
        aA = false;
      }
    });
  };
  this.rebond = function (b7) {
    var b8 = as.drawPoloY - drawMaxBounceY;
    var b9 = ad ? "anime" : "waiting";
    var ba = b7 ? 0x0 : 0.1;
    var b9 = as.getMute() ? "mute" : b9;
    as.mode(b9);
    TweenMax.to(as, ba, {
      "drawPoloY": b8,
      "ease": Quint.easeOut,
      "onComplete": as.rebond2,
      "onCompleteParams": [b7],
      "overwrite": true
    });
    aa = false;
  };
  this.rebond2 = function (b7) {
    var b8 = as.drawPoloY + drawMaxBounceY;
    TweenMax.to(as, b7 ? 0x0 : 0.2, {
      "drawPoloY": b8,
      "ease": Back.easeOut,
      "overwrite": true
    });
  };
  this.showLoader = function () {
    ax = true;
    av.addClass("show");
    aw.css({
      "animation-duration": decimal(getRemainingTime() / 0x3e8, 0x2) + "s"
    });
    aw.addClass("progress");
  };
  this.hideLoader = function () {
    if (ax) {
      ax = false;
      av.removeClass("show");
      aw.removeClass("progress");
    }
  };
  this.hideYourself = function () {
    if (ad || ac) {
      ah = true;
      aF = af ? 0.7 : aF;
      as.mode("hide");
    }
  };
  this.stopHidingYourself = function () {
    if (ad || ac) {
      as.mode("unhide");
    }
  };
  this.stopHidingYourselfComplete = function () {
    ah = false;
    if (af) {
      as.mode("mute");
    } else if (ad) {
      as.mode("anime");
    } else {
      as.mode("waiting");
    }
  };
  this.drawPoloX = 0x0;
  this.drawPoloY = drawMaxTopY;
  this.resize = function () {
    aj = ai * poloRatio * 0x2;
    as.drawPoloX = poloBlocX * as.id * 0x2;
    at[0x0].style.left = poloBlocX * as.id + sizes.polo.overlapW * poloRatio / 0x2 + "px";
    at[0x0].style.width = poloBlocW - sizes.polo.overlapW * poloRatio + "px";
    au[0x0].style.left = poloBlocX * as.id + sizes.polo.overlapW * poloRatio / 0x2 + "px";
    au[0x0].style.width = poloBlocW - sizes.polo.overlapW * poloRatio + "px";
  };
  this.draw = function () {
    aC();
  };
  this.mode = function (b7) {
    if (b7 != as.state) {
      TweenMax.killTweensOf(aZ);
      as.state = b7;
      switch (as.state) {
        case "normal":
          aC = aL;
          aY();
          break;
        case "cligne":
          aC = aR;
          break;
        case "regarde":
          aC = aT;
          break;
        case "hover":
          aC = aU;
          break;
        case "waiting":
          aC = aM;
          break;
        case "anime":
          aC = aQ;
          break;
        case "mute":
          aC = aN;
          break;
        case "hide":
          aC = aO;
          break;
        case "unhide":
          aC = aP;
      }
    }
  };
  this.anime = function () {
    var b7 = frame;
    if (boucleA && a5 == frameTotal) {
      b7 += frameHalf;
    }
    an = a8[b7 = a5 - 0x1 <= b7 ? a5 - 0x1 : b7][0x0] * animSize;
    ap = a8[b7][0x1] * animSize;
    ak = a8[b7][0x2] * poloRatio * 0x2;
    al = a8[b7][0x3] * poloRatio * 0x2;
  };
  this.getPupPos = function (b7, b8) {
    var b9 = (mouseX - canvasBound.left) * 0x2;
    var ba = (mouseY - canvasBound.top) * 0x2;
    var b9 = b9 - b7 - as.drawPoloX - drawPupW / 0x2;
    var ba = ba - b8 - as.drawPoloY - drawPupW / 0x2;
    var ba = Math.atan2(ba, b9);
    return [drawMaxPupMove * Math.cos(ba) + (as.drawPoloX + b7), drawMaxPupMove * Math.sin(ba) + (as.drawPoloY + b8)];
  };
  var aV = 0x0;
  var aW = [];
  var aX = [[0x0, 0x1, 0x2, 0x2, 0x1, 0x0], [0x0, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x0], [0x0, 0x3, 0x4, 0x4, 0x3, 0x0], [0x0, 0x1, 0x2, 0x2, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0x1, 0x2, 0x2, 0x2, 0x2, 0x0], [0x0, 0x1, 0x2, 0x2, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x1, 0x2, 0x2, 0x9, 0x9, 0x9, 0x9, 0x2, 0x2, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x0], [0x0, 0x1, 0x2, 0x2, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0x2, 0x2, 0x2, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0x1, 0x2, 0x2, 0xa, 0xa, 0xa, 0xa, 0xa, 0x2, 0x2, 0x0]];
  function aY() {
    var b7 = Math.round(Math.random() * 0x7) + 0x2;
    TweenMax.delayedCall(b7, aZ);
  }
  function aZ() {
    aq = new Date().getTime();
    var b7 = Math.round(Math.random() * (aX.length - 0x1));
    aW = aX[b7];
    ar = aW.length;
    aV = ar / (0x24 * ar);
    as.mode("cligne");
  }
  var b0 = 0x0;
  var b1 = 0x0;
  var b2 = 0x0;
  var b3 = 0x0;
  function b4(b7) {
    if (null != b7 && "undefined" !== b7) {
      b7.preventDefault();
    }
    if (ag) {
      if (0x1 == getTotalSolo()) {
        stopSoloPolo();
      } else {
        as.mute();
      }
      ag = false;
    } else {
      as.switchMute();
    }
    if (!(af || ag)) {
      stopOtherSolo();
    }
  }
  function b5(b7) {
    if (null != b7 && "undefined" !== b7) {
      b7.preventDefault();
    }
    clickPolo(as);
  }
  function b6(b7) {
    if (null != b7 && "undefined" !== b7) {
      b7.preventDefault();
    }
    (ag ? (ag = false, unmuteAll) : (ag = true, muteAll))(as);
  }
  this.activerClick = function () {
    if (!ab) {
      ab = true;
      at[0x0].addEventListener(pointerEventType.down, as.touchStart);
      as.activerCtrl();
    }
  };
  this.desactiverClick = function () {
    if (ab) {
      ab = false;
      TweenMax.killTweensOf(as.touchLong);
      at[0x0].removeEventListener(pointerEventType.down, as.touchStart);
      at[0x0].removeEventListener(pointerEventType.move, as.touchMove);
      at[0x0].removeEventListener(pointerEventType.up, as.touchEnd);
      as.desactiverCtrl();
    }
  };
  this.touchStart = function (b7) {
    b7.preventDefault();
    0x0;
    var b8 = "targetTouches" in b7 ? b7.targetTouches[0x0] : b7;
    b0 = b1 = b8.pageX;
    b2 = b3 = b8.pageY;
    TweenMax.delayedCall(0.25, as.touchLong, [b7]);
    at[0x0].removeEventListener(pointerEventType.down, as.touchStart);
    at[0x0].addEventListener(pointerEventType.move, as.touchMove);
    at[0x0].addEventListener(pointerEventType.up, as.touchEnd);
  };
  this.touchMove = function (b7) {
    b7.preventDefault();
    var b8 = ("targetTouches" in b7);
    var b7 = b8 ? b7.targetTouches[0x0] : b7;
    var b9 = b8 ? 0x3c : 0x14;
    b1 = b7.pageX;
    b3 = b7.pageY;
    if (b2 + (b8 ? 0x3c : 0x14) < b3 && Math.abs(b1 - b0) < b9) {
      TweenMax.killTweensOf(as.touchLong);
      clickPolo(as);
    }
  };
  this.touchLong = function (b7) {
    b7.preventDefault();
    TweenMax.killTweensOf(as.touchLong);
    ag = true;
    soloPolo();
    as.$btcSolo.addClass("light");
  };
  this.touchEnd = function (b7) {
    b7.preventDefault();
    TweenMax.killTweensOf(as.touchLong);
    at[0x0].removeEventListener(pointerEventType.move, as.touchMove);
    at[0x0].removeEventListener(pointerEventType.up, as.touchEnd);
    at[0x0].addEventListener(pointerEventType.down, as.touchStart);
    if (ag) {
      if (0x1 == getTotalSolo()) {
        stopSoloPolo();
      } else {
        as.mute();
      }
      ag = false;
      as.$btcSolo.removeClass("light");
    } else {
      as.switchMute();
    }
  };
  this.activerCtrl = function () {
    aH.addClass("visible").on(pointerEventType.down, stopProp);
    as.$btcMute.on(pointerEventType.down, b4);
    as.$btcSolo.on(pointerEventType.down, b6);
    as.$btcStop.on(pointerEventType.down, b5);
  };
  this.desactiverCtrl = function () {
    aH.removeClass("visible").off();
    as.$btcMute.off().removeClass("light");
    as.$btcSolo.off().removeClass("light");
    as.$btcStop.off().removeClass("light");
  };
  this.playSound = function () {
    ad = true;
    this.sound.play();
    a4++;
  };
  this.stopSound = function (b7) {
    ad = false;
    this.sound.stop(b7);
  };
  this.mute = function () {
    af = true;
    if (!ah) {
      as.mode("mute");
      as.$btcMute.addClass("light");
    }
    as.sound.mute();
    recordMix.xmlAction("mute", as);
  };
  this.unmute = function () {
    af = false;
    if (!ah) {
      if (ad) {
        this.mode("anime");
      } else {
        this.mode("waiting");
      }
      as.$btcMute.removeClass("light");
    }
    this.sound.unmute();
    recordMix.xmlAction("unmute", as);
  };
  this.switchMute = function () {
    if (af) {
      as.unmute();
    } else {
      as.mute();
    }
  };
  this.hitTest = function (b7, b8) {
    var b7 = (b7 - canvasBound.left) * 0x2;
    var b8 = (b8 - canvasBound.top) * 0x2;
    var b9 = poloOverlapW * 0x2 / 0x2;
    return b7 > as.drawPoloX + b9 && b7 < as.drawPoloX + drawPoloW - b9 && b8 > as.drawPoloY && b8 < canvasBound.height * 0x2;
  };
  this.hitTestPicto = function (b7) {
    return !ac && !ae && as.hitTest(Math.round(b7.pointerAxis.px), Math.round(b7.pointerAxis.py));
  };
  this.rollover = function () {
    if (!aG) {
      aG = true;
      as.mode("hover");
    }
  };
  this.rollout = function (b7) {
    if (!!(null != b7 && "undefined" !== b7) && b7) {
      aG = false;
      as.mode("normal");
    } else if (aG) {
      aG = false;
      as.mode("regarde");
    }
  };
  this.resize();
  this.reinit();
};
var mixToWatch = null;
var mixToShare = null;
var XHRmemotime = {};
var $lineOpened = null;
var scrollPosY = 0x0;
var lineClicked = null;
var showLastMix = false;
var mixDB = {
  "latest": [],
  "search": [],
  "top50": {
    "day": [],
    "week": [],
    "month": [],
    "year": []
  },
  "totalNbMix": 0x0
};
function initMixlist() {
  $poplist = $mixlist.find("#poplist");
  $mixlist.$bck = $mixlist.find(".bac");
  $mixlist.$bck.fadeIn = function () {
    this.addClass("animateFadeIn");
  };
  $mixlist.$bck.fadeOut = function () {
    this.addClass("animateFadeOut").one(animationEnd, function (h) {
      $(h.target).removeClass("animateFadeIn animateFadeOut");
    });
  };
  $scrollbox = $poplist.find("#scrollbox");
  $boxinfo = $scrollbox.find(".boxinfo");
  $boxline = $scrollbox.find(".boxline");
  $tabLatest = $("#tab-latest");
  $tabTop50 = $("#tab-top50");
  $tabSearch = $("#tab-search");
  $tabMixlist = $("#tab-mixlist");
  $mixlist.find(".tabbox .tab").on(pointerEventType.down, clickBtTab);
  $mixlist.find(".pagebox .tab-filter .bt").on(pointerEventType.down, clickBtFilter);
  $mixlist.find(".pagebox#box-search .bt.search").on(pointerEventType.down, clickBtSearch);
}
function openPlaylist(g, h, i) {
  lock();
  showLastMix = true === i;
  $mixlist.addClass("show");
  $mixlist.$bck.fadeIn();
  if (h) {
    enableMixlist();
  } else {
    $poplist.addClass("open").one(animationEnd, enableMixlist);
  }
  if ("mixlist" == g || !hasNetwork || null != storage.getItem("param-safe")) {
    delete XHRmemotime.mymix;
    activeBtTab("mixlist");
  } else {
    activeBtTab("top50" == g ? "top50" : "latest");
  }
}
function enableMixlist() {
  unlock();
  $homeBtList.removeSpinner();
  $poplist.addClass("opened");
  $mixlist.$bck.on(pointerEventType.down, closePlaylist);
  $mixlist.find(".pagebox#box-search input#input-search").on(pointerEventType.down, function (h) {
    $mixlist.find(".pagebox#box-search .formline .input-loader").addClass("spin").show();
  });
  $mixlist.find(".pagebox#box-search input#input-search").on("focus", function () {
    $mixlist.find(".pagebox#box-search .formline .input-loader").removeClass("spin").hide();
  });
}
function closePlaylist() {
  focusHistory = [];
  deleteFocus();
  lock();
  $mixlist.$bck.off();
  $mixlist.$bck.fadeOut();
  $mixlist.find(".pagebox#box-search input#input-search").off();
  $poplist.removeClass("opened").addClass("close").one(animationEnd, hideMixlist);
}
function hideMixlist() {
  closeActionLine($lineOpened);
  $poplist.removeClass("open close");
  $mixlist.removeClass("show");
  $(".tab", $poplist).removeClass("active");
  $activeFilter = $activePage = $activeTab = null;
  blurAll();
  unlock();
  createFocus("home");
}
function cleanScrollbox() {
  if ($boxline) {
    $scrollbox.scrollTop(0x0);
    closeActionLine($lineOpened);
    unbindAllLine();
    $boxline.empty();
    $boxinfo.empty();
  }
}
function bindAllLine() {
  $boxline.find(".line").on(pointerEventType.down, clickLineStart);
  $boxline.find(".line").on(pointerEventType.up, clickLineEnd);
  $boxline.find(".box-action").on(pointerEventType.down, stopProp);
  $boxline.find(".box-action").on(pointerEventType.up, stopProp);
  $boxline.find(".bt.watch").on(pointerEventType.down, clickBtWatch);
  $boxline.find(".bt.share").on(pointerEventType.down, clickBtShare);
  $boxline.find(".bt.link").on(pointerEventType.down, clickBtLink);
  $boxline.find(".bt.fav").on(pointerEventType.down, clickBtFav);
  $boxline.find(".bt.delete").on(pointerEventType.down, clickBtDelete);
  $boxline.find(".bt.download").on(pointerEventType.down, clickBtDownload);
}
function unbindAllLine() {
  $boxline.find(".line").off();
  $boxline.find(".line .box-action").off();
  $boxline.find(".line .box-action .bt").off();
}
function unbindLine(g) {
  g.off();
  g.find(".box-action").off();
  g.find(".box-action .bt").off();
}
function clickLineStart(g) {
  var h = $(g.currentTarget).parent().parent();
  scrollPosY = h.scrollTop();
  lineClicked = $(g.currentTarget);
}
function clickLineEnd(g) {
  if (lineClicked && $(g.currentTarget).parent().parent().scrollTop() == scrollPosY && lineClicked.attr("data-key") == $(g.currentTarget).attr("data-key")) {
    openActionLine(g.currentTarget);
  }
  lineClicked = null;
}
function clickBtTab() {
  blurAll();
  if ($(this).hasClass("active")) {
    $scrollbox.scrollTop(0x0);
  } else {
    activeBtTab($(this).attr("id").replace("tab-", ""));
  }
}
function activeBtTab(g) {
  blurAll();
  $scrollbox.find(".spinner-box").removeClass("spin");
  $scrollbox.find(".spinner-box").hide();
  $boxinfo.empty();
  $poplist.find(".tabbox .tab").removeClass("active");
  ($activeTab = $poplist.find(".tabbox .tab#tab-" + g)).addClass("active");
  cleanScrollbox();
  $poplist.find(".pagebox").removeClass("show");
  ($activePage = $poplist.find(".pagebox#box-" + g)).addClass("show");
  if ("latest" == g) {
    loadLatest();
  } else if ("top50" == g) {
    activeFilter("day");
  } else if ("search" == g) {
    cleanSearchInput();
    activeFilter("name");
  } else if ("mixlist" == g) {
    activeFilter("mymix");
  }
}
function clickBtFilter() {
  blurAll();
  if ($(this).hasClass("active")) {
    $scrollbox.scrollTop(0x0);
  } else {
    activeFilter($(this).attr("id").replace("bt-", ""));
  }
}
function activeFilter(g) {
  blurAll();
  $poplist.find(".tab-filter .bt").removeClass("active");
  ($activeFilter = $poplist.find(".tab-filter .bt#bt-" + g)).addClass("active");
  if (["day", "week", "month", "year"].includes(g)) {
    cleanScrollbox();
    loadTop50();
  } else if (["name", "title", "dedi"].includes(g)) {
    cleanScrollbox();
    clickBtSearch();
  } else if (["mymix", "myfav"].includes(g)) {
    cleanScrollbox();
    loadMixlist();
  }
}
function getActiveTabString() {
  return $activeTab && $activeTab.length ? $activeTab.attr("id").replace("tab-", "") : "";
}
function getActiveFilterString() {
  return $activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "";
}
function openActionLine(g) {
  var g = $(g);
  var i = null !== $lineOpened ? $lineOpened.index() : -0x1;
  toggleAcionLine($lineOpened);
  if (i != g.index()) {
    toggleAcionLine(g);
  }
}
function toggleAcionLine(g) {
  if (null !== g) {
    if (g.hasClass("animateOpen")) {
      g.removeClass("animateOpen").addClass("animateClose").one(animationEnd, function () {
        g.removeClass("animateClose");
      });
      $lineOpened = null;
      removeInFocusHistory("playlist-line-open");
      createFocus("playlist-all", g);
    } else {
      g.removeClass("animateClose").addClass("animateOpen");
      $lineOpened = g;
      createFocus("playlist-line-open");
    }
  }
}
function closeActionLine(g) {
  if (null !== g) {
    g.removeClass("animateOpen").removeClass("animateClose");
    $lineOpened = null;
  }
}
function showSpin(g) {
  g.addClass("spin");
  g.find("svg use").attr("xlink:href", "#ic-loader-mini");
  $scrollbox.find(".spinner-box").addClass("spin");
  $scrollbox.find(".spinner-box").show();
}
function hideSpin(g, h) {
  g.removeClass("spin");
  g.find("svg use").attr("xlink:href", h);
  $scrollbox.find(".spinner-box").removeClass("spin");
  $scrollbox.find(".spinner-box").hide();
}
function clickBtShare(g) {
  g.stopPropagation();
  var g = $(this);
  var i = g.parent().parent().attr("data-key").replace("mix-", "");
  if (null != (mixToShare = searchMixInCurrentList(i)) && "undefined" !== (mixToShare = searchMixInCurrentList(i))) {
    checkIfMixSavedThenShare("global", g);
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
function clickBtLink(g) {
  g.stopPropagation();
  var g = $(this);
  var h = g.parent().parent().attr("data-key").replace("mix-", "");
  if (null != (mixToShare = searchMixInCurrentList(h)) && "undefined" !== (mixToShare = searchMixInCurrentList(h))) {
    checkIfMixSavedThenShare("clipboard", g);
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
function clickBtFav(g) {
  g.stopPropagation();
  var g = $(this).parent().parent();
  var h = g.attr("data-key");
  var i = h.replace("mix-", "");
  var h = h.replace("mix-", "fav-");
  var i = searchMixInCurrentList(i);
  if (null != i && "undefined" !== i) {
    if (existInArrayFromProp(i.link, "link", localMixObject.getFavlist())) {
      g.removeClass("isfavoris");
      localMixObject.deleteMix(h);
      if ("myfav" == ($activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "")) {
        unbindLine(g);
        closeActionLine(g);
        g.remove();
        createFocus("playlist-all");
      }
    } else {
      g.addClass("isfavoris");
      localMixObject.saveMix(i, true);
      $tabMixlist.find("svg use").attr("xlink:href", "#ic-rate-mini");
      $tabMixlist.removeClass("animateFavIcon").addClass("animateFavIcon").one(animationEnd, function () {
        $tabMixlist.find("svg use").attr("xlink:href", "#ic-mixlist-mini");
        $tabMixlist.removeClass("animateFavIcon");
      });
    }
  } else {
    popupGeneralError({
      "error": STR("pop.notFoundTitle")
    });
  }
}
function clickBtDelete(g) {
  g.stopPropagation();
  var i = $(this);
  var j = i.parent().parent();
  var k = searchMixInCurrentList(j.attr("data-key").replace("mix-", ""));
  Spinner.add(i);
  if (!k.online || hasNetwork) {
    boxDialog.open(STR("pop.deleteText"), STR("pop.deleteTitle"), [STR("bt.yes"), STR("bt.no")], [function () {
      deleteMixConfirm(i, j, k);
    }, function () {
      unlock();
      Spinner.reset();
    }]);
  } else {
    boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")], [function () {
      unlock();
      Spinner.reset();
    }]);
  }
}
function deleteMixConfirm(g, h, i) {
  if (localMixObject.deleteMix("mix-" + i.link)) {
    localMixObject.deleteMix("fav-" + i.link);
    unbindLine(h);
    closeActionLine(h);
    h.remove();
    if ((h = localMixObject.getMixlist().length) <= 0x5) {
      $scrollbox.scrollTop(0x0);
    }
    if (0x0 == h) {
      $boxinfo.html(STR("txt.mixlistEmpty"));
    }
    unlock();
    createFocus("playlist-all");
  } else {
    boxDialog.open(STR("pop.deleteBugText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      unlock();
    }]);
  }
  Spinner.reset();
  if (i.online) {
    $.ajax({
      "type": "POST",
      "url": "https://www.incredibox.com/ph3/delete-mix-db.php",
      "data": {
        "uuid": getListUUID(),
        "mix": i
      },
      "dataType": "json",
      "crossdomain": true,
      "success": function (k) {
        if ("success" == k.state) {
          saveGA("mix", "delete_db", i.link);
        } else {
          saveGA("mix", "delete_db_failed", i.link);
        }
      },
      "error": function (k) {
        saveGA("mix", "delete_db_error", i.link);
      }
    });
  }
}
function clickBtDownload(g) {
  g.stopPropagation();
  var g = $(this);
  var i = g.parent().parent().attr("data-key").replace("mix-", "");
  if (null != (mixToShare = searchMixInCurrentList(i)) && "undefined" !== (mixToShare = searchMixInCurrentList(i))) {
    if (converterCanRun()) {
      popupConvertMix();
    } else {
      checkIfMixSavedThenShare("download", g);
    }
  } else {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")], [function () {
      Spinner.reset();
    }]);
  }
}
var ajaxLatestRunning = false;
function loadLatest() {
  if (ajaxLatestRunning) {
    return false;
  }
  if (!hasNetwork) {
    $boxinfo.html(STR("pop.noNetworkText"));
    return false;
  }
  if (!minuteMoreThan(0x1, false, "latest")) {
    fillLatest();
    return false;
  }
  ajaxLatestRunning = true;
  showSpin($tabLatest);
  var h = {
    v: app.version
  };
  $.ajax({
    "type": "GET",
    "url": "https://www.incredibox.com/ph3/get-live.php?v=" + app.version,
    "data": h,
    "dataType": "json",
    "crossdomain": true,
    "success": function (i) {
      ajaxLatestComplete();
      ("success" == i.state ? (XHRmemotime.latest = new Date(), mixDB.totalNbMix = i.total, mixDB.latest = i.mixlist, mixDB.latest.map(function (j) {
        j.mymix = false;
        j.dateQuery = i.created;
      }), fillLatest) : ajaxLatestError)();
    },
    "error": function (i) {
      ajaxLatestError();
    }
  });
}
function ajaxLatestComplete() {
  ajaxLatestRunning = false;
  hideSpin($tabLatest, "#ic-live-mini");
}
function ajaxLatestError() {
  ajaxLatestComplete();
  if ($mixlist.isOpen() && $tabLatest.hasClass("active")) {
    boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
  }
}
function fillLatest() {
  var h;
  if ($mixlist.isOpen() && $tabLatest.hasClass("active")) {
    h = generateHtml(mixDB.latest, generateLineMix, "latest");
    $boxline.html(h[0x0]);
    $boxinfo.html(STR("txt.latestMixInfo").split("<br>")[0x0]);
    bindAllLine();
    createFocus("playlist-all");
  }
}
var ajaxTop50Running = false;
function loadTop50() {
  return !ajaxTop50Running && (hasNetwork ? mixDB.top50.day.length && !minuteMoreThan(0xa, false, "top50") ? (fillTop50(), false) : (ajaxTop50Running = true, showSpin($tabTop50), void $.ajax({
    "type": "GET",
    "url": "https://www.incredibox.com/ph3/get-top-50.php",
    "data": {
      "v": app.version
    },
    "dataType": "json",
    "crossdomain": true,
    "success": function (h) {
      if ("success" == h.state) {
        ajaxTop50Complete();
        mixDB.top50 = {
          "day": h.listDay,
          "week": h.listWeek,
          "month": h.listMonth,
          "year": h.listYear
        };
        mixDB.top50.day.map(i => i.mymix = false);
        mixDB.top50.week.map(i => i.mymix = false);
        mixDB.top50.month.map(i => i.mymix = false);
        mixDB.top50.year.map(i => i.mymix = false);
        fillTop50();
        hideSpin($tabTop50, "#ic-trophy-mini");
      } else {
        ajaxTop50Error();
      }
    },
    "error": function (h) {
      ajaxTop50Error();
    }
  })) : ($boxinfo.html(STR("pop.noNetworkText")), false));
}
function ajaxTop50Complete() {
  ajaxTop50Running = false;
  hideSpin($tabTop50, "#ic-trophy-mini");
  XHRmemotime.top50 = new Date();
}
function ajaxTop50Error() {
  ajaxTop50Complete();
  if ($mixlist.isOpen() && $tabTop50.hasClass("active")) {
    $boxinfo.html(STR("pop.noCoServerText"));
  }
}
function fillTop50() {
  var h;
  var i;
  if ($mixlist.isOpen() && $tabTop50.hasClass("active")) {
    i = [];
    if ("day" == (h = $activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "")) {
      i = generateHtml(mixDB.top50.day, generateLineTop50);
      $boxline.html(i[0x0]);
      mixDB.top50.day = i[0x1];
    } else if ("week" == h) {
      i = generateHtml(mixDB.top50.week, generateLineTop50);
      $boxline.html(i[0x0]);
      mixDB.top50.week = i[0x1];
    } else if ("month" == h) {
      i = generateHtml(mixDB.top50.month, generateLineTop50);
      $boxline.html(i[0x0]);
      mixDB.top50.month = i[0x1];
    } else if ("year" == h) {
      i = generateHtml(mixDB.top50.year, generateLineTop50);
      $boxline.html(i[0x0]);
      mixDB.top50.year = i[0x1];
    }
    $boxinfo.html(STR("txt.top50Info"));
    bindAllLine();
    createFocus("playlist-all");
  }
}
var ajaxSearchRunning = false;
var lastFilterSearch = "";
var lastSearch = "";
function clickBtSearch() {
  var g;
  var h;
  var j;
  var k;
  var l;
  return !ajaxSearchRunning && (hasNetwork ? (g = $poplist.find("form #input-search"), h = $activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "", k = (j = cleanInputText(j = g.val().substr(0x0, 0x1a))).split(" ").join(""), l = /[^A-Za-z0-9\u00C0-\u017F\u0025 '-]/, blurAll(), "" == k ? (lastSearch = "", cleanListSearch()) : lastSearch == j.toLowerCase() && lastFilterSearch == h || (l.test(k) ? invalidField(g) : (lastSearch = j.toLowerCase(), lastFilterSearch = h, showSpin($tabSearch), Spinner.add($poplist.find("#bt-search")), loadSearch(j, h))), void createFocus("playlist-all")) : (boxDialog.open(STR("pop.noNetworkText"), STR("pop.noNetworkTitle"), [STR("bt.ok")]), false));
}
function fillSearch() {
  var g;
  if ($tabSearch.hasClass("active")) {
    g = generateHtml(mixDB.search, generateLineMix, "search");
    $boxline.html(g[0x0]);
    bindAllLine();
    createFocus("playlist-all");
  }
}
function loadSearch(g, h) {
  var i = {
    v: app.version,
    "uuid": getListUUID(),
    "str": encodeURIComponent(g),
    f: encodeURIComponent(h)
  };
  $("#list-search .spinner-box", $poplist).show();
  ajaxSearchRunning = true;
  cleanListSearch();
  $.ajax({
    "type": "GET",
    "url": "https://www.incredibox.com/ph3/search-mix.php",
    "data": i,
    "dataType": "json",
    "crossdomain": true,
    "success": function (j) {
      var k;
      if ("success" == j.state) {
        ajaxSearchComplete();
        k = j.mixlist.length <= 0x1 && null != STR("txt.result.one") && "undefined" !== STR("txt.result.one") ? STR("txt.result.one") : STR("txt.result.other");
        $boxinfo.html(k.replace("%{count}", j.mixlist.length));
        if (j.mixlist.length) {
          j.mixlist.forEach(function (l, m) {
            l.dateQuery = j.now;
          });
          mixDB.search = j.mixlist;
          fillSearch();
        }
      } else {
        ajaxSearchError();
      }
    },
    "error": function (j) {
      ajaxSearchError();
    }
  });
}
function ajaxSearchComplete() {
  ajaxSearchRunning = false;
  hideSpin($tabSearch, "#ic-search-mini");
  Spinner.reset();
}
function ajaxSearchError() {
  ajaxSearchComplete();
  if ($mixlist.isOpen() && $tabSearch.hasClass("active")) {
    boxDialog.open(STR("pop.noCoServerText"), STR("pop.noCoServerTitle"), [STR("bt.ok")]);
  }
}
function cleanSearchInput() {
  lastSearch = lastFilterSearch = "";
  $("#box-search #input-search").val("");
}
function cleanListSearch() {
  cleanScrollbox();
  mixDB.search = [];
}
function loadMixlist() {
  if (localMixObject.getMixlist().length || localMixObject.getFavlist().length) {
    fillMixlist();
  } else {
    $boxinfo.html(STR("txt.mixlistEmpty"));
  }
}
function fillMixlist() {
  var h;
  var i;
  var j;
  var k;
  if ($mixlist.isOpen() && $tabMixlist.hasClass("active")) {
    j = [];
    if ("mymix" == (h = $activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "")) {
      if ((k = localMixObject.getMixlist()).length && (j = generateHtml(k, generateLineMix, "mymix"), $boxline.html(j[0x0]), hasNetwork ? $boxinfo.html(STR("txt.mixlistInfo").replace("%{date_time}", 0x2)) : $boxinfo.html(STR("txt.mixlistNoCo")), minuteMoreThan(0x2, false, "mymix") && localMixObject.getStatMixOnline(), showLastMix)) {
        showLastMix = false;
        (i = $boxline.find(".line").first()).addClass("bckFlash").one(animationEnd, function () {
          i.removeClass("bckFlash");
        });
      }
    } else if ("myfav" == h && (k = localMixObject.getFavlist()).length && (j = generateHtml(k, generateLineMix, "myfav"), $boxline.html(j[0x0]), $boxinfo.empty(), minuteMoreThan(0x2, false, "myfav"))) {
      localMixObject.getStatFavOnline();
    }
    bindAllLine();
    createFocus("playlist-all");
  }
}
function generateHtml(g, h, j) {
  var l = "";
  var m = [];
  var p = 0x0;
  for (var q = g.length; p < q; p++) {
    var u = g[p];
    m.push(u);
    l += h(u, p, j);
  }
  return [l, m];
}
function generateLineTop50(g, h) {
  return generateLineMix(g, h, "top50");
}
function generateLineMix(g, h, j) {
  var g = g || {};
  var h = h + 0x1 || 0x0;
  var j = j || "";
  var q = "top50" === j;
  var w = "top50" === j || "latest" === j || "search" === j;
  var x = "latest" === j || "search" === j;
  var y = "mymix" === j && !g.online;
  var z = "1" == g["private"];
  var A = "mymix" === j;
  var B = "mymix" === j;
  var D = ("mymix" === j || "search" === j) && !(g.mymix && !g.online || !(checkMixInArray(g.id, mixDB.top50.day) || checkMixInArray(g.id, mixDB.top50.week) || checkMixInArray(g.id, mixDB.top50.month) || checkMixInArray(g.id, mixDB.top50.year)));
  var E = ("mymix" === j || "search" === j) && !(g.mymix && !g.online) && checkMixInArray(g.id, mixDB.latest);
  var j = "myfav" === j || existInArrayFromProp(g.link, "link", localMixObject.getFavlist());
  var F = checkMixInArray(g.id, localMixObject.getMixlist());
  var G = null != g.datedb && "undefined" !== g.datedb ? g.datedb : getDateNow();
  var H = "line";
  var H = "<div data-key='mix-" + g.link + "' class='" + (H + (y ? " isoffline" : "") + (z ? " isprivate" : "") + (j ? " isfavoris" : "") + (F ? " ismymix" : "") + (D ? " istop50" : "") + (E ? " islatest" : "")) + "'>";
  return (H += "<div class='mixbanner box-info" + (q ? " rating" : "") + "'>") + (q ? "<div class='rating'>" + h + "</div>" : "") + "<div class='info'>" + ("<span class='title'>" + g.title + "</span>") + "<div class='dj'>" + (w ? "<div class='box-flag'><div class='fflag fflag-" + g.country.toUpperCase() + "'></div></div>" : "") + ("<span class='name'>" + g.name + "</span>") + "</div>" + "</div>" + "<div class='data'>" + "<div class='stat'>" + "<div class='boxstat mymix'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-user-mini'></use></svg></div></div>" + "<div class='boxstat private'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-lock-mini'></use></svg></div></div>" + "<div class='boxstat myfav'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-rate-mini'></use></svg></div></div>" + "<div class='boxstat top50'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-trophy-mini'></use></svg></div></div>" + "<div class='boxstat latest'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-live-mini'></use></svg></div></div>" + ("<div class='boxstat offline'><div class='txt'>" + STR("txt.offline") + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-nocloud-mini'></use></svg></div></div>") + ("<div class='boxstat liked'><div class='txt'>" + numberSpaced(g.nblike) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div></div>") + ("<div class='boxstat viewed'><div class='txt'>" + numberSpaced(g.nbview) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div></div>") + "</div>" + ("<span class='date' data-date='" + G + "'>" + (x ? getTimeAgo(G, g.dateQuery) : getStringDate(G)) + "</span>") + "</div>" + "</div>" + "<div class='box-action'>" + "<div class='bt bt-round bt-big watch color-green'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-eye'></use></svg></div><div class='hitzone'></div></div>" + "<div class='bt bt-round bt-big share color-blue'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-share'></use></svg></div><div class='hitzone'></div></div>" + (trustAppMobile ? "<div class='bt bt-round bt-big link color'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-link'></use></svg></div><div class='hitzone'></div></div>" : "") + "<div class='bt bt-round bt-big fav'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-rate'></use></svg></div><div class='hitzone'></div></div>" + (B ? "<div class='bt bt-round bt-big download'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-download'></use></svg></div><div class='hitzone'></div></div>" : "") + (A ? "<div class='bt bt-round bt-big delete'><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-trash'></use></svg></div><div class='hitzone'></div></div>" : "") + "</div>" + "</div>";
}
function sameMixInLocal(g) {
  return checkMixInArray(g.id, localMixObject.getMixlist());
}
function isMixInFav(g) {
  return existInArrayFromProp(g.link, "link", localMixObject.getFavlist());
}
function isMixInTop50(g) {
  return !(g.mymix && !g.online || !(checkMixInArray(g.id, mixDB.top50.day) || checkMixInArray(g.id, mixDB.top50.week) || checkMixInArray(g.id, mixDB.top50.month) || checkMixInArray(g.id, mixDB.top50.year)));
}
function isMixInLatest(g) {
  return !(g.mymix && !g.online) && checkMixInArray(g.id, mixDB.latest);
}
function checkMixInArray(g, h, i) {
  i = i || "id";
  for (var j in h) if (g == h[j][i]) {
    return true;
  }
  return false;
}
function getMixInArray(g, h, i) {
  i = i || "id";
  for (var j in h) if (g == h[j][i]) {
    return h[j];
  }
}
function searchMixInCurrentList(g) {
  var j;
  var k = $activeTab && $activeTab.length ? $activeTab.attr("id").replace("tab-", "") : "";
  var l = $activePage.find(".tab-filter").length && $activeFilter && $activeFilter.length ? $activeFilter.attr("id").replace("bt-", "") : "";
  var m = g.replace("mix-", "");
  switch (k) {
    case "latest":
      j = getMixInArray(m, mixDB.latest, "link");
      break;
    case "top50":
      switch (l) {
        case "day":
          j = getMixInArray(m, mixDB.top50.day, "link");
          break;
        case "week":
          j = getMixInArray(m, mixDB.top50.week, "link");
          break;
        case "month":
          j = getMixInArray(m, mixDB.top50.month, "link");
          break;
        case "year":
          j = getMixInArray(m, mixDB.top50.year, "link");
      }
      break;
    case "mixlist":
      switch (l) {
        case "mymix":
          j = getMixInArray(m, localMixObject.getMixlist(), "link");
          break;
        case "myfav":
          j = getMixInArray(m, localMixObject.getFavlist(), "link");
      }
      break;
    case "search":
      j = getMixInArray(m, mixDB.search, "link");
  }
  return j;
}
function minuteMoreThan(g, h, i) {
  var k;
  return null == XHRmemotime[i] || "undefined" === XHRmemotime[i] ? !h || g : (g = 0x3c * g, k = new Date(), i = XHRmemotime[i].getTime() - k.getTime(), k = Math.round(Math.abs(i / 0x3e8)), true === h ? secToText(0x3e8 * (g - k)) : g <= k);
}
function startRandomMode() {
  modeRandom = true;
  $body.addClass("mode-random");
  lock();
  closeTool();
  hideDiv($boxBtBonus);
  hideDiv($boxPicto, true);
  hideDiv($boxLoaderPolo, true);
  $btTool.off().on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(stopRandomMode);
  });
  $btTool.bounce();
  $btTool.$svg.attr("xlink:href", "#ic-random");
  $bckGlobal.addClass("fadeIn");
  $boxStage.addClass("pointerlock");
  TweenMax.delayedCall(0.4, lancerRandomMode);
}
function showTextRandom() {
  $watchInfo.$title.html(STR("txt.randomTitle"));
  $watchInfo.$name.html(STR("txt.randomText"));
  $watchInfo.addClass("fadeIn");
}
function lancerRandomMode() {
  showTextRandom();
  randomMix.start(loopOn);
  unlock();
  saveGA("game", "random");
}
function stopRandomMode() {
  modeRandom = false;
  $body.removeClass("mode-random");
  randomMix.stop();
  $btTool.off();
  $btTool.bounce();
  enableBtTool();
  $bckGlobal.removeClass("fadeIn");
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $watchInfo.removeClass("fadeIn");
  TweenMax.delayedCall(0.4, afterStopRandom);
}
function afterStopRandom() {
  showDiv($boxBtBonus, true);
  if (!bonusPlaying) {
    showDiv($boxPicto, true);
    showDiv($boxLoaderPolo, true);
  }
  $boxStage.removeClass("pointerlock");
}
var RandomMix = function (h) {
  var j = this;
  this.start = function () {
    j.loop();
    j.checkIfPoloMuted();
  };
  this.stop = function () {};
  this.checkIfPoloMuted = function () {
    var k = getListPoloBusy();
    var l = 0x0;
    for (var m = k.length; l < m; l++) {
      var p = k[l];
      if (p.getMute()) {
        p.unmute();
      }
    }
  };
  this.loop = function () {
    var k = getListPoloFree();
    var q = getListPoloBusy();
    var w = getListPictoFree();
    var x = k.length;
    var y = q.length;
    var z = 0x0;
    var A = Math.round(Math.random() * 0x6);
    var B = Math.round(Math.random() * 0x5);
    var C = Math.round(Math.random() * 0x2);
    var D = Math.round(Math.random() * 0x5) < 0x4 ? 0x2 : 0x1;
    var E = false;
    var F = 0x0;
    var G = "ajouter";
    var G = A < C ? "rien" : G;
    G = A < B || 0x0 === x ? "enlever" : G;
    G = !loopOn || y <= 0x1 ? "ajouter" : G;
    D = !loopOn || y <= 0x1 ? 0x1 : D;
    G = h ? "ajouter" : G;
    G = h && 0x0 === x ? "rien" : G;
    if (bonusPlaying || bonusWaiting) {
      G = "bonus";
      if (cntBoucleBonus == curBonus.nbLoop) {
        E = true;
        G = "enlever";
      }
    } else {
      for (z = 0x0; z < nbBonus; z++) {
        var H = listBonus[z];
        if (H.found) {
          G = "bonus";
          H.launchVideo();
          break;
        }
      }
    }
    if ("ajouter" == G) {
      var I;
      var F = Math.round((Math.round(Math.random() * (x - 0x1)) + 0x1) / D);
      var J = [];
      for (var z = 0x0; z < F; z++) {
        I = getRandomObject(k);
        J.push(I.id);
      }
      J.sort();
      for (z = 0x0; z < F; z++) {
        pictoTouchePolo(I = listPolo[J[z]], getRandomObject(w), 0.03 * z);
        majListPoloDrop();
      }
    } else {
      if ("enlever" == G) {
        F = Math.round((Math.round(Math.random() * (y - 0x2)) + 0x1) / D);
        F = E && 0x4 < y - F ? y - 0x4 : F;
        for (z = 0x0; z < F; z++) {
          if (0x2 < (I = getRandomObject(q)).getLoop() || E) {
            removePolo(I, 0x0);
          }
        }
      }
    }
    if ("bonus" != G) {
      var y = (q = getListPoloBusy()).length;
      var K = 0x0;
      for (z = 0x0; z < y; z++) {
        var L = q[z];
        if (0x7 < L.getLoop() && ++K < y) {
          removePolo(L, 0x0);
        }
      }
    }
  };
};
function startRecordMode() {
  if (bonusPlaying) {
    popupBonusPlaying();
  } else {
    lock();
    modeRecord = true;
    $body.addClass("mode-record");
    waitForRecording = false;
    recordMix.init();
    readingBar.maxLoop = app.recmaxloop;
    readingBar.open("record");
    closeTool();
    $btTool.off().on(pointerEventType.down, function (h) {
      h.preventDefault();
      preventAction(stopRecordMode);
    });
    $btTool.bounce();
    $btTool.$svg.attr("xlink:href", "#ic-live");
    if (loopOn) {
      lancerRecordMode();
    } else {
      TweenMax.delayedCall(0.4, lancerRecordMode);
    }
  }
}
function lancerRecordMode() {
  (loopOn ? startRecording : (waitForRecording = true, popupDrag))();
  unlock();
}
function startRecording() {
  waitForRecording = false;
  readingBar.start();
  readingBar.onLoopsFinished = () => {
    stopRecordMode();
  };
  readingBar.onLooping = () => {
    recordMix.loop();
  };
  recordMix.start();
  saveGA("mix", "start_recording");
}
function stopRecordMode() {
  modeRecord = false;
  $body.removeClass("mode-record");
  readingBar.stop();
  readingBar.close();
  recordMix.stop();
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $btTool.off();
  $btTool.bounce();
  enableBtTool();
  if (readingBar.cntLoop < readingBar.minLoop && !waitForRecording) {
    TweenMax.delayedCall(0.25, popupShort);
  }
  if (readingBar.cntLoop >= readingBar.minLoop && !waitForRecording) {
    lock();
    pictoForceOnDrop();
    stopAllStage();
    popupRecok();
  }
}
var controlTimeout;
var RecordMix = function () {
  var h;
  var i;
  var j;
  var k;
  var l;
  var m = this;
  var p = decimal(loopDuration / 0x3e8, 0x2);
  this.init = function () {
    i = h = "";
    j = false;
    k = 0x0;
    l = {};
  };
  this.setData = function (q) {
    l = q;
  };
  this.getData = function () {
    return l;
  };
  this.getXML = function () {
    return h;
  };
  this.start = function () {
    m.init();
    j = true;
    m.xmlOpen();
  };
  this.loop = function () {
    m.xmlCloseAction();
    m.xmlCloseLoop();
    k++;
    m.xmlOpenLoop();
    m.xmlOpenAction();
  };
  this.stop = function () {
    j = false;
    m.xmlClose();
  };
  this.xmlOpen = function () {
    h = "<mix version='0.7.0' control='true'>\n";
    m.xmlOpenLoop();
    m.xmlOpenAction();
  };
  this.xmlClose = function () {
    m.xmlCloseAction();
    m.xmlCloseLoop();
    h += "</mix>\n";
  };
  this.xmlOpenLoop = function () {
    i = "\t<loop boucleA='" + !boucleA + "' count='" + k + "'>\n";
    i += "\t\t<stage>\n";
    if (bonusPlaying) {
      i += "\t\t\t<bonus id='" + (bonusQueue - 0x1) + "' playing='true' cntBoucle='" + cntBoucleBonus + "' />\n";
    } else {
      if (bonusWaiting && 0x0 < k) {
        i += "\t\t\t<bonus id='" + (bonusQueue - 0x1) + "' waiting='true'/>\n";
      }
      for (var q = 0x0; q < nbPoloMax; q++) {
        var u;
        var v = listPolo[q];
        if (v.getBusy()) {
          u = "";
          u = v.getPlaying() || 0x0 !== v.getMoment() || 0x0 !== v.getLoop() ? "\t\t\t<polo id='" + v.id + "' picto='" + v.getPicto().id + "' mute='" + v.getMute() + "' playing='" + v.getPlaying() + "'/>\n" : "\t\t\t<polo id='" + v.id + "' picto='" + v.getPicto().id + "' mute='" + v.getMute() + "' playing='true'/>\n";
          i += u;
        }
      }
    }
    i += "\t\t</stage>\n";
  };
  this.xmlCloseLoop = function () {
    h += i += "\t</loop>\n";
  };
  this.xmlOpenAction = function () {
    i += "\t\t<action>\n";
    if (0x0 === k && bonusWaiting) {
      recordMix.xmlAction("bonus", listBonus[bonusQueue - 0x1], true);
    }
  };
  this.xmlCloseAction = function () {
    i += "\t\t</action>\n";
  };
  this.xmlAction = function (q, u, v) {
    var w;
    var x;
    if (j) {
      v = undefined !== v && v;
      w = decimal((loopOn || true ? timenow - startboucle : 0x0) / 0x3e8, 0x2);
      x = "";
      if ("bonus" == q) {
        x += v ? "\t\t\t<user type='" + q + "' bonus='" + u.getId() + "' when='0.1'/>\n" : "\t\t\t<user type='" + q + "' bonus='" + u.getId() + "' when='" + w + "'/>\n";
      } else {
        w = p - 0.5 < w ? p : w;
        x += "\t\t\t<user type='" + q + "' polo='" + u.id + "' picto='" + u.getPicto().id + "' when='" + w + "'/>\n";
      }
      i += x;
    }
  };
};
function prepareReplayMode() {
  modeReplay = true;
  $body.addClass("mode-replay");
  lock();
  closeTool();
  $btTool.off().on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(stopReplayMode);
  });
  $btTool.bounce();
  hideDiv($boxBtBonus, !modeWatch);
  hideDiv($boxPicto, !modeWatch);
  hideDiv($boxLoaderPolo, !modeWatch);
  $btTool.$svg.attr("xlink:href", "#ic-close");
  $btSave.on(pointerEventType.down, function (h) {
    h.preventDefault();
    preventAction(function () {
      Spinner.add($btSave);
      stopReplayMode(true);
    });
  });
  $boxStage.addClass("pointerlock");
  if (modeWatch) {
    $body.addClass("mode-watch");
    $mixlist.hide();
    $watchInfo.addClass("fadeIn");
  } else {
    $watchInfo.addClass("fadeIn");
    $watchInfo.$title.html(STR("txt.replayTitle"));
    $watchInfo.$name.html(STR("txt.replayText"));
    $watchInfo.$dedi.empty();
    $btSave.find(".txt").html(STR("bt.save"));
  }
}
function startReplayMode() {
  var g = modeWatch ? null != mixToWatch.xml ? mixToWatch.xml : mixToWatch.mix : recordMix.getXML();
  replayMix = new ReplayMix(g);
  readingBar.maxLoop = replayMix.getTotalLoop();
  readingBar.bonusList = replayMix.getBonusList();
  TweenMax.delayedCall(0.4, function () {
    readingBar.open("play", replayMix.control);
    readingBar.onLoopsFinished = () => {
      stopReplayMode();
    };
    readingBar.onLooping = () => {
      replayMix.loop();
    };
    readingBar.start();
    replayMix.start();
  });
  TweenMax.delayedCall(0.6, function () {
    createFocus("mode-replay");
    unlock();
  });
}
function stopReplayMode(g) {
  removeInFocusHistory("mode-replay");
  deleteFocus();
  if (!froze) {
    desactivateControl();
    $btTool.off();
    modeReplay = false;
    readingBar.stop();
    readingBar.close();
    replayMix.stop();
    if (modeWatch) {
      if (miniPlayer) {
        stopAllStage();
      }
      backToHome();
    } else {
      stopAllStage();
      $btTool.bounce();
      $btTool.$svg.attr("xlink:href", "#ic-burger");
      $watchInfo.removeClass("fadeIn");
      if (true === g) {
        Spinner.reset();
        if (appBrowserDemo) {
          popupGetApp(true);
        } else {
          popupForm();
        }
      } else {
        popupRecok();
      }
      TweenMax.delayedCall(0.4, afterStopReplay);
    }
    enableBtTool();
  }
}
function afterStopReplay() {
  showDiv($boxBtBonus, !modeWatch);
  showDiv($boxPicto, !modeWatch);
  showDiv($boxLoaderPolo, !modeWatch);
  $body.removeClass("mode-replay");
  $boxStage.removeClass("pointerlock");
}
function reinitModeWatch() {
  afterStopReplay();
  modeWatch = false;
  $body.removeClass("mode-watch");
  $btTool.$svg.attr("xlink:href", "#ic-burger");
  $watchInfo.removeClass();
  $mixlist.show();
}
function clickBtWatch(g) {
  if (undefined !== g.type) {
    g.stopPropagation();
  }
  var i;
  var g = undefined === g.type ? g : null;
  var j = null == g || "undefined" === g;
  if (null == (g = j ? searchMixInCurrentList((i = $(this).parent().parent()).attr("data-key").replace("mix-", "")) : g) || "undefined" === (g = j ? searchMixInCurrentList((i = $(this).parent().parent()).attr("data-key").replace("mix-", "")) : g)) {
    boxDialog.open(STR("pop.notFoundText"), STR("pop.notFoundTitle"), [STR("bt.ok")]);
  } else {
    modeWatch = true;
    mixToWatch = g;
    $watchInfo.$title.html(g.title);
    $watchInfo.$name.html(STR("txt.createdBy").split("%{name}").join(g.name));
    $watchInfo.$dedi.html("" == g.dedi ? "" : STR("txt.dedicatedTo").split("%{name}").join(g.dedi));
    $watchInfo.$date.html(getStringDate(g.datedb));
    $watchInfo.$date.attr("data-date", g.datedb);
    $watchInfo.find(".mixbanner").attr("class", "mixbanner");
    $watchInfo.find(".stat").empty();
    if (j) {
      j = i.find(".stat").html();
      $watchInfo.find(".stat").html(j);
      j = $watchInfo.find(".dj .box-flag");
      if (g.country) {
        j.find(".fflag").removeClass().addClass("fflag fflag-" + g.country.toUpperCase());
      } else {
        j.hide();
      }
      j = "";
      j = (j = (j = (j = (j += i.hasClass("ismymix") ? " ismymix" : "") + (i.hasClass("isfavoris") ? " isfavoris" : "")) + (i.hasClass("istop50") ? " istop50" : "")) + (i.hasClass("islatest") ? " islatest" : "")) + (i.hasClass("isprivate") ? " isprivate" : "");
      $watchInfo.find(".mixbanner").addClass(j);
    } else {
      $watchInfo.find(".stat").html("\n\t\t\t\t<div class='boxstat liked'><div class='txt'>" + numberSpaced(g.nblike) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-like-mini'></use></svg></div></div>\n\t\t\t\t<div class='boxstat viewed'><div class='txt'>" + numberSpaced(g.nbview) + "</div><div class='bck'><svg class='icn-svg'><use xlink:href='#ic-view-mini'></use></svg></div></div>\n\t\t\t");
    }
    if (!(mixToWatch.mymix || ($btLike.removeClass("liked already disabled"), $btLike.off().on(pointerEventType.down, clickBtLikeMix), g.liked && $btLike.addClass("liked"), miniPlayer))) {
      countView();
    }
    clickHomeBtPlay();
  }
}
function clickBtLikeMix(g) {
  g.preventDefault();
  if ($btLike.hasClass("disabled")) {
    return false;
  }
  if (hasNetwork) {
    $btLike.addClass("disabled");
    Spinner.add($btLike);
    TweenMax.delayedCall(0.5, function () {
      if (true === mixToWatch.liked) {
        $btLike.removeClass("liked");
        TweenMax.delayedCall(0.5, function () {
          $btLike.removeClass("disabled");
        });
        countLike("nbunlike");
      } else {
        $btLike.addClass("liked");
        TweenMax.delayedCall(0.5, function () {
          $btLike.removeClass("disabled");
        });
        countLike("nblike");
      }
    });
  } else {
    boxDialog.open(STR("pop.noNetworkVotedText"), STR("pop.noNetworkTitle"), [STR("bt.ok")]);
  }
}
function countLike(g) {
  var i = {
    "uuid": trustAppMobile ? device.uuid : "unknown",
    id: mixToWatch.id,
    "link": mixToWatch.link,
    "row": g
  };
  xhr("POST", "https://www.incredibox.com/ph3/save-stat-mix.php", i, function (j) {
    if ("success" == j.state) {
      switch (j.info) {
        case "like ok":
          mixToWatch.liked = true;
          mixToWatch.nblike++;
          break;
        case "unlike ok":
          delete mixToWatch.liked;
          mixToWatch.nblike--;
          mixToWatch.nblike = mixToWatch.nblike < 0x0 ? 0x0 : mixToWatch.nblike;
          break;
        case "already liked":
          boxDialog.open(STR("pop.alreadyVotedText"), STR("pop.alreadyVotedTitle"), [STR("bt.ok")]);
          $btLike.addClass("already liked");
          mixToWatch.liked = true;
      }
    }
    Spinner.reset();
    $watchInfo.$like = $watchInfo.find(".stat .liked");
    $watchInfo.$like.find(".bck").addClass("popIn").one(animationEnd, function (k) {
      $(k.target).removeClass(_classname);
    });
    $watchInfo.$like.find(".txt").text(numberSpaced(mixToWatch.nblike));
    if (!miniPlayer) {
      $lineOpened.find(".stat .liked .txt").text(numberSpaced(mixToWatch.nblike));
    }
  }, function (j) {});
}
function countView() {
  var h = {
    "uuid": trustAppMobile ? device.uuid : "unknown",
    "link": mixToWatch.link,
    row: "nbview"
  };
  if (hasNetwork) {
    xhr("POST", "https://www.incredibox.com/ph3/save-stat-mix.php", h, function (i) {
      if ("success" == i.state) {
        mixToWatch.viewed = true;
      }
    });
  }
}
var controlBoucle = 0x0;
var controlIsBuzy = false;
function activateControl() {
  $boxStage[0x0].addEventListener(pointerEventType.down, listenControlPress);
}
function listenControlPress(g) {
  g.preventDefault();
  if (!controlIsBuzy) {
    clearTimeout(controlTimeout);
    $boxStage[0x0].removeEventListener(pointerEventType.move, moveControlHead);
    $boxStage[0x0].addEventListener(pointerEventType.move, moveControlHead);
    document.body.removeEventListener(pointerEventType.up, listenControlRelease);
    document.body.addEventListener(pointerEventType.up, listenControlRelease);
    readingBar.openBig();
    moveControlHead(g);
    frozeScene();
  }
}
function listenControlRelease(g) {
  g.preventDefault();
  clearTimeout(controlTimeout);
  $boxStage[0x0].removeEventListener(pointerEventType.move, moveControlHead);
  document.body.removeEventListener(pointerEventType.up, listenControlRelease);
  readingBar.openNormal();
  controlTimeout = setTimeout(controlTimeoutComplete, 0x190);
}
function controlTimeoutComplete() {
  controlIsBuzy = true;
  unfrozeScene(controlBoucle = readingBar.cntLoop);
  setTimeout(function () {
    controlIsBuzy = false;
  }, 0xc8);
}
function moveControlHead(g) {
  g = "targetTouches" in g ? g.targetTouches[0x0] : g;
  var h = $incredibox[0x0].offsetLeft;
  var g = g.pageX - h;
  var g = Math.floor(readingBar.maxLoop * g / (document.body.clientWidth - 0x2 * h));
  g = (g = g < 0x0 ? 0x0 : g) > readingBar.maxLoop - 0x1 ? readingBar.maxLoop - 0x1 : g;
  readingBar.seek(g);
}
function desactivateControl() {
  $boxStage[0x0].removeEventListener(pointerEventType.down, listenControlPress);
  $boxStage[0x0].removeEventListener(pointerEventType.move, moveControlHead);
  document.body.removeEventListener(pointerEventType.up, listenControlRelease);
  controlBoucle = 0x0;
  clearTimeout(controlTimeout);
}
var ReplayMix = function (g) {
  var j;
  var k;
  var m;
  var o;
  var q;
  var v;
  var w;
  var x = this;
  function y() {
    var z;
    var A = getListPoloBusy();
    var B = getListPoloUnmute();
    if (0x1 < B.length) {
      for (z in A) A[z].setSolo(false);
    } else {
      if (0x1 == A.length) {
        A[0x0].setSolo(false);
      } else {
        if (0x1 < A.length && 0x1 == B.length) {
          for (z in A) A[z].setSolo(false);
          B[0x0].setSolo(true);
        }
      }
    }
  }
  this.control = false;
  this.reloop = false;
  this.waitForReloop = false;
  this.init = function () {
    var z;
    var A;
    k = $.parseXML(g);
    if (0x0 < (j = $(k)).find("compo").length) {
      m = true;
      z = convertFlashXml(g);
      k = $.parseXML(z);
      j = $(k);
    }
    k = j.find("mix");
    o = appBrowserDemo || appBrowserSchool || "true" === k.attr("control") && !appBrowser;
    q = k.children().length;
    v = decimal(loopDuration / 0x3e8, 0x2);
    w = 0x0;
    if (o) {
      A = [];
      j.find("user[type=bonus]").each(function () {
        A.push(parseInt($(this).attr("bonus")));
      });
      if ((A = removeDupInArray(A)).length <= app.bonusarray.length) {
        activateControl();
      } else {
        o = false;
      }
    }
    this.control = o;
    this.reloop = false;
    this.waitForReloop = false;
  };
  this.getTotalLoop = function () {
    return q;
  };
  this.start = function () {
    x.loop();
  };
  this.stop = function () {
    TweenMax.killTweensOf(x.appendPolo);
    TweenMax.killTweensOf(x.removePolo);
    TweenMax.killTweensOf(x.mutePolo);
    TweenMax.killTweensOf(x.unmutePolo);
    TweenMax.killTweensOf(x.launchBonus);
    TweenMax.killTweensOf(x.soloPolo);
    this.control = false;
    x.reloop = false;
    x.waitForReloop = false;
  };
  this.loop = function (z) {
    var B;
    var C;
    if (null != z && "undefined" !== z) {
      w = z;
      x.reloop = true;
    }
    if (w == q) {
      stopReplayMode();
    } else {
      z = j.find("loop[count=\"" + w + "\"]");
      if (!(0x0 !== w && !x.reloop)) {
        boucleA = "true" == z.attr("boucleA");
        C = z.find("stage");
        B = 0x0;
        $(C).children().each(function (D) {
          var E;
          var F;
          var G;
          var H;
          var I = this.tagName;
          if ("polo" == I) {
            E = Number($(this).attr("id"));
            F = Number($(this).attr("picto"));
            H = "true" == $(this).attr("mute");
            D = -0x1 == E ? listPolo[D] : listPolo[E];
            E = listPicto[F];
            F = x.reloop ? 0x0 : 0.03;
            G = !!x.reloop;
            x.appendPolo(D, E, B * F, G);
            if ("false" == $(this).attr("playing")) {
              D.waitOneLoop = true;
            }
            if (H) {
              x.mutePolo(D);
            }
            B++;
          }
          if (0x0 < w && "bonus" == I) {
            E = Number($(this).attr("id"));
            F = "true" === $(this).attr("playing");
            G = "true" === $(this).attr("waiting");
            H = Number($(this).attr("cntBoucle"));
            if (G) {
              TweenMax.delayedCall(0.1, x.launchBonus, [E]);
            } else if (F) {
              x.launchBonus(E, H, true);
            }
          }
        });
        if (m && 0x1 == (C = getListPoloUnmute()).length && 0x1 < getListPoloBusy().length) {
          C[0x0].setSolo(true);
        }
        x.reloop = false;
      }
      C = z.find("action");
      $(C).children().each(function () {
        var D;
        var E;
        var F;
        var G;
        if ("user" == this.tagName) {
          D = $(this).attr("type");
          E = decimal(Number($(this).attr("when")), 0x2);
          E = v < E ? v : E;
          if ("bonus" == D) {
            F = Number($(this).attr("bonus"));
            F = m ? F - 0x1 : F;
            E = 0x0 === E ? 0.1 : E;
            E = waitingFirstLoop && E < 0.5 ? E + 0.5 : E;
            TweenMax.delayedCall(E, x.launchBonus, [F]);
          } else {
            F = Number($(this).attr("polo"));
            G = Number($(this).attr("picto"));
            F = -0x1 == F ? {
              "fromFlash": true
            } : listPolo[F];
            G = listPicto[G];
            if ("append" == D) {
              TweenMax.delayedCall(E, x.appendPolo, [F, G]);
            } else if ("remove" == D) {
              TweenMax.delayedCall(E, x.removePolo, [F, G]);
            } else if ("mute" == D) {
              TweenMax.delayedCall(E, x.mutePolo, [F, G]);
            } else if ("unmute" == D) {
              TweenMax.delayedCall(E, x.unmutePolo, [F, G]);
            }
            if (m && "solo" == D) {
              TweenMax.delayedCall(E, x.soloPolo, [G]);
            }
          }
        }
      });
      w++;
    }
  };
  this.getBonusList = function () {
    var z = [];
    $(j).find("bonus[playing='true']").each(function () {
      z.push({
        "id": parseInt($(this).attr("id")),
        "loopIndex": parseInt($(this).parent().parent().attr("count"))
      });
    });
    return z;
  };
  this.appendPolo = function (z, A, B, C) {
    pictoTouchePolo(z = true === z.fromFlash ? getListPoloFree()[0x0] : z, A, B, C);
    majListPoloDrop();
  };
  this.removePolo = function (z, A) {
    if ((z = true === z.fromFlash ? A.polo : z).getBusy()) {
      clickPolo(z);
    }
  };
  this.mutePolo = function (z, A) {
    if ((z = true === z.fromFlash ? A.polo : z).getBusy() && (mutePolo(z), m)) {
      y();
    }
  };
  this.unmutePolo = function (z, A) {
    if ((z = true === z.fromFlash ? A.polo : z).getBusy() && (unmutePolo(z), m)) {
      y();
    }
  };
  this.launchBonus = function (z, A, B) {
    if (null != listBonus[z] && "undefined" !== listBonus[z]) {
      if (B) {
        immediatePlayBonus(z, A);
      } else {
        listBonus[z].launchVideo();
      }
    }
  };
  this.soloPolo = function (z) {
    if (m) {
      z = z.polo;
      if (z.getBusy()) {
        if (z.getSolo()) {
          z.setSolo(false);
          stopSoloPolo();
        } else {
          var A = getListPoloBusy();
          var B = 0x0;
          for (var C = A.length; B < C; B++) {
            A[B].setSolo(false);
          }
          z.setSolo(true);
          soloPolo();
        }
      }
    }
  };
  if (null != g && "undefined" !== g) {
    this.init();
  }
};
function convertFlashXml(g) {
  var g = $.parseXML(g);
  var g = $(g).find("compo");
  var i = "true" === g.attr("boucle");
  var j = "<mix version=\"flash\">\n";
  g.children().each(function (k) {
    var n = "\t<loop boucleA=\"" + i + "\" count=\"" + k + "\">\n";
    var p = "\t\t<stage>\n";
    var q = "\t\t<action>\n";
    $(this).children().each(function (v) {
      var w;
      var x = $(this);
      var y = x.find("polo");
      var z = x.attr("type");
      var A = y.attr("picto");
      var B = "0" === y.attr("vol");
      var y = 0x0 < y.attr("nbBoucle");
      var x = x.find("moment").attr("seconde");
      var x = decimal(Number(x), 0x2).toString();
      z = "" != (w = -0x1 < (z = "mute" === (z = "mute" !== (z = "supprimer" === (z = "ajouter" === z ? "append" : z) ? "remove" : z) || B ? z : "mute") && B ? "unmute" : z).indexOf("bonus") ? z.split("bonus").join("") : "") ? "bonus" : z;
      A = Number(A.split("picto").join(""));
      if (0x2 == Number(appVersion)) {
        switch (A) {
          case 0x0:
            A = 0x5;
            break;
          case 0x1:
            A = 0x6;
            break;
          case 0x2:
            A = 0x7;
            break;
          case 0x3:
            A = 0x8;
            break;
          case 0x4:
            A = 0x9;
            break;
          case 0x5:
            A = 0x0;
            break;
          case 0x6:
            A = 0x1;
            break;
          case 0x7:
            A = 0x2;
            break;
          case 0x8:
            A = 0x3;
            break;
          case 0x9:
            A = 0x4;
        }
      }
      if (0x0 == k && "0" === x) {
        p += "\t\t\t<polo id=\"-1\" picto=\"" + A + "\" mute=\"" + B + "\" playing=\"" + y + "\" />\n";
      } else {
        B = "\t\t\t<user type=\"" + z + "\" polo=\"-1\" picto=\"" + A + "\" when=\"" + x + "\" />\n";
        q += B = "bonus" === z ? "\t\t\t<user type=\"" + z + "\" bonus=\"" + w + "\" when=\"" + x + "\" />\n" : B;
      }
    });
    j += n + ((p += "\t\t</stage>\n") + (q += "\t\t</action>\n")) + "\t</loop>\n";
    i = !i;
  });
  return trim(j += "</mix>");
}
function parseXmlAndCheckAssets() {
  var h = mixToWatch.xml || mixToWatch.mix;
  var j = $.parseXML(h);
  var k = $(j);
  var m = k.find("mix");
  var q = false;
  if (0x0 < k.find("compo").length) {
    q = true;
    h = convertFlashXml(mixToWatch.xml);
    mixToWatch.xml = h;
    j = $.parseXML(h);
    m = (k = $(j)).find("mix");
  }
  var v = [];
  var w = [];
  var x = [];
  function y(C) {
    var D;
    if ("bonus" === C.attr("type")) {
      D = Number(C.attr("bonus"));
      if (!existInArray(w, D = q ? D - 0x1 : D)) {
        w.push(D);
      }
    } else {
      D = Number(C.attr("picto"));
      if (!existInArray(v, D)) {
        v.push(D);
      }
    }
  }
  m.children().each(function (C) {
    if (0x0 === C) {
      $(this).find("stage").each(function (E) {
        $(this).children().each(function (F) {
          y($(this));
        });
      });
    }
    $(this).find("action").each(function (E) {
      $(this).children().each(function (F) {
        y($(this));
      });
    });
  });
  var v = v.sort(function (C, D) {
    return C - D;
  });
  var w = w.sort(function (C, D) {
    return C - D;
  });
  var z = app.animearray[v[0x0]];
  var A = 0x0;
  for (var B = app.animearray.length; A < B; A++) {
    if (!existInArray(v, A)) {
      app.animearray[A] = z;
    }
  }
  A = 0x0;
  for (B = w.length; A < B; A++) {
    x.push(app.bonusarray[w[A]]);
  }
}
var adBreak;
var adConfig;
var convertForceStop = false;
var convertWorker = null;
function stopConvert() {
  if (null != convertWorker && "undefined" !== convertWorker) {
    convertWorker.terminate();
  } else {
    convertForceStop = true;
  }
}
function startConvert(j, q) {
  var G;
  var H = new AudioContext();
  var I = $($.parseXML(j.xml)).find("mix");
  var K = q.find("#convert-loader-box");
  var L = K.find(".progress-bar");
  var M = q.find("#bt-save-file");
  var q = q.find(".spinner-box");
  var N = "mp3";
  var R = [];
  var U = [];
  var V = "incredibox-v" + app.version + "-" + j.title.toString().toLowerCase().replace(/\s+/g, "-").replace(/&/g, "-and-").replace(/[^\w\-]+/g, "").replace(/\-\-+/g, "-").replace(/^-+/, "") + "-" + 0x140 + "kbps" + (j.online ? "-" + j.link : "") + "." + N;
  var W = 0x0;
  for (var W = 0x0; W < nbSound; W++) {
    var G;
    var H;
    var I;
    var K;
    var L;
    var M;
    var q;
    var N;
    var R;
    var U;
    var V;
    var W;
    var W;
    R.push([tabBuffer.sound[W].sndA, tabBuffer.sound[W].sndB]);
  }
  for (W = 0x0; W < nbSoundBonus; W++) {
    U.push([tabBuffer.bonus[W].snd, tabBuffer.bonus[W].aspire]);
  }
  var X;
  var Y;
  var Z = [];
  var a0 = 0x0;
  var a1 = false;
  var a2 = false;
  $(I).children().length;
  $(I).children().each(function (ad) {
    var af = "true" == $(this).attr("boucleA");
    var ag = $(this).find("stage");
    var ah = $(this).find("action");
    var ai = [];
    var aj = af ? 0x0 : 0x1;
    var ak = !app.bonusloopA || af;
    if (a1 && ak) {
      a2 = !(a1 = false);
      Z.push(U[X][0x0]);
    }
    if (a2 && ++a0 > app.bonusarray[X].loop) {
      a2 = false;
      Y = X = void (a0 = 0x0);
    }
    if (!a2) {
      ag.children().each(function (al) {
        var an;
        var ao;
        var ap;
        var aq;
        if ("polo" == this.tagName && (an = Number($(this).attr("picto")), aq = "true" == $(this).attr("playing"), ao = "true" == $(this).attr("mute"), ap = [], aq)) {
          aq = R[an][aj];
          if (ao) {
            ap.push({
              "when": 0x0,
              "type": "mute"
            });
          }
          ah.find("user[picto='" + an + "']").each(function (ar) {
            var as = $(this).attr("type");
            var at = Number($(this).attr("when"));
            if ("append" != as) {
              ap.push({
                "when": at,
                "type": as
              });
            }
          });
          if (0x0 < ap.length) {
            aq = function (ar, as, at) {
              var au = ar.numberOfChannels;
              var av = ar.duration;
              var aw = H.createBuffer(au, H.sampleRate * av, H.sampleRate);
              for (var ax = 0x0; ax < au; ax++) {
                var ay = aw.getChannelData(ax);
                var az = ar.getChannelData(ax);
                var aA = az.length;
                var aB = 0x0;
                var aC = as;
                var aD = aC;
                var aE = [];
                for (var aF = 0x0; aF < at.length; aF++) {
                  var aG = at[aF].when;
                  var aG = Math.round(aG * aA / av);
                  aE.push([aG, at[aF].type]);
                }
                var aH = 0x0 < aE.length;
                for (var aI = 0x0; aI < aA; aI++) {
                  if (aH && aI >= aE[aB][0x0]) {
                    aC = "mute" == aE[aB][0x1] || "remove" == aE[aB][0x1];
                    if (aE.length <= ++aB && (aH = false, 0x5f < Math.round(0x64 * aI / aA))) {
                      aC = aD;
                    }
                    aD = aC;
                  }
                  if (aC) {
                    ay[aI] = 0x0;
                  } else {
                    ay[aI] += az[aI];
                  }
                }
              }
              return aw;
            }(aq, ao, ap);
          }
          ai.push(aq);
        }
      });
      ah.find("user[type='bonus']").each(function (al) {
        a1 = true;
        X = Number($(this).attr("bonus"));
        Y = Number($(this).attr("when"));
      });
      if (a1) {
        ah.find("user[type='remove']").each(function (al) {
          var am = Number($(this).attr("picto"));
          var an = Number($(this).attr("when"));
          if (Y < an && function (ao, ap) {
            for (var aq = 0x0; aq < ap.length; aq++) {
              if (ao == ap[aq]) {
                return 0x1;
              }
            }
            return;
          }(am + 0x1, app.bonusarray[X].code.split(","))) {
            a1 = false;
            Y = undefined;
          }
        });
        Y = 0x0;
      }
      if (!(!a1 || app.bonusloopA && af)) {
        ai.push(U[X][0x1]);
      }
      Z.push(function (al) {
        var am = al.length;
        var an = 0x0;
        var ao = 0x0;
        for (var ap = 0x0; ap < am; ap++) {
          if (al[ap].numberOfChannels > an) {
            an = al[ap].numberOfChannels;
          }
          if (al[ap].duration > ao) {
            ao = al[ap].duration;
          }
        }
        var aq = H.createBuffer(an, H.sampleRate * (ao - 0x0), H.sampleRate);
        for (var ar = 0x0; ar < am; ar++) {
          for (var as = 0x0; as < al[ar].numberOfChannels; as++) {
            var at = aq.getChannelData(as);
            var au = al[ar].getChannelData(as);
            for (var av = 0x0; av < au.length; av++) {
              at[av] += au[av];
            }
          }
        }
        return aq;
      }(ai));
    }
  });
  if (!convertForceStop) {
    var a3 = j = function (ad) {
      var ae = ad.length;
      var af = [];
      var ag = 0x0;
      for (var ah = 0x0; ah < ae; ah++) {
        af.push(ad[ah].numberOfChannels);
        ag += ad[ah].duration;
      }
      ag = Math.ceil(ag);
      var ai = af.reduce(function (aq, ar) {
        return Math.min(aq, ar);
      });
      var aj = H.createBuffer(ai, H.sampleRate * ag, H.sampleRate);
      for (var ak = 0x0; ak < ai; ak++) {
        var al = aj.getChannelData(ak);
        var am = 0x0;
        for (var an = 0x0; an < ae; an++) {
          var ao = ad[an].getChannelData(ak);
          al.set(ao, am);
          am += ao.length;
        }
      }
      return aj;
    }(Z);
    var a5 = a3.numberOfChannels;
    for (var a6 = 0x0; a6 < a5; a6++) {
      var a7 = a3.getChannelData(a6);
      var a8 = 0x0;
      var a9 = 0x0;
      var aa = 0x0;
      for (var ab = a7.length; aa < ab; aa++) {
        if (a7[aa] > a8) {
          a8 = a7[aa];
        }
        if (a7[aa] < a9) {
          a9 = a7[aa];
        }
        if (a7[aa] > 0.9) {
          a7[aa] = 0.9;
          0x0;
        }
        if (a7[aa] < -0.9) {
          a7[aa] = -0.9;
          0x0;
        }
      }
    }
    I = j;
    var ac = 0x0;
    convertWorker = new Worker("js/libs/convert-worker.js");
    var I = {
      "sampleR": I.sampleRate,
      "numberC": I.numberOfChannels,
      "leftData": I.getChannelData(0x0),
      "rightData": I.getChannelData(0x1),
      "lng": I.length,
      "kbps": 0x140,
      "typeToExport": N
    };
    convertWorker.postMessage([I]);
    convertWorker.onmessage = function (ad) {
      var ae;
      var ad = ad.data;
      if ("msg" == ad.type) {
        ac++;
        ae = Math.floor(ac * 100 / 0x28);
        L.css({
          "width": 0x0 + (ae = 0x64 < (ae = ae < 0x5 ? 0x5 : ae) ? 0x64 : ae) + "%"
        });
      } else {
        convertWorker.terminate();
        ae = ad.val;
        G = "mp3" == N ? new Blob(ae, {
          "type": "audio/mp3"
        }) : new Blob([new DataView(ae)], {
          "type": "audio/wav"
        });
        if (window.cordova && cordova.plugins && cordova.plugins.saveDialog) {
          boxPopup.$icon.trigger(pointerEventType.down);
          cordova.plugins.saveDialog.saveFile(G, V).then(af => {})["catch"](af => {
            if ("The dialog has been cancelled" != af) {
              popupGeneralError({
                "error": "file plugin failed"
              });
            }
          });
        } else {
          G = window.URL.createObjectURL(G);
          K.addClass("hide");
          M.attr("href", G).attr("download", V).addClass("enabled");
          createFocus("popup-convert-mix-ready");
        }
        convertWorker = null;
        H.close();
        H = null;
      }
    };
    q.addClass("hide");
    K.addClass("show");
  }
}
function initAd() {}
function callAd(g, h, i) {
  if (i) {
    i();
  }
}
function initAnalytics() {}
function saveGA(g, h, i) {}

// why is evadare code here lol
const creditsButton = document.getElementById('credits-button');

// Open the pop-up when the button is clicked
creditsButton.addEventListener('click', () => {
  // Gallery HTML content

  // Open the boxDialog with gallery content
  boxDialog.open(`
<div class=gallery-container>
    <div class=gallery-slider>
        <div class=gallery-slide><img id=credits-images src=evadare/credits_arts/01c_remmie.png>
            <div class=container>
                <div id=text-credits><b>Evadare Mod by <span style=color:#5ea7ff>Rem</span></b></div>
                <div id=text-credits>It took me years of dedication, frustration, and countless retries to finally learn, to push myself harder, and to create something I can truly be proud of — an Incredibox MOD that reflects my passion. Never in my wildest dreams did I
                    expect the overwhelming support I received after releasing the first chapter of Evadare.
                    <br>
                    <br>To everyone who believed in me, who stood by my side, and continues to support me - thank you from the bottom of my heart. I wish you all good health, happiness, and a life filled with joy. Take care of yourselves, always!</div>
            </div>
        </div>
        <div class=gallery-slide><img id=credits-images src=evadare/credits_arts/02c_specialthanks.png>
            <div class=container>
                <div id=text-credits><b>Special Thanks!</b></div>
                <div id=text-credits>I want to say thank you to <b>Artemiy Kopych</b>, <b>Alex Ivan</b>, <b>Nick Patito</b>, <b>Person from Brazil</b>, <b>Charlles</b>, and <b>Simonn</b> for their help with this project. Special thanks to <b>Person from Brazil</b>, <b>Alex Ivan</b>,
                    and <b>Charlles</b> for helping with the sounds and adjustments, <b>Nick Patito</b> and <b>Simonn</b> for the art and concepts, and <b>Artemiy</b> for testing, small fixes, and constant support for the project, as always!
                    <br>
                    <br>Secret thanks to <b>SG</b>, the voice behind almost every sound in the Evadare series, <b>Siren Bread</b> for making Voice 1 icon for FSP, and thanks to my <b>Mom</b>, because she loves me-</div>
            </div>
        </div>
        <div class=gallery-slide><img id=credits-images src=evadare/credits_arts/03c_sofarsogood.png>
            <div class=container>
                <div id=text-credits><b>Special Thanks to SFSG</b></div>
                <div id=text-credits>SFSG (So Far So Good) is the incredible team behind Incredibox — a game that's been a huge creative spark for many of us. Big thanks to Allan, Romain, and Paul for creating this app and letting people like me share our creativity. Without
                    you, none of this would’ve happened.
                    <br>
                    <br>The simple idea of dragging icons to make music? Genius! It’s helped so many of us discover music in a fun way. Wishing you all the best with future updates and lots of health and happiness. You're amazing!</div>
            </div>
        </div>
        <div class=gallery-slide><img id=credits-images src=evadare/credits_arts/04c_kofiremmie.png>
            <div class=container>
                <div id=text-credits><b>Buy me a Coffee!</b></div>
                <div id=text-credits>All of my work is free, and I don’t sell any of the projects I create, which means I don’t earn anything from them. However, each project takes a lot of time and effort, and every little bit of support helps me continue improving and sharing
                    even more amazing content with everyone. If you enjoy what I do, please consider leaving a small donation - it means a lot to me and helps me improving! 💖</div>
            </div><img id=kofibutton src=evadare/credits_arts/04c_kofibutton.png></div>
    </div>
    <button class=prev onclick=prevSlide()>❮</button>
    <button class=next onclick=nextSlide()>❯</button>
</div>
`, '', ['Oki'], [boxDialog.close]);
});
function _0x1244a6(_0x5698d6, _0x52e3e1) {
  return _0x14d4(_0x5698d6 - 0x30b, _0x52e3e1);
}
function _0x2f80() {
  const _0x2437a1 = ["11028FOmWAr", "clientX", "addEventLi", "22478nvYEDO", "touchend", "45315yAecHk", "ontainer", "67686vNNhuB", ".gallery-s", "lider", "translateX", "458340CkDsBO", "182110QIXquz", "ches", "39VlAtPY", "torAll", "165AHbQla", ".gallery-c", "style", "735dZyJuU", "100hFGxYg", "1349440dnBEsb", "length", "52vBihma", "touches", "changedTou", "touchstart", "stener", "querySelec"];
  _0x2f80 = function () {
    return _0x2437a1;
  };
  return _0x2f80();
}
(function (_0x33ef93, _0x9c3b95) {
  const _0x3d9bf8 = _0x33ef93();
  while (true) {
    try {
      const _0x491808 = parseInt(_0x14d4(424, 0x47f)) / 0x1 + -parseInt(_0x14d4(428, 0x497)) / 0x2 * (-parseInt(_0x14d4(406, 0x471)) / 0x3) + -parseInt(_0x14d4(415, 0x48a)) / 0x4 * (parseInt(_0x14d4(404, 0x46a)) / 0x5) + -parseInt(_0x14d4(421, 0x47a)) / 0x6 * (parseInt(_0x14d4(411, 0x47b)) / 0x7) + -parseInt(_0x14d4(413, 0x47d)) / 0x8 + -parseInt(_0x14d4(426, 0x48d)) / 0x9 * (-parseInt(_0x14d4(412, 0x478)) / 0xa) + parseInt(_0x14d4(408, 0x46d)) / 0xb * (parseInt(_0x14d4(403, 0x468)) / 0xc);
      if (_0x491808 === _0x9c3b95) {
        break;
      } else {
        _0x3d9bf8.push(_0x3d9bf8.shift());
      }
    } catch (_0x21f00f) {
      _0x3d9bf8.push(_0x3d9bf8.shift());
    }
  }
})(_0x2f80, 0x3d2bc);
let currentSlide = 0x0;
function showSlide(_0x5dea46) {
  const _0x209095 = document.querySelectorAll(".gallery-slide");
  const _0x9503af = document.querySelector(".gallery-slider");
  if (_0x5dea46 >= _0x209095.length) {
    currentSlide = 0x0;
  } else if (_0x5dea46 < 0x0) {
    currentSlide = _0x209095.length - 0x1;
  } else {
    currentSlide = _0x5dea46;
  }
  const _0x1184ee = -currentSlide * 0x64;
  _0x9503af.style.transform = "translateX(" + _0x1184ee + "%)";
}
function nextSlide() {
  showSlide(currentSlide + 0x1);
}
function _0x14d4(_0x5701bf, _0x217469) {
  const _0x2f8024 = _0x2f80();
  _0x14d4 = function (_0x14d4d0, _0x1a5b15) {
    _0x14d4d0 = _0x14d4d0 - 0x192;
    let _0x5f3899 = _0x2f8024[_0x14d4d0];
    return _0x5f3899;
  };
  return _0x14d4(_0x5701bf, _0x217469);
}
function prevSlide() {
  showSlide(currentSlide - 0x1);
}
let startX;
document.querySelector(".gallery-container").addEventListener("touchstart", _0x3b85c0 => {
  startX = _0x3b85c0.touches[0x0].clientX;
});
document.querySelector(".gallery-container").addEventListener("touchend", _0x499a9d => {
  let _0x396c21 = _0x499a9d.changedTouches[0x0].clientX;
  if (startX > _0x396c21 + 0x32) {
    nextSlide();
  } else if (startX < _0x396c21 - 0x32) {
    prevSlide();
  }
});
